
eInkProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001570  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f10  08007f10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f18  08007f18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000078  08007f98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08007f98  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001772c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316b  00000000  00000000  000377d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0003a940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  0003b940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029678  00000000  00000000  0003c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016769  00000000  00000000  00065e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4bb1  00000000  00000000  0007c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c8  00000000  00000000  001711c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006988 	.word	0x08006988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006988 	.word	0x08006988

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DCF77_Init>:
 */

#include "DCF77.h"


void DCF77_Init(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	DCF77_Enable(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f000 f803 	bl	8000588 <DCF77_Enable>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <DCF77_Enable>:

void  DCF77_Enable(uint8_t state){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d106      	bne.n	80005a6 <DCF77_Enable+0x1e>
		HAL_GPIO_WritePin(DCF77_EN_GPIO_Port, DCF77_EN_Pin, 0); //On, Active Low
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <DCF77_Enable+0x34>)
 80005a0:	f001 fe56 	bl	8002250 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(DCF77_EN_GPIO_Port, DCF77_EN_Pin, 1); //Off, Active Low
	}
}
 80005a4:	e005      	b.n	80005b2 <DCF77_Enable+0x2a>
		HAL_GPIO_WritePin(DCF77_EN_GPIO_Port, DCF77_EN_Pin, 1); //Off, Active Low
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <DCF77_Enable+0x34>)
 80005ae:	f001 fe4f 	bl	8002250 <HAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	48000800 	.word	0x48000800

080005c0 <Time_Init>:
extern RTC_HandleTypeDef hrtc;
RTC_TimeTypeDef sTime;
RTC_AlarmTypeDef sAlarm;
RTC_DateTypeDef sDate;

void Time_Init(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	RTC_AlarmCallback();
 80005c4:	f000 f80c 	bl	80005e0 <RTC_AlarmCallback>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}

080005cc <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	RTC_AlarmCallback();
 80005d4:	f000 f804 	bl	80005e0 <RTC_AlarmCallback>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <RTC_AlarmCallback>:

// Called every minute
void RTC_AlarmCallback(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

	uint8_t seconds_interval = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	71fb      	strb	r3, [r7, #7]
	if(seconds_interval > 59) seconds_interval = 59; //No bigger than 59 seconds
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b3b      	cmp	r3, #59	; 0x3b
 80005ee:	d901      	bls.n	80005f4 <RTC_AlarmCallback+0x14>
 80005f0:	233b      	movs	r3, #59	; 0x3b
 80005f2:	71fb      	strb	r3, [r7, #7]

	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005f4:	2200      	movs	r2, #0
 80005f6:	493e      	ldr	r1, [pc, #248]	; (80006f0 <RTC_AlarmCallback+0x110>)
 80005f8:	483e      	ldr	r0, [pc, #248]	; (80006f4 <RTC_AlarmCallback+0x114>)
 80005fa:	f003 fa65 	bl	8003ac8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); //Dummy read for valid time values
 80005fe:	2200      	movs	r2, #0
 8000600:	493d      	ldr	r1, [pc, #244]	; (80006f8 <RTC_AlarmCallback+0x118>)
 8000602:	483c      	ldr	r0, [pc, #240]	; (80006f4 <RTC_AlarmCallback+0x114>)
 8000604:	f003 fb43 	bl	8003c8e <HAL_RTC_GetDate>

	uint8_t next_second = sTime.Seconds+seconds_interval; //Max 59 second intervals
 8000608:	4b39      	ldr	r3, [pc, #228]	; (80006f0 <RTC_AlarmCallback+0x110>)
 800060a:	789a      	ldrb	r2, [r3, #2]
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4413      	add	r3, r2
 8000610:	71bb      	strb	r3, [r7, #6]

	if (next_second >= 60) {
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	2b3b      	cmp	r3, #59	; 0x3b
 8000616:	d925      	bls.n	8000664 <RTC_AlarmCallback+0x84>
		sAlarm.AlarmTime.Minutes = sAlarm.AlarmTime.Minutes + 1;
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <RTC_AlarmCallback+0x11c>)
 800061a:	785b      	ldrb	r3, [r3, #1]
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b36      	ldr	r3, [pc, #216]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000622:	705a      	strb	r2, [r3, #1]
		next_second-=60; //subtract 60s
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	3b3c      	subs	r3, #60	; 0x3c
 8000628:	71bb      	strb	r3, [r7, #6]
		sAlarm.AlarmTime.Seconds = next_second;
 800062a:	4a34      	ldr	r2, [pc, #208]	; (80006fc <RTC_AlarmCallback+0x11c>)
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	7093      	strb	r3, [r2, #2]
		if (sAlarm.AlarmTime.Minutes == 60) {
 8000630:	4b32      	ldr	r3, [pc, #200]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	2b3c      	cmp	r3, #60	; 0x3c
 8000636:	d115      	bne.n	8000664 <RTC_AlarmCallback+0x84>
			sAlarm.AlarmTime.Hours =  sAlarm.AlarmTime.Hours + 1;
 8000638:	4b30      	ldr	r3, [pc, #192]	; (80006fc <RTC_AlarmCallback+0x11c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000642:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.Minutes = 0;
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000646:	2200      	movs	r2, #0
 8000648:	705a      	strb	r2, [r3, #1]
			if (sAlarm.AlarmTime.Hours == 24) {
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <RTC_AlarmCallback+0x11c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b18      	cmp	r3, #24
 8000650:	d108      	bne.n	8000664 <RTC_AlarmCallback+0x84>
				sAlarm.AlarmTime.Hours = 0;
 8000652:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
				sAlarm.AlarmTime.Minutes = 0;
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <RTC_AlarmCallback+0x11c>)
 800065a:	2200      	movs	r2, #0
 800065c:	705a      	strb	r2, [r3, #1]
				sAlarm.AlarmTime.Seconds = 0;
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000660:	2200      	movs	r2, #0
 8000662:	709a      	strb	r2, [r3, #2]
			}
		}
	}

	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <RTC_AlarmCallback+0x11c>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000678:	f04f 3280 	mov.w	r2, #2155905152	; 0x80808080
 800067c:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <RTC_AlarmCallback+0x11c>)
 800068c:	2201      	movs	r2, #1
 800068e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <RTC_AlarmCallback+0x11c>)
 8000694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800069a:	2200      	movs	r2, #0
 800069c:	4917      	ldr	r1, [pc, #92]	; (80006fc <RTC_AlarmCallback+0x11c>)
 800069e:	4815      	ldr	r0, [pc, #84]	; (80006f4 <RTC_AlarmCallback+0x114>)
 80006a0:	f003 fb42 	bl	8003d28 <HAL_RTC_SetAlarm_IT>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <RTC_AlarmCallback+0xce>
	{
	Error_Handler();
 80006aa:	f000 ffe7 	bl	800167c <Error_Handler>
	}

	//Refresh Time
	//GUI_DrawTime(); every minute
	if(next_second == 0 ){
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d109      	bne.n	80006c8 <RTC_AlarmCallback+0xe8>
		if(sTime.Seconds == 0){ //once every minute
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <RTC_AlarmCallback+0x110>)
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <RTC_AlarmCallback+0xe2>
			drawTimeNowFullRedraw = 1;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <RTC_AlarmCallback+0x120>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
		}
		drawTimeNow = 1;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <RTC_AlarmCallback+0x124>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
	}

	//Refresh Date
	if(sTime.Hours == 0 && sTime.Minutes == 0 && sTime.Seconds == 0){
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <RTC_AlarmCallback+0x110>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10a      	bne.n	80006e6 <RTC_AlarmCallback+0x106>
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <RTC_AlarmCallback+0x110>)
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d106      	bne.n	80006e6 <RTC_AlarmCallback+0x106>
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <RTC_AlarmCallback+0x110>)
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <RTC_AlarmCallback+0x106>
		drawDateNow = 1;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <RTC_AlarmCallback+0x128>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
	}


}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	20000164 	.word	0x20000164
 80006f8:	200000e0 	.word	0x200000e0
 80006fc:	200000b4 	.word	0x200000b4
 8000700:	20000001 	.word	0x20000001
 8000704:	20000000 	.word	0x20000000
 8000708:	20000002 	.word	0x20000002

0800070c <Init_GUI>:
extern RTC_HandleTypeDef hrtc;

UBYTE *BlackImage;
UWORD Imagesize = ((EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1)) * EPD_2IN13_V2_HEIGHT;

void Init_GUI(){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af02      	add	r7, sp, #8
	EPD_2IN13_V2_Init(EPD_2IN13_V2_FULL);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fa18 	bl	8000b48 <EPD_2IN13_V2_Init>
	EPD_2IN13_V2_Clear();
 8000718:	f000 fb06 	bl	8000d28 <EPD_2IN13_V2_Clear>
	DEV_Delay_ms(100);
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f001 fa5f 	bl	8001be0 <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <Init_GUI+0x78>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f004 ff80 	bl	800562c <malloc>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <Init_GUI+0x7c>)
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <Init_GUI+0x7c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d01f      	beq.n	800077c <Init_GUI+0x70>
		//printf("Failed to apply for black memory...\r\n");
		return;
	}
	//printf("Paint_NewImage\r\n");
	Paint_NewImage(BlackImage, EPD_2IN13_V2_WIDTH, EPD_2IN13_V2_HEIGHT, 270, WHITE);
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <Init_GUI+0x7c>)
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	23ff      	movs	r3, #255	; 0xff
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000748:	22fa      	movs	r2, #250	; 0xfa
 800074a:	217a      	movs	r1, #122	; 0x7a
 800074c:	f000 f820 	bl	8000790 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <Init_GUI+0x7c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f871 	bl	800083c <Paint_SelectImage>
	//Paint_SetMirroring(MIRROR_HORIZONTAL); //
	Paint_SetMirroring(MIRROR_VERTICAL); //
 800075a:	2002      	movs	r0, #2
 800075c:	f000 f87e 	bl	800085c <Paint_SetMirroring>
	Paint_Clear(WHITE);
 8000760:	20ff      	movs	r0, #255	; 0xff
 8000762:	f000 f8b9 	bl	80008d8 <Paint_Clear>

	//Paint_DrawBitMap(gImage_2in13);
	Paint_DrawBitMap(splash);
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <Init_GUI+0x80>)
 8000768:	f000 f922 	bl	80009b0 <Paint_DrawBitMap>

	EPD_2IN13_V2_Display(BlackImage);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <Init_GUI+0x7c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fb00 	bl	8000d76 <EPD_2IN13_V2_Display>
	//printf("Goto Sleep...\r\n");
	EPD_2IN13_V2_Sleep();
 8000776:	f000 fb30 	bl	8000dda <EPD_2IN13_V2_Sleep>
 800077a:	e000      	b.n	800077e <Init_GUI+0x72>
		return;
 800077c:	bf00      	nop

	//DEV_Module_Exit();

}
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000004 	.word	0x20000004
 8000788:	200000e4 	.word	0x200000e4
 800078c:	08006df8 	.word	0x08006df8

08000790 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	4608      	mov	r0, r1
 800079a:	4611      	mov	r1, r2
 800079c:	461a      	mov	r2, r3
 800079e:	4603      	mov	r3, r0
 80007a0:	817b      	strh	r3, [r7, #10]
 80007a2:	460b      	mov	r3, r1
 80007a4:	813b      	strh	r3, [r7, #8]
 80007a6:	4613      	mov	r3, r2
 80007a8:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <Paint_NewImage+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <Paint_NewImage+0xa8>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80007b6:	4a20      	ldr	r2, [pc, #128]	; (8000838 <Paint_NewImage+0xa8>)
 80007b8:	897b      	ldrh	r3, [r7, #10]
 80007ba:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <Paint_NewImage+0xa8>)
 80007be:	893b      	ldrh	r3, [r7, #8]
 80007c0:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80007c2:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <Paint_NewImage+0xa8>)
 80007c4:	8b3b      	ldrh	r3, [r7, #24]
 80007c6:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <Paint_NewImage+0xa8>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80007ce:	897b      	ldrh	r3, [r7, #10]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d103      	bne.n	80007e2 <Paint_NewImage+0x52>
 80007da:	897b      	ldrh	r3, [r7, #10]
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	b29b      	uxth	r3, r3
 80007e0:	e004      	b.n	80007ec <Paint_NewImage+0x5c>
 80007e2:	897b      	ldrh	r3, [r7, #10]
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	3301      	adds	r3, #1
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <Paint_NewImage+0xa8>)
 80007ee:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80007f0:	4a11      	ldr	r2, [pc, #68]	; (8000838 <Paint_NewImage+0xa8>)
 80007f2:	893b      	ldrh	r3, [r7, #8]
 80007f4:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <Paint_NewImage+0xa8>)
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <Paint_NewImage+0xa8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <Paint_NewImage+0x7e>
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	2bb4      	cmp	r3, #180	; 0xb4
 800080c:	d106      	bne.n	800081c <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <Paint_NewImage+0xa8>)
 8000810:	897b      	ldrh	r3, [r7, #10]
 8000812:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <Paint_NewImage+0xa8>)
 8000816:	893b      	ldrh	r3, [r7, #8]
 8000818:	80d3      	strh	r3, [r2, #6]
 800081a:	e006      	b.n	800082a <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <Paint_NewImage+0xa8>)
 800081e:	893b      	ldrh	r3, [r7, #8]
 8000820:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <Paint_NewImage+0xa8>)
 8000824:	897b      	ldrh	r3, [r7, #10]
 8000826:	80d3      	strh	r3, [r2, #6]
    }
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	200000e8 	.word	0x200000e8

0800083c <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <Paint_SelectImage+0x1c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	200000e8 	.word	0x200000e8

0800085c <Paint_SetMirroring>:
function:	Select Image mirror
parameter:
    mirror   :Not mirror,Horizontal mirror,Vertical mirror,Origin mirror
******************************************************************************/
void Paint_SetMirroring(UBYTE mirror)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
    if(mirror == MIRROR_NONE || mirror == MIRROR_HORIZONTAL || 
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d008      	beq.n	800087e <Paint_SetMirroring+0x22>
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d005      	beq.n	800087e <Paint_SetMirroring+0x22>
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d002      	beq.n	800087e <Paint_SetMirroring+0x22>
        mirror == MIRROR_VERTICAL || mirror == MIRROR_ORIGIN) {
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d11a      	bne.n	80008b4 <Paint_SetMirroring+0x58>
        Debug("mirror image x:%s, y:%s\r\n",(mirror & 0x01)? "mirror":"none", ((mirror >> 1) & 0x01)? "mirror":"none");
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <Paint_SetMirroring+0x30>
 8000888:	490e      	ldr	r1, [pc, #56]	; (80008c4 <Paint_SetMirroring+0x68>)
 800088a:	e000      	b.n	800088e <Paint_SetMirroring+0x32>
 800088c:	490e      	ldr	r1, [pc, #56]	; (80008c8 <Paint_SetMirroring+0x6c>)
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <Paint_SetMirroring+0x44>
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <Paint_SetMirroring+0x68>)
 800089e:	e000      	b.n	80008a2 <Paint_SetMirroring+0x46>
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <Paint_SetMirroring+0x6c>)
 80008a2:	461a      	mov	r2, r3
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <Paint_SetMirroring+0x70>)
 80008a6:	f004 ff7b 	bl	80057a0 <iprintf>
        Paint.Mirror = mirror;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <Paint_SetMirroring+0x74>)
 80008b0:	821a      	strh	r2, [r3, #16]
        mirror == MIRROR_VERTICAL || mirror == MIRROR_ORIGIN) {
 80008b2:	e003      	b.n	80008bc <Paint_SetMirroring+0x60>
    } else {
        Debug("mirror should be MIRROR_NONE, MIRROR_HORIZONTAL, \
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <Paint_SetMirroring+0x78>)
 80008b6:	f004 fff9 	bl	80058ac <puts>
        MIRROR_VERTICAL or MIRROR_ORIGIN\r\n");
    }    
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08006a30 	.word	0x08006a30
 80008c8:	08006a38 	.word	0x08006a38
 80008cc:	08006a40 	.word	0x08006a40
 80008d0:	200000e8 	.word	0x200000e8
 80008d4:	08006a64 	.word	0x08006a64

080008d8 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <Paint_Clear+0xd4>)
 80008e4:	8adb      	ldrh	r3, [r3, #22]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d003      	beq.n	80008f2 <Paint_Clear+0x1a>
 80008ea:	4b30      	ldr	r3, [pc, #192]	; (80009ac <Paint_Clear+0xd4>)
 80008ec:	8adb      	ldrh	r3, [r3, #22]
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d125      	bne.n	800093e <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80008f2:	2300      	movs	r3, #0
 80008f4:	82fb      	strh	r3, [r7, #22]
 80008f6:	e01c      	b.n	8000932 <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80008f8:	2300      	movs	r3, #0
 80008fa:	82bb      	strh	r3, [r7, #20]
 80008fc:	e011      	b.n	8000922 <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80008fe:	8aba      	ldrh	r2, [r7, #20]
 8000900:	8afb      	ldrh	r3, [r7, #22]
 8000902:	492a      	ldr	r1, [pc, #168]	; (80009ac <Paint_Clear+0xd4>)
 8000904:	8a49      	ldrh	r1, [r1, #18]
 8000906:	fb01 f303 	mul.w	r3, r1, r3
 800090a:	4413      	add	r3, r2
 800090c:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <Paint_Clear+0xd4>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4413      	add	r3, r2
 8000916:	88fa      	ldrh	r2, [r7, #6]
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800091c:	8abb      	ldrh	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	82bb      	strh	r3, [r7, #20]
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <Paint_Clear+0xd4>)
 8000924:	8a5b      	ldrh	r3, [r3, #18]
 8000926:	8aba      	ldrh	r2, [r7, #20]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3e8      	bcc.n	80008fe <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800092c:	8afb      	ldrh	r3, [r7, #22]
 800092e:	3301      	adds	r3, #1
 8000930:	82fb      	strh	r3, [r7, #22]
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <Paint_Clear+0xd4>)
 8000934:	8a9b      	ldrh	r3, [r3, #20]
 8000936:	8afa      	ldrh	r2, [r7, #22]
 8000938:	429a      	cmp	r2, r3
 800093a:	d3dd      	bcc.n	80008f8 <Paint_Clear+0x20>
 800093c:	e02f      	b.n	800099e <Paint_Clear+0xc6>
			}
		}		
	}else if(Paint.Scale == 7){
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <Paint_Clear+0xd4>)
 8000940:	8adb      	ldrh	r3, [r3, #22]
 8000942:	2b07      	cmp	r3, #7
 8000944:	d12b      	bne.n	800099e <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000946:	2300      	movs	r3, #0
 8000948:	827b      	strh	r3, [r7, #18]
 800094a:	e022      	b.n	8000992 <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800094c:	2300      	movs	r3, #0
 800094e:	823b      	strh	r3, [r7, #16]
 8000950:	e017      	b.n	8000982 <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000952:	8a3a      	ldrh	r2, [r7, #16]
 8000954:	8a7b      	ldrh	r3, [r7, #18]
 8000956:	4915      	ldr	r1, [pc, #84]	; (80009ac <Paint_Clear+0xd4>)
 8000958:	8a49      	ldrh	r1, [r1, #18]
 800095a:	fb01 f303 	mul.w	r3, r1, r3
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	b25a      	sxtb	r2, r3
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	b25b      	sxtb	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b259      	sxtb	r1, r3
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <Paint_Clear+0xd4>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	b2ca      	uxtb	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800097c:	8a3b      	ldrh	r3, [r7, #16]
 800097e:	3301      	adds	r3, #1
 8000980:	823b      	strh	r3, [r7, #16]
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <Paint_Clear+0xd4>)
 8000984:	8a5b      	ldrh	r3, [r3, #18]
 8000986:	8a3a      	ldrh	r2, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d3e2      	bcc.n	8000952 <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800098c:	8a7b      	ldrh	r3, [r7, #18]
 800098e:	3301      	adds	r3, #1
 8000990:	827b      	strh	r3, [r7, #18]
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <Paint_Clear+0xd4>)
 8000994:	8a9b      	ldrh	r3, [r3, #20]
 8000996:	8a7a      	ldrh	r2, [r7, #18]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3d7      	bcc.n	800094c <Paint_Clear+0x74>
			}
		}		
	}
}
 800099c:	e7ff      	b.n	800099e <Paint_Clear+0xc6>
 800099e:	bf00      	nop
 80009a0:	371c      	adds	r7, #28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200000e8 	.word	0x200000e8

080009b0 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	81bb      	strh	r3, [r7, #12]
 80009c0:	e01e      	b.n	8000a00 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 80009c2:	2300      	movs	r3, #0
 80009c4:	81fb      	strh	r3, [r7, #14]
 80009c6:	e013      	b.n	80009f0 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 80009c8:	89fa      	ldrh	r2, [r7, #14]
 80009ca:	89bb      	ldrh	r3, [r7, #12]
 80009cc:	4912      	ldr	r1, [pc, #72]	; (8000a18 <Paint_DrawBitMap+0x68>)
 80009ce:	8a49      	ldrh	r1, [r1, #18]
 80009d0:	fb01 f303 	mul.w	r3, r1, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	441a      	add	r2, r3
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <Paint_DrawBitMap+0x68>)
 80009e0:	6819      	ldr	r1, [r3, #0]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	440b      	add	r3, r1
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 80009ea:	89fb      	ldrh	r3, [r7, #14]
 80009ec:	3301      	adds	r3, #1
 80009ee:	81fb      	strh	r3, [r7, #14]
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <Paint_DrawBitMap+0x68>)
 80009f2:	8a5b      	ldrh	r3, [r3, #18]
 80009f4:	89fa      	ldrh	r2, [r7, #14]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d3e6      	bcc.n	80009c8 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 80009fa:	89bb      	ldrh	r3, [r7, #12]
 80009fc:	3301      	adds	r3, #1
 80009fe:	81bb      	strh	r3, [r7, #12]
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <Paint_DrawBitMap+0x68>)
 8000a02:	8a9b      	ldrh	r3, [r3, #20]
 8000a04:	89ba      	ldrh	r2, [r7, #12]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d3db      	bcc.n	80009c2 <Paint_DrawBitMap+0x12>
        }
    }
}
 8000a0a:	bf00      	nop
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	200000e8 	.word	0x200000e8

08000a1c <DEV_SPI_WriteByte>:
#include <eInk_config/DEV_Config.h>
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi2;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 8000a26:	1df9      	adds	r1, r7, #7
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <DEV_SPI_WriteByte+0x20>)
 8000a30:	f003 fd0f 	bl	8004452 <HAL_SPI_Transmit>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000100 	.word	0x20000100

08000a40 <EPD_2IN13_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN13_V2_Reset(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2101      	movs	r1, #1
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <EPD_2IN13_V2_Reset+0x38>)
 8000a4a:	f001 fc01 	bl	8002250 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8000a4e:	20c8      	movs	r0, #200	; 0xc8
 8000a50:	f001 f8c6 	bl	8001be0 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2101      	movs	r1, #1
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <EPD_2IN13_V2_Reset+0x38>)
 8000a5a:	f001 fbf9 	bl	8002250 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f001 f8be 	bl	8001be0 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2101      	movs	r1, #1
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <EPD_2IN13_V2_Reset+0x38>)
 8000a6a:	f001 fbf1 	bl	8002250 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8000a6e:	20c8      	movs	r0, #200	; 0xc8
 8000a70:	f001 f8b6 	bl	8001be0 <HAL_Delay>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	48000400 	.word	0x48000400

08000a7c <EPD_2IN13_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN13_V2_SendCommand(UBYTE Reg)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2101      	movs	r1, #1
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <EPD_2IN13_V2_SendCommand+0x38>)
 8000a8c:	f001 fbe0 	bl	8002250 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2102      	movs	r1, #2
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <EPD_2IN13_V2_SendCommand+0x38>)
 8000a96:	f001 fbdb 	bl	8002250 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffbd 	bl	8000a1c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <EPD_2IN13_V2_SendCommand+0x38>)
 8000aa8:	f001 fbd2 	bl	8002250 <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	48000800 	.word	0x48000800

08000ab8 <EPD_2IN13_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN13_V2_SendData(UBYTE Data)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <EPD_2IN13_V2_SendData+0x38>)
 8000ac8:	f001 fbc2 	bl	8002250 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <EPD_2IN13_V2_SendData+0x38>)
 8000ad2:	f001 fbbd 	bl	8002250 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff9f 	bl	8000a1c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <EPD_2IN13_V2_SendData+0x38>)
 8000ae4:	f001 fbb4 	bl	8002250 <HAL_GPIO_WritePin>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	48000800 	.word	0x48000800

08000af4 <EPD_2IN13_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN13_V2_ReadBusy(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <EPD_2IN13_V2_ReadBusy+0x2c>)
 8000afa:	f004 fed7 	bl	80058ac <puts>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8000afe:	e002      	b.n	8000b06 <EPD_2IN13_V2_ReadBusy+0x12>
        DEV_Delay_ms(100);
 8000b00:	2064      	movs	r0, #100	; 0x64
 8000b02:	f001 f86d 	bl	8001be0 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8000b06:	2110      	movs	r1, #16
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f001 fb88 	bl	8002220 <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d0f4      	beq.n	8000b00 <EPD_2IN13_V2_ReadBusy+0xc>
    }
    Debug("e-Paper busy release\r\n");
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <EPD_2IN13_V2_ReadBusy+0x30>)
 8000b18:	f004 fec8 	bl	80058ac <puts>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08006cf8 	.word	0x08006cf8
 8000b24:	08006d10 	.word	0x08006d10

08000b28 <EPD_2IN13_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN13_V2_TurnOnDisplay(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    EPD_2IN13_V2_SendCommand(0x22);
 8000b2c:	2022      	movs	r0, #34	; 0x22
 8000b2e:	f7ff ffa5 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0xC7);
 8000b32:	20c7      	movs	r0, #199	; 0xc7
 8000b34:	f7ff ffc0 	bl	8000ab8 <EPD_2IN13_V2_SendData>
    EPD_2IN13_V2_SendCommand(0x20);
 8000b38:	2020      	movs	r0, #32
 8000b3a:	f7ff ff9f 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_ReadBusy();
 8000b3e:	f7ff ffd9 	bl	8000af4 <EPD_2IN13_V2_ReadBusy>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <EPD_2IN13_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN13_V2_Init(UBYTE Mode)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
    UBYTE count;
    EPD_2IN13_V2_Reset();
 8000b52:	f7ff ff75 	bl	8000a40 <EPD_2IN13_V2_Reset>

    if(Mode == EPD_2IN13_V2_FULL) {
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f040 8091 	bne.w	8000c80 <EPD_2IN13_V2_Init+0x138>
        EPD_2IN13_V2_ReadBusy();
 8000b5e:	f7ff ffc9 	bl	8000af4 <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x12); // soft reset
 8000b62:	2012      	movs	r0, #18
 8000b64:	f7ff ff8a 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_ReadBusy();
 8000b68:	f7ff ffc4 	bl	8000af4 <EPD_2IN13_V2_ReadBusy>

        EPD_2IN13_V2_SendCommand(0x74); //set analog block control
 8000b6c:	2074      	movs	r0, #116	; 0x74
 8000b6e:	f7ff ff85 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x54);
 8000b72:	2054      	movs	r0, #84	; 0x54
 8000b74:	f7ff ffa0 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x7E); //set digital block control
 8000b78:	207e      	movs	r0, #126	; 0x7e
 8000b7a:	f7ff ff7f 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x3B);
 8000b7e:	203b      	movs	r0, #59	; 0x3b
 8000b80:	f7ff ff9a 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x01); //Driver output control
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff ff79 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);
 8000b8a:	20f9      	movs	r0, #249	; 0xf9
 8000b8c:	f7ff ff94 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff ff91 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff ff8e 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x11); //data entry mode
 8000b9c:	2011      	movs	r0, #17
 8000b9e:	f7ff ff6d 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x01);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f7ff ff88 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x44); //set Ram-X address start/end position
 8000ba8:	2044      	movs	r0, #68	; 0x44
 8000baa:	f7ff ff67 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ff82 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x0F);    //0x0C-->(15+1)*8=128
 8000bb4:	200f      	movs	r0, #15
 8000bb6:	f7ff ff7f 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x45); //set Ram-Y address start/end position
 8000bba:	2045      	movs	r0, #69	; 0x45
 8000bbc:	f7ff ff5e 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);   //0xF9-->(249+1)=250
 8000bc0:	20f9      	movs	r0, #249	; 0xf9
 8000bc2:	f7ff ff79 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff ff76 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ff73 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff ff70 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
 8000bd8:	203c      	movs	r0, #60	; 0x3c
 8000bda:	f7ff ff4f 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x03);
 8000bde:	2003      	movs	r0, #3
 8000be0:	f7ff ff6a 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x2C); //VCOM Voltage
 8000be4:	202c      	movs	r0, #44	; 0x2c
 8000be6:	f7ff ff49 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x55); //
 8000bea:	2055      	movs	r0, #85	; 0x55
 8000bec:	f7ff ff64 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x03);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f7ff ff43 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[70]);
 8000bf6:	2315      	movs	r3, #21
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5d 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x04); //
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f7ff ff3c 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[71]);
 8000c04:	2341      	movs	r3, #65	; 0x41
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff56 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[72]);
 8000c0c:	23a8      	movs	r3, #168	; 0xa8
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff52 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[73]);
 8000c14:	2332      	movs	r3, #50	; 0x32
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff4e 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x3A);     //Dummy Line
 8000c1c:	203a      	movs	r0, #58	; 0x3a
 8000c1e:	f7ff ff2d 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[74]);
 8000c22:	2330      	movs	r3, #48	; 0x30
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff47 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x3B);     //Gate time
 8000c2a:	203b      	movs	r0, #59	; 0x3b
 8000c2c:	f7ff ff26 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[75]);
 8000c30:	230a      	movs	r3, #10
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff40 	bl	8000ab8 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x32);
 8000c38:	2032      	movs	r0, #50	; 0x32
 8000c3a:	f7ff ff1f 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        for(count = 0; count < 70; count++) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	e008      	b.n	8000c56 <EPD_2IN13_V2_Init+0x10e>
            EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[count]);
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	4a35      	ldr	r2, [pc, #212]	; (8000d1c <EPD_2IN13_V2_Init+0x1d4>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff34 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        for(count = 0; count < 70; count++) {
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	3301      	adds	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2b45      	cmp	r3, #69	; 0x45
 8000c5a:	d9f3      	bls.n	8000c44 <EPD_2IN13_V2_Init+0xfc>
        }

        EPD_2IN13_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 8000c5c:	204e      	movs	r0, #78	; 0x4e
 8000c5e:	f7ff ff0d 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ff28 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x4F);   // set RAM y address count to 0X127;
 8000c68:	204f      	movs	r0, #79	; 0x4f
 8000c6a:	f7ff ff07 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);
 8000c6e:	20f9      	movs	r0, #249	; 0xf9
 8000c70:	f7ff ff22 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff ff1f 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_ReadBusy();
 8000c7a:	f7ff ff3b 	bl	8000af4 <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
        EPD_2IN13_V2_SendData(0x01);
    } else {
        Debug("error, the Mode is EPD_2IN13_FULL or EPD_2IN13_PART");
    }
}
 8000c7e:	e049      	b.n	8000d14 <EPD_2IN13_V2_Init+0x1cc>
    } else if(Mode == EPD_2IN13_V2_PART) {
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d143      	bne.n	8000d0e <EPD_2IN13_V2_Init+0x1c6>
        EPD_2IN13_V2_SendCommand(0x2C);     //VCOM Voltage
 8000c86:	202c      	movs	r0, #44	; 0x2c
 8000c88:	f7ff fef8 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x26);
 8000c8c:	2026      	movs	r0, #38	; 0x26
 8000c8e:	f7ff ff13 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_ReadBusy();
 8000c92:	f7ff ff2f 	bl	8000af4 <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x32);
 8000c96:	2032      	movs	r0, #50	; 0x32
 8000c98:	f7ff fef0 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        for(count = 0; count < 70; count++) {
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e008      	b.n	8000cb4 <EPD_2IN13_V2_Init+0x16c>
            EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_partial_update[count]);
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <EPD_2IN13_V2_Init+0x1d8>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff05 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        for(count = 0; count < 70; count++) {
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2b45      	cmp	r3, #69	; 0x45
 8000cb8:	d9f3      	bls.n	8000ca2 <EPD_2IN13_V2_Init+0x15a>
        EPD_2IN13_V2_SendCommand(0x37);
 8000cba:	2037      	movs	r0, #55	; 0x37
 8000cbc:	f7ff fede 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff fef9 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fef6 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fef3 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fef0 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x40);
 8000cd8:	2040      	movs	r0, #64	; 0x40
 8000cda:	f7ff feed 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff feea 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fee7 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x22);
 8000cea:	2022      	movs	r0, #34	; 0x22
 8000cec:	f7ff fec6 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xC0);
 8000cf0:	20c0      	movs	r0, #192	; 0xc0
 8000cf2:	f7ff fee1 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x20);
 8000cf6:	2020      	movs	r0, #32
 8000cf8:	f7ff fec0 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_ReadBusy();
 8000cfc:	f7ff fefa 	bl	8000af4 <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
 8000d00:	203c      	movs	r0, #60	; 0x3c
 8000d02:	f7ff febb 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x01);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fed6 	bl	8000ab8 <EPD_2IN13_V2_SendData>
}
 8000d0c:	e002      	b.n	8000d14 <EPD_2IN13_V2_Init+0x1cc>
        Debug("error, the Mode is EPD_2IN13_FULL or EPD_2IN13_PART");
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <EPD_2IN13_V2_Init+0x1dc>)
 8000d10:	f004 fd46 	bl	80057a0 <iprintf>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	08007d98 	.word	0x08007d98
 8000d20:	08007de4 	.word	0x08007de4
 8000d24:	08006d30 	.word	0x08006d30

08000d28 <EPD_2IN13_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN13_V2_Clear(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 8000d2e:	2310      	movs	r3, #16
 8000d30:	807b      	strh	r3, [r7, #2]
    Height = EPD_2IN13_V2_HEIGHT;
 8000d32:	23fa      	movs	r3, #250	; 0xfa
 8000d34:	803b      	strh	r3, [r7, #0]

    EPD_2IN13_V2_SendCommand(0x24);
 8000d36:	2024      	movs	r0, #36	; 0x24
 8000d38:	f7ff fea0 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	80fb      	strh	r3, [r7, #6]
 8000d40:	e00f      	b.n	8000d62 <EPD_2IN13_V2_Clear+0x3a>
        for (UWORD i = 0; i < Width; i++) {
 8000d42:	2300      	movs	r3, #0
 8000d44:	80bb      	strh	r3, [r7, #4]
 8000d46:	e005      	b.n	8000d54 <EPD_2IN13_V2_Clear+0x2c>
            EPD_2IN13_V2_SendData(0XFF);
 8000d48:	20ff      	movs	r0, #255	; 0xff
 8000d4a:	f7ff feb5 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000d4e:	88bb      	ldrh	r3, [r7, #4]
 8000d50:	3301      	adds	r3, #1
 8000d52:	80bb      	strh	r3, [r7, #4]
 8000d54:	88ba      	ldrh	r2, [r7, #4]
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3f5      	bcc.n	8000d48 <EPD_2IN13_V2_Clear+0x20>
    for (UWORD j = 0; j < Height; j++) {
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	80fb      	strh	r3, [r7, #6]
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	883b      	ldrh	r3, [r7, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3eb      	bcc.n	8000d42 <EPD_2IN13_V2_Clear+0x1a>
        }
    }

    EPD_2IN13_V2_TurnOnDisplay();
 8000d6a:	f7ff fedd 	bl	8000b28 <EPD_2IN13_V2_TurnOnDisplay>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <EPD_2IN13_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN13_V2_Display(UBYTE *Image)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 8000d7e:	2310      	movs	r3, #16
 8000d80:	817b      	strh	r3, [r7, #10]
    Height = EPD_2IN13_V2_HEIGHT;
 8000d82:	23fa      	movs	r3, #250	; 0xfa
 8000d84:	813b      	strh	r3, [r7, #8]

    EPD_2IN13_V2_SendCommand(0x24);
 8000d86:	2024      	movs	r0, #36	; 0x24
 8000d88:	f7ff fe78 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	81fb      	strh	r3, [r7, #14]
 8000d90:	e019      	b.n	8000dc6 <EPD_2IN13_V2_Display+0x50>
        for (UWORD i = 0; i < Width; i++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	81bb      	strh	r3, [r7, #12]
 8000d96:	e00f      	b.n	8000db8 <EPD_2IN13_V2_Display+0x42>
            EPD_2IN13_V2_SendData(Image[i + j * Width]);
 8000d98:	89ba      	ldrh	r2, [r7, #12]
 8000d9a:	89fb      	ldrh	r3, [r7, #14]
 8000d9c:	8979      	ldrh	r1, [r7, #10]
 8000d9e:	fb01 f303 	mul.w	r3, r1, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fe83 	bl	8000ab8 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000db2:	89bb      	ldrh	r3, [r7, #12]
 8000db4:	3301      	adds	r3, #1
 8000db6:	81bb      	strh	r3, [r7, #12]
 8000db8:	89ba      	ldrh	r2, [r7, #12]
 8000dba:	897b      	ldrh	r3, [r7, #10]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d3eb      	bcc.n	8000d98 <EPD_2IN13_V2_Display+0x22>
    for (UWORD j = 0; j < Height; j++) {
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	81fb      	strh	r3, [r7, #14]
 8000dc6:	89fa      	ldrh	r2, [r7, #14]
 8000dc8:	893b      	ldrh	r3, [r7, #8]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d3e1      	bcc.n	8000d92 <EPD_2IN13_V2_Display+0x1c>
        }
    }
    EPD_2IN13_V2_TurnOnDisplay();
 8000dce:	f7ff feab 	bl	8000b28 <EPD_2IN13_V2_TurnOnDisplay>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <EPD_2IN13_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN13_V2_Sleep(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
    EPD_2IN13_V2_SendCommand(0x22); //POWER OFF
 8000dde:	2022      	movs	r0, #34	; 0x22
 8000de0:	f7ff fe4c 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0xC3);
 8000de4:	20c3      	movs	r0, #195	; 0xc3
 8000de6:	f7ff fe67 	bl	8000ab8 <EPD_2IN13_V2_SendData>
    EPD_2IN13_V2_SendCommand(0x20);
 8000dea:	2020      	movs	r0, #32
 8000dec:	f7ff fe46 	bl	8000a7c <EPD_2IN13_V2_SendCommand>

    EPD_2IN13_V2_SendCommand(0x10); //enter deep sleep
 8000df0:	2010      	movs	r0, #16
 8000df2:	f7ff fe43 	bl	8000a7c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0x01);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fe5e 	bl	8000ab8 <EPD_2IN13_V2_SendData>
    DEV_Delay_ms(100);
 8000dfc:	2064      	movs	r0, #100	; 0x64
 8000dfe:	f000 feef 	bl	8001be0 <HAL_Delay>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b0cd      	sub	sp, #308	; 0x134
 8000e0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f000 fe6b 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f9f9 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 fb73 	bl	8001500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e1a:	f000 fb41 	bl	80014a0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000e1e:	f000 fb01 	bl	8001424 <MX_SPI2_Init>
  MX_RTC_Init();
 8000e22:	f000 fa6f 	bl	8001304 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //EPD_2in13_V2_test();
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); //Wait with alarm until display is ready
 8000e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2a:	48d3      	ldr	r0, [pc, #844]	; (8001178 <main+0x370>)
 8000e2c:	f003 f8b8 	bl	8003fa0 <HAL_RTC_DeactivateAlarm>
  Init_GUI();
 8000e30:	f7ff fc6c 	bl	800070c <Init_GUI>
  Time_Init();
 8000e34:	f7ff fbc4 	bl	80005c0 <Time_Init>
  //EPD_2in13_V2_test();

  DCF77_Init();
 8000e38:	f7ff fb9e 	bl	8000578 <DCF77_Init>

  //EPD_2in13_V2_test();


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2120      	movs	r1, #32
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f001 fa04 	bl	8002250 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000e48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e4c:	f000 fec8 	bl	8001be0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2120      	movs	r1, #32
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f001 f9fa 	bl	8002250 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000e5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e60:	f000 febe 	bl	8001be0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2120      	movs	r1, #32
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f001 f9f0 	bl	8002250 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000e70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e74:	f000 feb4 	bl	8001be0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e80:	f001 f9e6 	bl	8002250 <HAL_GPIO_WritePin>
		  GUI_DrawDate(1);
	  }
	  */

	  //Show DCF77 signal here lel
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, HAL_GPIO_ReadPin(DCF77_DATA_GPIO_Port, DCF77_DATA_Pin));
 8000e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e88:	48bc      	ldr	r0, [pc, #752]	; (800117c <main+0x374>)
 8000e8a:	f001 f9c9 	bl	8002220 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	2120      	movs	r1, #32
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f001 f9da 	bl	8002250 <HAL_GPIO_WritePin>

	  dcf_new = HAL_GPIO_ReadPin(DCF77_DATA_GPIO_Port, DCF77_DATA_Pin);
 8000e9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea0:	48b6      	ldr	r0, [pc, #728]	; (800117c <main+0x374>)
 8000ea2:	f001 f9bd 	bl	8002220 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	  if(dcf_new != dcf_old){
 8000eac:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000eb0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f000 819c 	beq.w	80011f2 <main+0x3ea>
		  tick_new = HAL_GetTick();
 8000eba:	f000 fe85 	bl	8001bc8 <HAL_GetTick>
 8000ebe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		  uint32_t tick_delta = tick_new - tick_old;
 8000ec2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000ec6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		  tick_old = tick_new;
 8000ed0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000ed4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		  //edge detected
		  if(dcf_new == 1){ //rising edge
 8000ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	f040 8129 	bne.w	8001134 <main+0x32c>
			  char text_re[30];
			  sprintf(&text_re, "Rising edge after %dms\n", tick_delta);
 8000ee2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000ee6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000eea:	49a5      	ldr	r1, [pc, #660]	; (8001180 <main+0x378>)
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fcf5 	bl	80058dc <siprintf>
			  //HAL_UART_Transmit(&huart2, &text_re, strlen(text_re), 10);

			  if(tick_delta > 1500){
 8000ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ef6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000efa:	4293      	cmp	r3, r2
 8000efc:	f240 8179 	bls.w	80011f2 <main+0x3ea>
				  //new minute has started, there was a missing pulse
				  char text_newminute[30];
				  sprintf(&text_newminute, "NEW MINUTE STARTED (?) %dms\n", tick_delta);
 8000f00:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f04:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000f08:	499e      	ldr	r1, [pc, #632]	; (8001184 <main+0x37c>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 fce6 	bl	80058dc <siprintf>
				  HAL_UART_Transmit(&huart2, &text_newminute, strlen(text_newminute), 10);
 8000f10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f95b 	bl	80001d0 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000f22:	230a      	movs	r3, #10
 8000f24:	4898      	ldr	r0, [pc, #608]	; (8001188 <main+0x380>)
 8000f26:	f003 fed1 	bl	8004ccc <HAL_UART_Transmit>
				  index = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f



				  //PRINT TIME UNTIL NOW...
				  uint8_t minute =    dcf_values[21]*1 +
 8000f30:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
									  dcf_values[22]*2 +
									  dcf_values[23]*4 +
									  dcf_values[24]*8 +
									  dcf_values[25]*10 +
									  dcf_values[26]*20 +
 8000f34:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
									  dcf_values[25]*10 +
 8000f38:	4619      	mov	r1, r3
 8000f3a:	0089      	lsls	r1, r1, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	b2d9      	uxtb	r1, r3
									  dcf_values[27]*40;
 8000f42:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
									  dcf_values[26]*20 +
 8000f46:	4618      	mov	r0, r3
 8000f48:	0080      	lsls	r0, r0, #2
 8000f4a:	4403      	add	r3, r0
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	440b      	add	r3, r1
 8000f52:	b2d9      	uxtb	r1, r3
									  dcf_values[23]*4 +
 8000f54:	f897 00df 	ldrb.w	r0, [r7, #223]	; 0xdf
									  dcf_values[24]*8 +
 8000f58:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
									  dcf_values[23]*4 +
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4403      	add	r3, r0
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	b2d8      	uxtb	r0, r3
									  dcf_values[25]*10 +
 8000f68:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
									  dcf_values[24]*8 +
 8000f6c:	461c      	mov	r4, r3
 8000f6e:	00a4      	lsls	r4, r4, #2
 8000f70:	4423      	add	r3, r4
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4403      	add	r3, r0
 8000f76:	b2d8      	uxtb	r0, r3
									  dcf_values[22]*2 +
 8000f78:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
									  dcf_values[24]*8 +
 8000f7c:	4403      	add	r3, r0
 8000f7e:	b2db      	uxtb	r3, r3
									  dcf_values[26]*20 +
 8000f80:	440b      	add	r3, r1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
				  uint8_t minute =    dcf_values[21]*1 +
 8000f88:	4413      	add	r3, r2
 8000f8a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

				  uint8_t hour =   	  dcf_values[29]*1 +
 8000f8e:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
									  dcf_values[30]*2 +
									  dcf_values[31]*4 +
									  dcf_values[32]*8 +
									  dcf_values[33]*10 +
									  dcf_values[34]*20;
 8000f92:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
									  dcf_values[33]*10 +
 8000f96:	4619      	mov	r1, r3
 8000f98:	0089      	lsls	r1, r1, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	b2d9      	uxtb	r1, r3
									  dcf_values[31]*4 +
 8000fa0:	f897 00e7 	ldrb.w	r0, [r7, #231]	; 0xe7
									  dcf_values[32]*8 +
 8000fa4:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
									  dcf_values[31]*4 +
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4403      	add	r3, r0
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b2d8      	uxtb	r0, r3
									  dcf_values[33]*10 +
 8000fb4:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
									  dcf_values[32]*8 +
 8000fb8:	461c      	mov	r4, r3
 8000fba:	00a4      	lsls	r4, r4, #2
 8000fbc:	4423      	add	r3, r4
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4403      	add	r3, r0
 8000fc2:	b2d8      	uxtb	r0, r3
									  dcf_values[30]*2 +
 8000fc4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
									  dcf_values[32]*8 +
 8000fc8:	4403      	add	r3, r0
 8000fca:	b2db      	uxtb	r3, r3
									  dcf_values[33]*10 +
 8000fcc:	440b      	add	r3, r1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
				  uint8_t hour =   	  dcf_values[29]*1 +
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

				  uint8_t day =  	  dcf_values[36]*1 +
 8000fda:	f897 20ec 	ldrb.w	r2, [r7, #236]	; 0xec
									  dcf_values[37]*2 +
									  dcf_values[38]*4 +
									  dcf_values[39]*8 +
									  dcf_values[40]*10 +
									  dcf_values[41]*20;
 8000fde:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
									  dcf_values[40]*10 +
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	0089      	lsls	r1, r1, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	b2d9      	uxtb	r1, r3
									  dcf_values[38]*4 +
 8000fec:	f897 00ee 	ldrb.w	r0, [r7, #238]	; 0xee
									  dcf_values[39]*8 +
 8000ff0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
									  dcf_values[38]*4 +
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4403      	add	r3, r0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b2d8      	uxtb	r0, r3
									  dcf_values[40]*10 +
 8001000:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
									  dcf_values[39]*8 +
 8001004:	461c      	mov	r4, r3
 8001006:	00a4      	lsls	r4, r4, #2
 8001008:	4423      	add	r3, r4
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4403      	add	r3, r0
 800100e:	b2d8      	uxtb	r0, r3
									  dcf_values[37]*2 +
 8001010:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
									  dcf_values[39]*8 +
 8001014:	4403      	add	r3, r0
 8001016:	b2db      	uxtb	r3, r3
									  dcf_values[40]*10 +
 8001018:	440b      	add	r3, r1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
				  uint8_t day =  	  dcf_values[36]*1 +
 8001020:	4413      	add	r3, r2
 8001022:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

				  uint8_t day_of_week = dcf_values[42]*1 +
 8001026:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
									  dcf_values[43]*2 +
									  dcf_values[44]*4;
 800102a:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
									  dcf_values[43]*2 +
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	b2d9      	uxtb	r1, r3
 8001032:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8001036:	440b      	add	r3, r1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
				  uint8_t day_of_week = dcf_values[42]*1 +
 800103e:	4413      	add	r3, r2
 8001040:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108

				  uint8_t month =  	  dcf_values[45]*1 +
 8001044:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
									  dcf_values[46]*2 +
									  dcf_values[47]*4 +
 8001048:	f897 10f7 	ldrb.w	r1, [r7, #247]	; 0xf7
									  dcf_values[48]*8 +
 800104c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
									  dcf_values[47]*4 +
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	440b      	add	r3, r1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	b2d9      	uxtb	r1, r3
									  dcf_values[49]*10;
 800105c:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
									  dcf_values[48]*8 +
 8001060:	4618      	mov	r0, r3
 8001062:	0080      	lsls	r0, r0, #2
 8001064:	4403      	add	r3, r0
 8001066:	b2db      	uxtb	r3, r3
 8001068:	440b      	add	r3, r1
 800106a:	b2d9      	uxtb	r1, r3
									  dcf_values[46]*2 +
 800106c:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
									  dcf_values[48]*8 +
 8001070:	440b      	add	r3, r1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
				  uint8_t month =  	  dcf_values[45]*1 +
 8001078:	4413      	add	r3, r2
 800107a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

				  uint8_t year =  	  dcf_values[50]*1 +
 800107e:	f897 20fa 	ldrb.w	r2, [r7, #250]	; 0xfa
									  dcf_values[52]*4 +
									  dcf_values[53]*8 +
									  dcf_values[54]*10 +
									  dcf_values[55]*20 +
									  dcf_values[56]*40 +
									  dcf_values[57]*80;
 8001082:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
									  dcf_values[56]*40 +
 8001086:	4619      	mov	r1, r3
 8001088:	0089      	lsls	r1, r1, #2
 800108a:	440b      	add	r3, r1
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	b2d9      	uxtb	r1, r3
									  dcf_values[55]*20 +
 8001090:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
									  dcf_values[54]*10 +
 8001094:	4618      	mov	r0, r3
 8001096:	0080      	lsls	r0, r0, #2
 8001098:	4403      	add	r3, r0
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	b2d8      	uxtb	r0, r3
									  dcf_values[56]*40 +
 800109e:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
									  dcf_values[55]*20 +
 80010a2:	461c      	mov	r4, r3
 80010a4:	00a4      	lsls	r4, r4, #2
 80010a6:	4423      	add	r3, r4
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4403      	add	r3, r0
 80010ae:	b2d8      	uxtb	r0, r3
									  dcf_values[52]*4 +
 80010b0:	f897 40fc 	ldrb.w	r4, [r7, #252]	; 0xfc
									  dcf_values[53]*8 +
 80010b4:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
									  dcf_values[52]*4 +
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	4423      	add	r3, r4
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	b2dc      	uxtb	r4, r3
									  dcf_values[54]*10 +
 80010c4:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
									  dcf_values[53]*8 +
 80010c8:	461d      	mov	r5, r3
 80010ca:	00ad      	lsls	r5, r5, #2
 80010cc:	442b      	add	r3, r5
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4423      	add	r3, r4
 80010d2:	b2dc      	uxtb	r4, r3
									  dcf_values[51]*2 +
 80010d4:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
									  dcf_values[53]*8 +
 80010d8:	4423      	add	r3, r4
 80010da:	b2db      	uxtb	r3, r3
									  dcf_values[55]*20 +
 80010dc:	4403      	add	r3, r0
 80010de:	b2db      	uxtb	r3, r3
									  dcf_values[56]*40 +
 80010e0:	440b      	add	r3, r1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
				  uint8_t year =  	  dcf_values[50]*1 +
 80010e8:	4413      	add	r3, r2
 80010ea:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

				  char datetimetext[100];
				  sprintf(&datetimetext, "%d.%d.%d (%d) %d:%d\n\n",
 80010ee:	f897 5106 	ldrb.w	r5, [r7, #262]	; 0x106
 80010f2:	f897 6107 	ldrb.w	r6, [r7, #263]	; 0x107
 80010f6:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80010fa:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 80010fe:	f897 110a 	ldrb.w	r1, [r7, #266]	; 0x10a
 8001102:	f897 010b 	ldrb.w	r0, [r7, #267]	; 0x10b
 8001106:	1d3c      	adds	r4, r7, #4
 8001108:	9003      	str	r0, [sp, #12]
 800110a:	9102      	str	r1, [sp, #8]
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4633      	mov	r3, r6
 8001112:	462a      	mov	r2, r5
 8001114:	491d      	ldr	r1, [pc, #116]	; (800118c <main+0x384>)
 8001116:	4620      	mov	r0, r4
 8001118:	f004 fbe0 	bl	80058dc <siprintf>
						  year, month, day, day_of_week, hour, minute
				  );
				  HAL_UART_Transmit(&huart2, &datetimetext, strlen(datetimetext), 30);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f856 	bl	80001d0 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	1d39      	adds	r1, r7, #4
 800112a:	231e      	movs	r3, #30
 800112c:	4816      	ldr	r0, [pc, #88]	; (8001188 <main+0x380>)
 800112e:	f003 fdcd 	bl	8004ccc <HAL_UART_Transmit>
 8001132:	e05e      	b.n	80011f2 <main+0x3ea>


		  }else{ //falling edge
			  char text_fe[30];
			  //sprintf(&text_fe, "Falling edge after %dms\n", tick_delta);
			  HAL_UART_Transmit(&huart2, &text_fe, strlen(text_fe), 10);
 8001134:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f849 	bl	80001d0 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	b29a      	uxth	r2, r3
 8001142:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001146:	230a      	movs	r3, #10
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <main+0x380>)
 800114a:	f003 fdbf 	bl	8004ccc <HAL_UART_Transmit>


			  if(tick_delta < 150){ //short pulse -> 0
 800114e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001152:	2b95      	cmp	r3, #149	; 0x95
 8001154:	d81e      	bhi.n	8001194 <main+0x38c>
				  dcf_values[index] = 0;
 8001156:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800115a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800115e:	4413      	add	r3, r2
 8001160:	2200      	movs	r2, #0
 8001162:	f803 2c58 	strb.w	r2, [r3, #-88]
				  sprintf(&text_fe, "Index %d, 0\n", index);
 8001166:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 800116a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <main+0x388>)
 8001170:	4618      	mov	r0, r3
 8001172:	f004 fbb3 	bl	80058dc <siprintf>
 8001176:	e037      	b.n	80011e8 <main+0x3e0>
 8001178:	20000164 	.word	0x20000164
 800117c:	48000800 	.word	0x48000800
 8001180:	08006d6c 	.word	0x08006d6c
 8001184:	08006d84 	.word	0x08006d84
 8001188:	20000188 	.word	0x20000188
 800118c:	08006da4 	.word	0x08006da4
 8001190:	08006dbc 	.word	0x08006dbc
				  //HAL_UART_Transmit(&huart2, &text_fe, strlen(text_fe), 10);
			  }else if(tick_delta < 250){ //long pulse -> 1
 8001194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001198:	2bf9      	cmp	r3, #249	; 0xf9
 800119a:	d810      	bhi.n	80011be <main+0x3b6>
				  dcf_values[index] = 1;
 800119c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80011a0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80011a4:	4413      	add	r3, r2
 80011a6:	2201      	movs	r2, #1
 80011a8:	f803 2c58 	strb.w	r2, [r3, #-88]
				  sprintf(&text_fe, "Index %d, 1\n", index);
 80011ac:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80011b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011b4:	4911      	ldr	r1, [pc, #68]	; (80011fc <main+0x3f4>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fb90 	bl	80058dc <siprintf>
 80011bc:	e014      	b.n	80011e8 <main+0x3e0>
				  //HAL_UART_Transmit(&huart2, &text_fe, strlen(text_fe), 10);
			  }else{
				  sprintf(&text_fe, "ERROR! TOO LONG HIGH %d\n", index);
 80011be:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80011c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011c6:	490e      	ldr	r1, [pc, #56]	; (8001200 <main+0x3f8>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 fb87 	bl	80058dc <siprintf>
				  HAL_UART_Transmit(&huart2, &text_fe, strlen(text_fe), 10);
 80011ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7fe fffc 	bl	80001d0 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80011e0:	230a      	movs	r3, #10
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <main+0x3fc>)
 80011e4:	f003 fd72 	bl	8004ccc <HAL_UART_Transmit>
			  }
			  index++;
 80011e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80011ec:	3301      	adds	r3, #1
 80011ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		  }

	  }
	  dcf_old = dcf_new;
 80011f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80011f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, HAL_GPIO_ReadPin(DCF77_DATA_GPIO_Port, DCF77_DATA_Pin));
 80011fa:	e643      	b.n	8000e84 <main+0x7c>
 80011fc:	08006dcc 	.word	0x08006dcc
 8001200:	08006ddc 	.word	0x08006ddc
 8001204:	20000188 	.word	0x20000188

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b8      	sub	sp, #224	; 0xe0
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001212:	2244      	movs	r2, #68	; 0x44
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fa10 	bl	800563c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2288      	movs	r2, #136	; 0x88
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f004 fa02 	bl	800563c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001238:	230a      	movs	r3, #10
 800123a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001246:	2310      	movs	r3, #16
 8001248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001264:	230a      	movs	r3, #10
 8001266:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800126a:	2307      	movs	r3, #7
 800126c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001280:	4618      	mov	r0, r3
 8001282:	f001 f861 	bl	8002348 <HAL_RCC_OscConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800128c:	f000 f9f6 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001290:	230f      	movs	r3, #15
 8001292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012b2:	2104      	movs	r1, #4
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fc2d 	bl	8002b14 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80012c0:	f000 f9dc 	bl	800167c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 80012c4:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 80012c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fe21 	bl	8002f20 <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80012e4:	f000 f9ca 	bl	800167c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ec:	f000 ffd6 	bl	800229c <HAL_PWREx_ControlVoltageScaling>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80012f6:	f000 f9c1 	bl	800167c <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	37e0      	adds	r7, #224	; 0xe0
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b092      	sub	sp, #72	; 0x48
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800130a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	222c      	movs	r2, #44	; 0x2c
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f004 f989 	bl	800563c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <MX_RTC_Init+0x118>)
 800132c:	4a3c      	ldr	r2, [pc, #240]	; (8001420 <MX_RTC_Init+0x11c>)
 800132e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001330:	4b3a      	ldr	r3, [pc, #232]	; (800141c <MX_RTC_Init+0x118>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <MX_RTC_Init+0x118>)
 8001338:	227f      	movs	r2, #127	; 0x7f
 800133a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <MX_RTC_Init+0x118>)
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <MX_RTC_Init+0x118>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <MX_RTC_Init+0x118>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <MX_RTC_Init+0x118>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <MX_RTC_Init+0x118>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800135a:	4830      	ldr	r0, [pc, #192]	; (800141c <MX_RTC_Init+0x118>)
 800135c:	f002 fa9c 	bl	8003898 <HAL_RTC_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001366:	f000 f989 	bl	800167c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800137c:	2300      	movs	r3, #0
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001384:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	4823      	ldr	r0, [pc, #140]	; (800141c <MX_RTC_Init+0x118>)
 800138e:	f002 fafe 	bl	800398e <HAL_RTC_SetTime>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001398:	f000 f970 	bl	800167c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800139c:	2306      	movs	r3, #6
 800139e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_APRIL;
 80013a2:	2304      	movs	r3, #4
 80013a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 3;
 80013a8:	2303      	movs	r3, #3
 80013aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 21;
 80013ae:	2315      	movs	r3, #21
 80013b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80013b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <MX_RTC_Init+0x118>)
 80013be:	f002 fbdf 	bl	8003b80 <HAL_RTC_SetDate>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80013c8:	f000 f958 	bl	800167c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 3;
 80013d4:	2303      	movs	r3, #3
 80013d6:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80013e4:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 80013e8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_RTC_Init+0x118>)
 8001406:	f002 fc8f 	bl	8003d28 <HAL_RTC_SetAlarm_IT>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8001410:	f000 f934 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3748      	adds	r7, #72	; 0x48
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000164 	.word	0x20000164
 8001420:	40002800 	.word	0x40002800

08001424 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_SPI2_Init+0x74>)
 800142a:	4a1c      	ldr	r2, [pc, #112]	; (800149c <MX_SPI2_Init+0x78>)
 800142c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_SPI2_Init+0x74>)
 8001430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001434:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_SPI2_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_SPI2_Init+0x74>)
 800143e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001442:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_SPI2_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_SPI2_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_SPI2_Init+0x74>)
 8001452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001456:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_SPI2_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_SPI2_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_SPI2_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_SPI2_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_SPI2_Init+0x74>)
 8001472:	2207      	movs	r2, #7
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_SPI2_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_SPI2_Init+0x74>)
 800147e:	2208      	movs	r2, #8
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_SPI2_Init+0x74>)
 8001484:	f002 ff42 	bl	800430c <HAL_SPI_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800148e:	f000 f8f5 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000100 	.word	0x20000100
 800149c:	40003800 	.word	0x40003800

080014a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014a6:	4a15      	ldr	r2, [pc, #84]	; (80014fc <MX_USART2_UART_Init+0x5c>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART2_UART_Init+0x58>)
 80014e4:	f003 fba4 	bl	8004c30 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ee:	f000 f8c5 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000188 	.word	0x20000188
 80014fc:	40004400 	.word	0x40004400

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b55      	ldr	r3, [pc, #340]	; (800166c <MX_GPIO_Init+0x16c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a54      	ldr	r2, [pc, #336]	; (800166c <MX_GPIO_Init+0x16c>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <MX_GPIO_Init+0x16c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <MX_GPIO_Init+0x16c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a4e      	ldr	r2, [pc, #312]	; (800166c <MX_GPIO_Init+0x16c>)
 8001534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b4c      	ldr	r3, [pc, #304]	; (800166c <MX_GPIO_Init+0x16c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <MX_GPIO_Init+0x16c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a48      	ldr	r2, [pc, #288]	; (800166c <MX_GPIO_Init+0x16c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <MX_GPIO_Init+0x16c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b43      	ldr	r3, [pc, #268]	; (800166c <MX_GPIO_Init+0x16c>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a42      	ldr	r2, [pc, #264]	; (800166c <MX_GPIO_Init+0x16c>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <MX_GPIO_Init+0x16c>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EINK_DC_Pin|EINK_CS_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2103      	movs	r1, #3
 800157a:	483d      	ldr	r0, [pc, #244]	; (8001670 <MX_GPIO_Init+0x170>)
 800157c:	f000 fe68 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2120      	movs	r1, #32
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f000 fe62 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EINK_RST_GPIO_Port, EINK_RST_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2101      	movs	r1, #1
 8001590:	4838      	ldr	r0, [pc, #224]	; (8001674 <MX_GPIO_Init+0x174>)
 8001592:	f000 fe5d 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCF77_EN_GPIO_Port, DCF77_EN_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159c:	4834      	ldr	r0, [pc, #208]	; (8001670 <MX_GPIO_Init+0x170>)
 800159e:	f000 fe57 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <MX_GPIO_Init+0x178>)
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	482e      	ldr	r0, [pc, #184]	; (8001670 <MX_GPIO_Init+0x170>)
 80015b8:	f000 fc88 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : EINK_DC_Pin EINK_CS_Pin */
  GPIO_InitStruct.Pin = EINK_DC_Pin|EINK_CS_Pin;
 80015bc:	2303      	movs	r3, #3
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4827      	ldr	r0, [pc, #156]	; (8001670 <MX_GPIO_Init+0x170>)
 80015d4:	f000 fc7a 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : EINK_BSY_Pin */
  GPIO_InitStruct.Pin = EINK_BSY_Pin;
 80015d8:	2310      	movs	r3, #16
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EINK_BSY_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f000 fc6d 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015f2:	2320      	movs	r3, #32
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160c:	f000 fc5e 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : EINK_RST_Pin */
  GPIO_InitStruct.Pin = EINK_RST_Pin;
 8001610:	2301      	movs	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EINK_RST_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4813      	ldr	r0, [pc, #76]	; (8001674 <MX_GPIO_Init+0x174>)
 8001628:	f000 fc50 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCF77_EN_Pin */
  GPIO_InitStruct.Pin = DCF77_EN_Pin;
 800162c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001636:	2301      	movs	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCF77_EN_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480a      	ldr	r0, [pc, #40]	; (8001670 <MX_GPIO_Init+0x170>)
 8001646:	f000 fc41 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCF77_DATA_Pin */
  GPIO_InitStruct.Pin = DCF77_DATA_Pin;
 800164a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCF77_DATA_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_GPIO_Init+0x170>)
 8001660:	f000 fc34 	bl	8001ecc <HAL_GPIO_Init>

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	48000800 	.word	0x48000800
 8001674:	48000400 	.word	0x48000400
 8001678:	10210000 	.word	0x10210000

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x44>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x44>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6613      	str	r3, [r2, #96]	; 0x60
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x44>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x44>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_RTC_MspInit+0x3c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10f      	bne.n	8001702 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RTC_MspInit+0x40>)
 80016e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_RTC_MspInit+0x40>)
 80016ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2029      	movs	r0, #41	; 0x29
 80016f8:	f000 fb71 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016fc:	2029      	movs	r0, #41	; 0x29
 80016fe:	f000 fb8a 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40002800 	.word	0x40002800
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d14c      	bne.n	80017d0 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6593      	str	r3, [r2, #88]	; 0x58
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800177e:	230c      	movs	r3, #12
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800178e:	2305      	movs	r3, #5
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4811      	ldr	r0, [pc, #68]	; (80017e0 <HAL_SPI_MspInit+0xcc>)
 800179a:	f000 fb97 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b0:	2305      	movs	r3, #5
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <HAL_SPI_MspInit+0xd0>)
 80017bc:	f000 fb86 	bl	8001ecc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2024      	movs	r0, #36	; 0x24
 80017c6:	f000 fb0a 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80017ca:	2024      	movs	r0, #36	; 0x24
 80017cc:	f000 fb23 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40003800 	.word	0x40003800
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000800 	.word	0x48000800
 80017e4:	48000400 	.word	0x48000400

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x7c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d128      	bne.n	800185c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_UART_MspInit+0x80>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800183a:	230c      	movs	r3, #12
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800184a:	2307      	movs	r3, #7
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f000 fb38 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40004400 	.word	0x40004400
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f972 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <SPI2_IRQHandler+0x10>)
 80018c6:	f002 ff33 	bl	8004730 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000100 	.word	0x20000100

080018d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <RTC_Alarm_IRQHandler+0x10>)
 80018da:	f002 fbf5 	bl	80040c8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000164 	.word	0x20000164

080018e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e00a      	b.n	8001910 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018fa:	f3af 8000 	nop.w
 80018fe:	4601      	mov	r1, r0
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	b2ca      	uxtb	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbf0      	blt.n	80018fa <_read+0x12>
	}

return len;
 8001918:	687b      	ldr	r3, [r7, #4]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e009      	b.n	8001948 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	dbf1      	blt.n	8001934 <_write+0x12>
	}
	return len;
 8001950:	687b      	ldr	r3, [r7, #4]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_close>:

int _close(int file)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	return -1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001982:	605a      	str	r2, [r3, #4]
	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_isatty>:

int _isatty(int file)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	return 1;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f003 fdf0 	bl	80055d8 <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <_sbrk+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20018000 	.word	0x20018000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	20000094 	.word	0x20000094
 8001a2c:	20000220 	.word	0x20000220

08001a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <SystemInit+0x5c>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <SystemInit+0x5c>)
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <SystemInit+0x60>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <SystemInit+0x60>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <SystemInit+0x60>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <SystemInit+0x60>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <SystemInit+0x60>)
 8001a5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <SystemInit+0x60>)
 8001a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <SystemInit+0x60>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <SystemInit+0x60>)
 8001a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SystemInit+0x60>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	40021000 	.word	0x40021000

08001a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a98:	f7ff ffca 	bl	8001a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a9e:	e003      	b.n	8001aa8 <LoopCopyDataInit>

08001aa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001aa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001aa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001aa6:	3104      	adds	r1, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001aa8:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001aac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001aae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ab0:	d3f6      	bcc.n	8001aa0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ab4:	e002      	b.n	8001abc <LoopFillZerobss>

08001ab6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ab6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ab8:	f842 3b04 	str.w	r3, [r2], #4

08001abc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <LoopForever+0x16>)
	cmp	r2, r3
 8001abe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ac0:	d3f9      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f003 fd8f 	bl	80055e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac6:	f7ff f99f 	bl	8000e08 <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001acc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ad0:	08007f20 	.word	0x08007f20
	ldr	r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ad8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001adc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001ae0:	20000220 	.word	0x20000220

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_Init+0x3c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_Init+0x3c>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afe:	2003      	movs	r0, #3
 8001b00:	f000 f962 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 f80f 	bl	8001b28 <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	e001      	b.n	8001b1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b16:	f7ff fdb7 	bl	8001688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40022000 	.word	0x40022000

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_InitTick+0x6c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d023      	beq.n	8001b84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_InitTick+0x70>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_InitTick+0x6c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f96d 	bl	8001e32 <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10f      	bne.n	8001b7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d809      	bhi.n	8001b78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f000 f937 	bl	8001dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_InitTick+0x74>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e007      	b.n	8001b88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e004      	b.n	8001b88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e001      	b.n	8001b88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000010 	.word	0x20000010
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	2000000c 	.word	0x2000000c

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000010 	.word	0x20000010
 8001bc4:	2000020c 	.word	0x2000020c

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000020c 	.word	0x2000020c

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffde 	bl	8001bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000010 	.word	0x20000010

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d94:	d301      	bcc.n	8001d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00f      	b.n	8001dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <SysTick_Config+0x40>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f7ff ff8e 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SysTick_Config+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <SysTick_Config+0x40>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff29 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff3e 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff8e 	bl	8001d1c <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5d 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff31 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffa2 	bl	8001d84 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d005      	beq.n	8001e6e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e029      	b.n	8001ec2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 020e 	bic.w	r2, r2, #14
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0201 	bic.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f003 021c 	and.w	r2, r3, #28
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
    }
  }
  return status;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e17f      	b.n	80021dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8171 	beq.w	80021d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d00b      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f08:	2b11      	cmp	r3, #17
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b12      	cmp	r3, #18
 8001f12:	d130      	bne.n	8001f76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 0201 	and.w	r2, r3, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d118      	bne.n	8001fb4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	f003 0201 	and.w	r2, r3, #1
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x128>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b12      	cmp	r3, #18
 8001ff2:	d123      	bne.n	800203c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	6939      	ldr	r1, [r7, #16]
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80ac 	beq.w	80021d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	4b5f      	ldr	r3, [pc, #380]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002082:	4a5e      	ldr	r2, [pc, #376]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6613      	str	r3, [r2, #96]	; 0x60
 800208a:	4b5c      	ldr	r3, [pc, #368]	; (80021fc <HAL_GPIO_Init+0x330>)
 800208c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002096:	4a5a      	ldr	r2, [pc, #360]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020c0:	d025      	beq.n	800210e <HAL_GPIO_Init+0x242>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <HAL_GPIO_Init+0x338>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x23e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4e      	ldr	r2, [pc, #312]	; (8002208 <HAL_GPIO_Init+0x33c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x23a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HAL_GPIO_Init+0x340>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x236>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4c      	ldr	r2, [pc, #304]	; (8002210 <HAL_GPIO_Init+0x344>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x232>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4b      	ldr	r2, [pc, #300]	; (8002214 <HAL_GPIO_Init+0x348>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x22e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4a      	ldr	r2, [pc, #296]	; (8002218 <HAL_GPIO_Init+0x34c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x22a>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x244>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x244>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x244>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x244>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x244>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x244>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x244>
 800210e:	2300      	movs	r3, #0
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002120:	4937      	ldr	r1, [pc, #220]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_GPIO_Init+0x350>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002152:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_GPIO_Init+0x350>)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_GPIO_Init+0x350>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800217c:	4a27      	ldr	r2, [pc, #156]	; (800221c <HAL_GPIO_Init+0x350>)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_GPIO_Init+0x350>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a6:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_GPIO_Init+0x350>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_GPIO_Init+0x350>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_GPIO_Init+0x350>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f47f ae78 	bne.w	8001edc <HAL_GPIO_Init+0x10>
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000
 8002204:	48000400 	.word	0x48000400
 8002208:	48000800 	.word	0x48000800
 800220c:	48000c00 	.word	0x48000c00
 8002210:	48001000 	.word	0x48001000
 8002214:	48001400 	.word	0x48001400
 8002218:	48001800 	.word	0x48001800
 800221c:	40010400 	.word	0x40010400

08002220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e001      	b.n	8002242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800226c:	e002      	b.n	8002274 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_PWREx_GetVoltageRange+0x18>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40007000 	.word	0x40007000

0800229c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022aa:	d130      	bne.n	800230e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b8:	d038      	beq.n	800232c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2232      	movs	r2, #50	; 0x32
 80022d0:	fb02 f303 	mul.w	r3, r2, r3
 80022d4:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0c9b      	lsrs	r3, r3, #18
 80022dc:	3301      	adds	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e0:	e002      	b.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f4:	d102      	bne.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f2      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	d110      	bne.n	800232c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e00f      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d007      	beq.n	800232c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40007000 	.word	0x40007000
 8002340:	20000008 	.word	0x20000008
 8002344:	431bde83 	.word	0x431bde83

08002348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e3d4      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235a:	4ba1      	ldr	r3, [pc, #644]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002364:	4b9e      	ldr	r3, [pc, #632]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80e4 	beq.w	8002544 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_RCC_OscConfig+0x4a>
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b0c      	cmp	r3, #12
 8002386:	f040 808b 	bne.w	80024a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b01      	cmp	r3, #1
 800238e:	f040 8087 	bne.w	80024a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002392:	4b93      	ldr	r3, [pc, #588]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x62>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e3ac      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	4b8c      	ldr	r3, [pc, #560]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <HAL_RCC_OscConfig+0x7c>
 80023ba:	4b89      	ldr	r3, [pc, #548]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c2:	e005      	b.n	80023d0 <HAL_RCC_OscConfig+0x88>
 80023c4:	4b86      	ldr	r3, [pc, #536]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d223      	bcs.n	800241c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fd41 	bl	8002e60 <RCC_SetFlashLatencyFromMSIRange>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e38d      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e8:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a7c      	ldr	r2, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b7a      	ldr	r3, [pc, #488]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4977      	ldr	r1, [pc, #476]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002406:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	4972      	ldr	r1, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
 800241a:	e025      	b.n	8002468 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241c:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6f      	ldr	r2, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	496a      	ldr	r1, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243a:	4b69      	ldr	r3, [pc, #420]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	4965      	ldr	r1, [pc, #404]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fd01 	bl	8002e60 <RCC_SetFlashLatencyFromMSIRange>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e34d      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002468:	f000 fc36 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b5c      	ldr	r3, [pc, #368]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	495a      	ldr	r1, [pc, #360]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_OscConfig+0x2a0>)
 8002486:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002488:	4b58      	ldr	r3, [pc, #352]	; (80025ec <HAL_RCC_OscConfig+0x2a4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fb4b 	bl	8001b28 <HAL_InitTick>
 8002492:	4603      	mov	r3, r0
 8002494:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d052      	beq.n	8002542 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	e331      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d032      	beq.n	800250e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4c      	ldr	r2, [pc, #304]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fb88 	bl	8001bc8 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024bc:	f7ff fb84 	bl	8001bc8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e31a      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ce:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a40      	ldr	r2, [pc, #256]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	493b      	ldr	r1, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f8:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	4936      	ldr	r1, [pc, #216]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e01a      	b.n	8002544 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800250e:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a33      	ldr	r2, [pc, #204]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800251a:	f7ff fb55 	bl	8001bc8 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002522:	f7ff fb51 	bl	8001bc8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e2e7      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x1da>
 8002540:	e000      	b.n	8002544 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002542:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d074      	beq.n	800263a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x21a>
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d10e      	bne.n	800257a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d10b      	bne.n	800257a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d064      	beq.n	8002638 <HAL_RCC_OscConfig+0x2f0>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d160      	bne.n	8002638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e2c4      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x24a>
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800258a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e01d      	b.n	80025ce <HAL_RCC_OscConfig+0x286>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259a:	d10c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x26e>
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e00b      	b.n	80025ce <HAL_RCC_OscConfig+0x286>
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01c      	beq.n	8002610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff faf7 	bl	8001bc8 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025dc:	e011      	b.n	8002602 <HAL_RCC_OscConfig+0x2ba>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08007e30 	.word	0x08007e30
 80025e8:	20000008 	.word	0x20000008
 80025ec:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff faea 	bl	8001bc8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e280      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002602:	4baf      	ldr	r3, [pc, #700]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2a8>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7ff fada 	bl	8001bc8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7ff fad6 	bl	8001bc8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e26c      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262a:	4ba5      	ldr	r3, [pc, #660]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x2d0>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d060      	beq.n	8002708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b04      	cmp	r3, #4
 800264a:	d005      	beq.n	8002658 <HAL_RCC_OscConfig+0x310>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d119      	bne.n	8002686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d116      	bne.n	8002686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002658:	4b99      	ldr	r3, [pc, #612]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_OscConfig+0x328>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e249      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b93      	ldr	r3, [pc, #588]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	4990      	ldr	r1, [pc, #576]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002684:	e040      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d023      	beq.n	80026d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268e:	4b8c      	ldr	r3, [pc, #560]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a8b      	ldr	r2, [pc, #556]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff fa95 	bl	8001bc8 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff fa91 	bl	8001bc8 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e227      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b7f      	ldr	r3, [pc, #508]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	497c      	ldr	r1, [pc, #496]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e018      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d6:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a79      	ldr	r2, [pc, #484]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7ff fa71 	bl	8001bc8 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7ff fa6d 	bl	8001bc8 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e203      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fc:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d03c      	beq.n	800278e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01c      	beq.n	8002756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271c:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	4a67      	ldr	r2, [pc, #412]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7ff fa4c 	bl	8001bc8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7ff fa48 	bl	8001bc8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e1de      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002746:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ef      	beq.n	8002734 <HAL_RCC_OscConfig+0x3ec>
 8002754:	e01b      	b.n	800278e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002756:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7ff fa2f 	bl	8001bc8 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276e:	f7ff fa2b 	bl	8001bc8 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1c1      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002780:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ef      	bne.n	800276e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80a6 	beq.w	80028e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ac:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	4a43      	ldr	r2, [pc, #268]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80027b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6593      	str	r3, [r2, #88]	; 0x58
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c8:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_RCC_OscConfig+0x57c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d118      	bne.n	8002806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x57c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_RCC_OscConfig+0x57c>)
 80027da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e0:	f7ff f9f2 	bl	8001bc8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e8:	f7ff f9ee 	bl	8001bc8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e184      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_RCC_OscConfig+0x57c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <HAL_RCC_OscConfig+0x4d8>
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800281e:	e024      	b.n	800286a <HAL_RCC_OscConfig+0x522>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d110      	bne.n	800284a <HAL_RCC_OscConfig+0x502>
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002848:	e00f      	b.n	800286a <HAL_RCC_OscConfig+0x522>
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002862:	f023 0304 	bic.w	r3, r3, #4
 8002866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7ff f9a9 	bl	8001bc8 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7ff f9a5 	bl	8001bc8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e139      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0ed      	beq.n	800287a <HAL_RCC_OscConfig+0x532>
 800289e:	e01a      	b.n	80028d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff f992 	bl	8001bc8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a6:	e00f      	b.n	80028c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7ff f98e 	bl	8001bc8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d906      	bls.n	80028c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e122      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c8:	4b90      	ldr	r3, [pc, #576]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1e8      	bne.n	80028a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4b8b      	ldr	r3, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4a8a      	ldr	r2, [pc, #552]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8108 	beq.w	8002b02 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	f040 80d0 	bne.w	8002a9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028fc:	4b83      	ldr	r3, [pc, #524]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0203 	and.w	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	429a      	cmp	r2, r3
 800290e:	d130      	bne.n	8002972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	3b01      	subs	r3, #1
 800291c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d127      	bne.n	8002972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d11f      	bne.n	8002972 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800293c:	2a07      	cmp	r2, #7
 800293e:	bf14      	ite	ne
 8002940:	2201      	movne	r2, #1
 8002942:	2200      	moveq	r2, #0
 8002944:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002946:	4293      	cmp	r3, r2
 8002948:	d113      	bne.n	8002972 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d109      	bne.n	8002972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d06e      	beq.n	8002a50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b0c      	cmp	r3, #12
 8002976:	d069      	beq.n	8002a4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002978:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002984:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b7      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002994:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5c      	ldr	r2, [pc, #368]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 800299a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a0:	f7ff f912 	bl	8001bc8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f90e 	bl	8001bc8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e0a4      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c6:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	4b51      	ldr	r3, [pc, #324]	; (8002b10 <HAL_RCC_OscConfig+0x7c8>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029d6:	3a01      	subs	r2, #1
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e0:	0212      	lsls	r2, r2, #8
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029e8:	0852      	lsrs	r2, r2, #1
 80029ea:	3a01      	subs	r2, #1
 80029ec:	0552      	lsls	r2, r2, #21
 80029ee:	4311      	orrs	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0652      	lsls	r2, r2, #25
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a00:	0912      	lsrs	r2, r2, #4
 8002a02:	0452      	lsls	r2, r2, #17
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4941      	ldr	r1, [pc, #260]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a3e      	ldr	r2, [pc, #248]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a18:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a3b      	ldr	r2, [pc, #236]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a24:	f7ff f8d0 	bl	8001bc8 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7ff f8cc 	bl	8001bc8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e062      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4a:	e05a      	b.n	8002b02 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e059      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a50:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d152      	bne.n	8002b02 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2a      	ldr	r2, [pc, #168]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a68:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a27      	ldr	r2, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a74:	f7ff f8a8 	bl	8001bc8 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7ff f8a4 	bl	8001bc8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e03a      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x734>
 8002a9a:	e032      	b.n	8002b02 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d02d      	beq.n	8002afe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002ac0:	f023 0303 	bic.w	r3, r3, #3
 8002ac4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002acc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7ff f877 	bl	8001bc8 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7ff f873 	bl	8001bc8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e009      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_OscConfig+0x7c4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x796>
 8002afc:	e001      	b.n	8002b02 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	f99d808c 	.word	0xf99d808c

08002b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0c8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	4961      	ldr	r1, [pc, #388]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b0      	b.n	8002cba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d04c      	beq.n	8002bfe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6c:	4b56      	ldr	r3, [pc, #344]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d121      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e09e      	b.n	8002cba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d115      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e092      	b.n	8002cba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e086      	b.n	8002cba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e07e      	b.n	8002cba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bbc:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 0203 	bic.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	493f      	ldr	r1, [pc, #252]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bce:	f7fe fffb 	bl	8001bc8 <HAL_GetTick>
 8002bd2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd6:	f7fe fff7 	bl	8001bc8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e066      	b.n	8002cba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 020c 	and.w	r2, r3, #12
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d1eb      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	492c      	ldr	r1, [pc, #176]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d210      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0207 	bic.w	r2, r3, #7
 8002c32:	4924      	ldr	r1, [pc, #144]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e036      	b.n	8002cba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4918      	ldr	r1, [pc, #96]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4910      	ldr	r1, [pc, #64]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c8a:	f000 f825 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	490c      	ldr	r1, [pc, #48]	; (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	5ccb      	ldrb	r3, [r1, r3]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ff3a 	bl	8001b28 <HAL_InitTick>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08007e30 	.word	0x08007e30
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	2000000c 	.word	0x2000000c

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf0:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x34>
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d121      	bne.n	8002d4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d11e      	bne.n	8002d4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d18:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	e005      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d34:	4a2b      	ldr	r2, [pc, #172]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10d      	bne.n	8002d60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d102      	bne.n	8002d56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e004      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_RCC_GetSysClockFreq+0x114>)
 8002d5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d134      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d66:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d003      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0xac>
 8002d7c:	e005      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d80:	617b      	str	r3, [r7, #20]
      break;
 8002d82:	e005      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_GetSysClockFreq+0x114>)
 8002d86:	617b      	str	r3, [r7, #20]
      break;
 8002d88:	e002      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	617b      	str	r3, [r7, #20]
      break;
 8002d8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	fb02 f203 	mul.w	r2, r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	0e5b      	lsrs	r3, r3, #25
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08007e48 	.word	0x08007e48
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	007a1200 	.word	0x007a1200

08002df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000008 	.word	0x20000008

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e0c:	f7ff fff0 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4904      	ldr	r1, [pc, #16]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08007e40 	.word	0x08007e40

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e38:	f7ff ffda 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0adb      	lsrs	r3, r3, #11
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4904      	ldr	r1, [pc, #16]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08007e40 	.word	0x08007e40

08002e60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e78:	f7ff fa02 	bl	8002280 <HAL_PWREx_GetVoltageRange>
 8002e7c:	6178      	str	r0, [r7, #20]
 8002e7e:	e014      	b.n	8002eaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8c:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e98:	f7ff f9f2 	bl	8002280 <HAL_PWREx_GetVoltageRange>
 8002e9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb0:	d10b      	bne.n	8002eca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b80      	cmp	r3, #128	; 0x80
 8002eb6:	d919      	bls.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2ba0      	cmp	r3, #160	; 0xa0
 8002ebc:	d902      	bls.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e013      	b.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	e010      	b.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d902      	bls.n	8002ed6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	e00a      	b.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d102      	bne.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002edc:	2302      	movs	r3, #2
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e004      	b.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d101      	bne.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ee8:	2301      	movs	r3, #1
 8002eea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 0207 	bic.w	r2, r3, #7
 8002ef4:	4909      	ldr	r1, [pc, #36]	; (8002f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002efc:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40022000 	.word	0x40022000

08002f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f28:	2300      	movs	r3, #0
 8002f2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d041      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f44:	d02a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f4a:	d824      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f56:	d81e      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f60:	d010      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f62:	e018      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f64:	4b86      	ldr	r3, [pc, #536]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a85      	ldr	r2, [pc, #532]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f70:	e015      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fabb 	bl	80034f4 <RCCEx_PLLSAI1_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f82:	e00c      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3320      	adds	r3, #32
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fba6 	bl	80036dc <RCCEx_PLLSAI2_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f94:	e003      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	74fb      	strb	r3, [r7, #19]
      break;
 8002f9a:	e000      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9e:	7cfb      	ldrb	r3, [r7, #19]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fa4:	4b76      	ldr	r3, [pc, #472]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb2:	4973      	ldr	r1, [pc, #460]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fba:	e001      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d041      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fd4:	d02a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fda:	d824      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fe0:	d008      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fe6:	d81e      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff0:	d010      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ff2:	e018      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ff4:	4b62      	ldr	r3, [pc, #392]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a61      	ldr	r2, [pc, #388]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003000:	e015      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3304      	adds	r3, #4
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fa73 	bl	80034f4 <RCCEx_PLLSAI1_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003012:	e00c      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3320      	adds	r3, #32
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fb5e 	bl	80036dc <RCCEx_PLLSAI2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003024:	e003      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	74fb      	strb	r3, [r7, #19]
      break;
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800302c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003034:	4b52      	ldr	r3, [pc, #328]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003042:	494f      	ldr	r1, [pc, #316]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800304a:	e001      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a0 	beq.w	800319e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003078:	4b41      	ldr	r3, [pc, #260]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	4a40      	ldr	r2, [pc, #256]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003082:	6593      	str	r3, [r2, #88]	; 0x58
 8003084:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003090:	2301      	movs	r3, #1
 8003092:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003094:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a0:	f7fe fd92 	bl	8001bc8 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030a6:	e009      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a8:	f7fe fd8e 	bl	8001bc8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ba:	e005      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030bc:	4b31      	ldr	r3, [pc, #196]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d15c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01f      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d019      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030f8:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a20      	ldr	r2, [pc, #128]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe fd4d 	bl	8001bc8 <HAL_GetTick>
 800312e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003130:	e00b      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe fd49 	bl	8001bc8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d902      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	74fb      	strb	r3, [r7, #19]
            break;
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ec      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10c      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800316e:	4904      	ldr	r1, [pc, #16]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003176:	e009      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	74bb      	strb	r3, [r7, #18]
 800317c:	e006      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800318c:	7c7b      	ldrb	r3, [r7, #17]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4b9e      	ldr	r3, [pc, #632]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	4a9d      	ldr	r2, [pc, #628]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031aa:	4b98      	ldr	r3, [pc, #608]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f023 0203 	bic.w	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	4994      	ldr	r1, [pc, #592]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031cc:	4b8f      	ldr	r3, [pc, #572]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 020c 	bic.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	498c      	ldr	r1, [pc, #560]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ee:	4b87      	ldr	r3, [pc, #540]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	4983      	ldr	r1, [pc, #524]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003210:	4b7e      	ldr	r3, [pc, #504]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	497b      	ldr	r1, [pc, #492]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003232:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003240:	4972      	ldr	r1, [pc, #456]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003254:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	496a      	ldr	r1, [pc, #424]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	4961      	ldr	r1, [pc, #388]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003298:	4b5c      	ldr	r3, [pc, #368]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a6:	4959      	ldr	r1, [pc, #356]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ba:	4b54      	ldr	r3, [pc, #336]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	4950      	ldr	r1, [pc, #320]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032dc:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	4948      	ldr	r1, [pc, #288]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032fe:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	493f      	ldr	r1, [pc, #252]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d028      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003320:	4b3a      	ldr	r3, [pc, #232]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332e:	4937      	ldr	r1, [pc, #220]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333e:	d106      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a31      	ldr	r2, [pc, #196]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334a:	60d3      	str	r3, [r2, #12]
 800334c:	e011      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003356:	d10c      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	2101      	movs	r1, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f8c8 	bl	80034f4 <RCCEx_PLLSAI1_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d028      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800337e:	4b23      	ldr	r3, [pc, #140]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	491f      	ldr	r1, [pc, #124]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339c:	d106      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339e:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4a1a      	ldr	r2, [pc, #104]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a8:	60d3      	str	r3, [r2, #12]
 80033aa:	e011      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2101      	movs	r1, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f899 	bl	80034f4 <RCCEx_PLLSAI1_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d02b      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ea:	4908      	ldr	r1, [pc, #32]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fa:	d109      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a02      	ldr	r2, [pc, #8]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003406:	60d3      	str	r3, [r2, #12]
 8003408:	e014      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003418:	d10c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3304      	adds	r3, #4
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f867 	bl	80034f4 <RCCEx_PLLSAI1_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02f      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003440:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344e:	4928      	ldr	r1, [pc, #160]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800345e:	d10d      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	2102      	movs	r1, #2
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f844 	bl	80034f4 <RCCEx_PLLSAI1_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d014      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	74bb      	strb	r3, [r7, #18]
 800347a:	e011      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003484:	d10c      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3320      	adds	r3, #32
 800348a:	2102      	movs	r1, #2
 800348c:	4618      	mov	r0, r3
 800348e:	f000 f925 	bl	80036dc <RCCEx_PLLSAI2_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034ac:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ba:	490d      	ldr	r1, [pc, #52]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034de:	4904      	ldr	r1, [pc, #16]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000

080034f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003502:	4b75      	ldr	r3, [pc, #468]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800350e:	4b72      	ldr	r3, [pc, #456]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0203 	and.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d10d      	bne.n	800353a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
       ||
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
       ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d047      	beq.n	80035ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	e044      	b.n	80035ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d018      	beq.n	800357a <RCCEx_PLLSAI1_Config+0x86>
 8003548:	2b03      	cmp	r3, #3
 800354a:	d825      	bhi.n	8003598 <RCCEx_PLLSAI1_Config+0xa4>
 800354c:	2b01      	cmp	r3, #1
 800354e:	d002      	beq.n	8003556 <RCCEx_PLLSAI1_Config+0x62>
 8003550:	2b02      	cmp	r3, #2
 8003552:	d009      	beq.n	8003568 <RCCEx_PLLSAI1_Config+0x74>
 8003554:	e020      	b.n	8003598 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003556:	4b60      	ldr	r3, [pc, #384]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11d      	bne.n	800359e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003566:	e01a      	b.n	800359e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003568:	4b5b      	ldr	r3, [pc, #364]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d116      	bne.n	80035a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e013      	b.n	80035a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800357a:	4b57      	ldr	r3, [pc, #348]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003586:	4b54      	ldr	r3, [pc, #336]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003596:	e006      	b.n	80035a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	e004      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800359e:	bf00      	nop
 80035a0:	e002      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	430b      	orrs	r3, r1
 80035c4:	4944      	ldr	r1, [pc, #272]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d17d      	bne.n	80036cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035d0:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035dc:	f7fe faf4 	bl	8001bc8 <HAL_GetTick>
 80035e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035e2:	e009      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035e4:	f7fe faf0 	bl	8001bc8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d902      	bls.n	80035f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	73fb      	strb	r3, [r7, #15]
        break;
 80035f6:	e005      	b.n	8003604 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035f8:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ef      	bne.n	80035e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d160      	bne.n	80036cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d111      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003610:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6892      	ldr	r2, [r2, #8]
 8003620:	0211      	lsls	r1, r2, #8
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68d2      	ldr	r2, [r2, #12]
 8003626:	0912      	lsrs	r2, r2, #4
 8003628:	0452      	lsls	r2, r2, #17
 800362a:	430a      	orrs	r2, r1
 800362c:	492a      	ldr	r1, [pc, #168]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	610b      	str	r3, [r1, #16]
 8003632:	e027      	b.n	8003684 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d112      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800363a:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003642:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6892      	ldr	r2, [r2, #8]
 800364a:	0211      	lsls	r1, r2, #8
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6912      	ldr	r2, [r2, #16]
 8003650:	0852      	lsrs	r2, r2, #1
 8003652:	3a01      	subs	r2, #1
 8003654:	0552      	lsls	r2, r2, #21
 8003656:	430a      	orrs	r2, r1
 8003658:	491f      	ldr	r1, [pc, #124]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	610b      	str	r3, [r1, #16]
 800365e:	e011      	b.n	8003684 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003668:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	0211      	lsls	r1, r2, #8
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6952      	ldr	r2, [r2, #20]
 8003676:	0852      	lsrs	r2, r2, #1
 8003678:	3a01      	subs	r2, #1
 800367a:	0652      	lsls	r2, r2, #25
 800367c:	430a      	orrs	r2, r1
 800367e:	4916      	ldr	r1, [pc, #88]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800368e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fa9a 	bl	8001bc8 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003696:	e009      	b.n	80036ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003698:	f7fe fa96 	bl	8001bc8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	73fb      	strb	r3, [r7, #15]
          break;
 80036aa:	e005      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ef      	beq.n	8003698 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ea:	4b6a      	ldr	r3, [pc, #424]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d018      	beq.n	8003728 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036f6:	4b67      	ldr	r3, [pc, #412]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0203 	and.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d10d      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
       ||
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800370e:	4b61      	ldr	r3, [pc, #388]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
       ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d047      	beq.n	80037b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e044      	b.n	80037b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d018      	beq.n	8003762 <RCCEx_PLLSAI2_Config+0x86>
 8003730:	2b03      	cmp	r3, #3
 8003732:	d825      	bhi.n	8003780 <RCCEx_PLLSAI2_Config+0xa4>
 8003734:	2b01      	cmp	r3, #1
 8003736:	d002      	beq.n	800373e <RCCEx_PLLSAI2_Config+0x62>
 8003738:	2b02      	cmp	r3, #2
 800373a:	d009      	beq.n	8003750 <RCCEx_PLLSAI2_Config+0x74>
 800373c:	e020      	b.n	8003780 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800373e:	4b55      	ldr	r3, [pc, #340]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d11d      	bne.n	8003786 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374e:	e01a      	b.n	8003786 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003750:	4b50      	ldr	r3, [pc, #320]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003758:	2b00      	cmp	r3, #0
 800375a:	d116      	bne.n	800378a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003760:	e013      	b.n	800378a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003762:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800376e:	4b49      	ldr	r3, [pc, #292]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800377e:	e006      	b.n	800378e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      break;
 8003784:	e004      	b.n	8003790 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800378e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003796:	4b3f      	ldr	r3, [pc, #252]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	430b      	orrs	r3, r1
 80037ac:	4939      	ldr	r1, [pc, #228]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d167      	bne.n	8003888 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037b8:	4b36      	ldr	r3, [pc, #216]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a35      	ldr	r2, [pc, #212]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c4:	f7fe fa00 	bl	8001bc8 <HAL_GetTick>
 80037c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037ca:	e009      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037cc:	f7fe f9fc 	bl	8001bc8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d902      	bls.n	80037e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	73fb      	strb	r3, [r7, #15]
        break;
 80037de:	e005      	b.n	80037ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037e0:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1ef      	bne.n	80037cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d14a      	bne.n	8003888 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d111      	bne.n	800381c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6892      	ldr	r2, [r2, #8]
 8003808:	0211      	lsls	r1, r2, #8
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68d2      	ldr	r2, [r2, #12]
 800380e:	0912      	lsrs	r2, r2, #4
 8003810:	0452      	lsls	r2, r2, #17
 8003812:	430a      	orrs	r2, r1
 8003814:	491f      	ldr	r1, [pc, #124]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	614b      	str	r3, [r1, #20]
 800381a:	e011      	b.n	8003840 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6892      	ldr	r2, [r2, #8]
 800382c:	0211      	lsls	r1, r2, #8
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6912      	ldr	r2, [r2, #16]
 8003832:	0852      	lsrs	r2, r2, #1
 8003834:	3a01      	subs	r2, #1
 8003836:	0652      	lsls	r2, r2, #25
 8003838:	430a      	orrs	r2, r1
 800383a:	4916      	ldr	r1, [pc, #88]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fe f9bc 	bl	8001bc8 <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003852:	e009      	b.n	8003868 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003854:	f7fe f9b8 	bl	8001bc8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	73fb      	strb	r3, [r7, #15]
          break;
 8003866:	e005      	b.n	8003874 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ef      	beq.n	8003854 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4904      	ldr	r1, [pc, #16]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000

08003898 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d06c      	beq.n	8003984 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd ff06 	bl	80016d0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	22ca      	movs	r2, #202	; 0xca
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2253      	movs	r2, #83	; 0x53
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fc5f 	bl	80041a0 <RTC_EnterInitMode>
 80038e2:	4603      	mov	r3, r0
 80038e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d14b      	bne.n	8003984 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80038fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fe:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6899      	ldr	r1, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68d2      	ldr	r2, [r2, #12]
 8003926:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6919      	ldr	r1, [r3, #16]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	041a      	lsls	r2, r3, #16
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fc63 	bl	8004208 <RTC_ExitInitMode>
 8003942:	4603      	mov	r3, r0
 8003944:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11b      	bne.n	8003984 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0203 	bic.w	r2, r2, #3
 800395a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	22ff      	movs	r2, #255	; 0xff
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800398e:	b590      	push	{r4, r7, lr}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_RTC_SetTime+0x1a>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e08b      	b.n	8003ac0 <HAL_RTC_SetTime+0x132>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	22ca      	movs	r2, #202	; 0xca
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2253      	movs	r2, #83	; 0x53
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fbe9 	bl	80041a0 <RTC_EnterInitMode>
 80039ce:	4603      	mov	r3, r0
 80039d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d163      	bne.n	8003aa0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d126      	bne.n	8003a2c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fc44 	bl	8004284 <RTC_ByteToBcd2>
 80039fc:	4603      	mov	r3, r0
 80039fe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fc3d 	bl	8004284 <RTC_ByteToBcd2>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a0e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	789b      	ldrb	r3, [r3, #2]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fc35 	bl	8004284 <RTC_ByteToBcd2>
 8003a1a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a1c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	78db      	ldrb	r3, [r3, #3]
 8003a24:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e018      	b.n	8003a5e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d102      	bne.n	8003a40 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	785b      	ldrb	r3, [r3, #1]
 8003a4a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a4c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a52:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	78db      	ldrb	r3, [r3, #3]
 8003a58:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a6c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fbb6 	bl	8004208 <RTC_ExitInitMode>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	22ff      	movs	r2, #255	; 0xff
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}

08003ac8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003af6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003afa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	0d9b      	lsrs	r3, r3, #22
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d11a      	bne.n	8003b76 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fbbd 	bl	80042c4 <RTC_Bcd2ToByte>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fbb4 	bl	80042c4 <RTC_Bcd2ToByte>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	789b      	ldrb	r3, [r3, #2]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fbab 	bl	80042c4 <RTC_Bcd2ToByte>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_RTC_SetDate+0x1a>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e075      	b.n	8003c86 <HAL_RTC_SetDate+0x106>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10e      	bne.n	8003bce <HAL_RTC_SetDate+0x4e>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	785b      	ldrb	r3, [r3, #1]
 8003bc0:	f023 0310 	bic.w	r3, r3, #16
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	330a      	adds	r3, #10
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d11c      	bne.n	8003c0e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	78db      	ldrb	r3, [r3, #3]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fb53 	bl	8004284 <RTC_ByteToBcd2>
 8003bde:	4603      	mov	r3, r0
 8003be0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	785b      	ldrb	r3, [r3, #1]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fb4c 	bl	8004284 <RTC_ByteToBcd2>
 8003bec:	4603      	mov	r3, r0
 8003bee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003bf0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	789b      	ldrb	r3, [r3, #2]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fb44 	bl	8004284 <RTC_ByteToBcd2>
 8003bfc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bfe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e00e      	b.n	8003c2c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	78db      	ldrb	r3, [r3, #3]
 8003c12:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	785b      	ldrb	r3, [r3, #1]
 8003c18:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003c1a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003c20:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	22ca      	movs	r2, #202	; 0xca
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2253      	movs	r2, #83	; 0x53
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 faaf 	bl	80041a0 <RTC_EnterInitMode>
 8003c42:	4603      	mov	r3, r0
 8003c44:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c5a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fad3 	bl	8004208 <RTC_ExitInitMode>
 8003c62:	4603      	mov	r3, r0
 8003c64:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd90      	pop	{r4, r7, pc}

08003c8e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ca4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	0b5b      	lsrs	r3, r3, #13
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11a      	bne.n	8003d1e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	78db      	ldrb	r3, [r3, #3]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fae9 	bl	80042c4 <RTC_Bcd2ToByte>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fae0 	bl	80042c4 <RTC_Bcd2ToByte>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	789b      	ldrb	r3, [r3, #2]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fad7 	bl	80042c4 <RTC_Bcd2ToByte>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003d28:	b590      	push	{r4, r7, lr}
 8003d2a:	b089      	sub	sp, #36	; 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_RTC_SetAlarm_IT+0x1a>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e127      	b.n	8003f92 <HAL_RTC_SetAlarm_IT+0x26a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d137      	bne.n	8003dc8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fa87 	bl	8004284 <RTC_ByteToBcd2>
 8003d76:	4603      	mov	r3, r0
 8003d78:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fa80 	bl	8004284 <RTC_ByteToBcd2>
 8003d84:	4603      	mov	r3, r0
 8003d86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d88:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	789b      	ldrb	r3, [r3, #2]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fa78 	bl	8004284 <RTC_ByteToBcd2>
 8003d94:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d96:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	78db      	ldrb	r3, [r3, #3]
 8003d9e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003da0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fa6a 	bl	8004284 <RTC_ByteToBcd2>
 8003db0:	4603      	mov	r3, r0
 8003db2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003db4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003dbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e023      	b.n	8003e10 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003de8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003dee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	78db      	ldrb	r3, [r3, #3]
 8003df4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003df6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dfe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003e00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003e06:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	22ca      	movs	r2, #202	; 0xca
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2253      	movs	r2, #83	; 0x53
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d14a      	bne.n	8003ecc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e44:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003e56:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003e58:	f7fd feb6 	bl	8001bc8 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e5e:	e015      	b.n	8003e8c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e60:	f7fd feb2 	bl	8001bc8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6e:	d90d      	bls.n	8003e8c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	22ff      	movs	r2, #255	; 0xff
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e082      	b.n	8003f92 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0e2      	beq.n	8003e60 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	e049      	b.n	8003f60 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003eda:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003eec:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003eee:	f7fd fe6b 	bl	8001bc8 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ef4:	e015      	b.n	8003f22 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ef6:	f7fd fe67 	bl	8001bc8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f04:	d90d      	bls.n	8003f22 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	22ff      	movs	r2, #255	; 0xff
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2203      	movs	r2, #3
 8003f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e037      	b.n	8003f92 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0e2      	beq.n	8003ef6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f5e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_RTC_SetAlarm_IT+0x274>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <HAL_RTC_SetAlarm_IT+0x274>)
 8003f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f6a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RTC_SetAlarm_IT+0x274>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <HAL_RTC_SetAlarm_IT+0x274>)
 8003f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f76:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	22ff      	movs	r2, #255	; 0xff
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3724      	adds	r7, #36	; 0x24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd90      	pop	{r4, r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RTC_DeactivateAlarm+0x18>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e083      	b.n	80040c0 <HAL_RTC_DeactivateAlarm+0x120>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	22ca      	movs	r2, #202	; 0xca
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2253      	movs	r2, #83	; 0x53
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fde:	d131      	bne.n	8004044 <HAL_RTC_DeactivateAlarm+0xa4>
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fee:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ffe:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004000:	f7fd fde2 	bl	8001bc8 <HAL_GetTick>
 8004004:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004006:	e015      	b.n	8004034 <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004008:	f7fd fdde 	bl	8001bc8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004016:	d90d      	bls.n	8004034 <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2203      	movs	r2, #3
 8004024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e045      	b.n	80040c0 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0e2      	beq.n	8004008 <HAL_RTC_DeactivateAlarm+0x68>
 8004042:	e030      	b.n	80040a6 <HAL_RTC_DeactivateAlarm+0x106>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004052:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004062:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004064:	f7fd fdb0 	bl	8001bc8 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800406a:	e015      	b.n	8004098 <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800406c:	f7fd fdac 	bl	8001bc8 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407a:	d90d      	bls.n	8004098 <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	22ff      	movs	r2, #255	; 0xff
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2203      	movs	r2, #3
 8004088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e013      	b.n	80040c0 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0e2      	beq.n	800406c <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	22ff      	movs	r2, #255	; 0xff
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80040d0:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <HAL_RTC_AlarmIRQHandler+0x88>)
 80040d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80040d6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d012      	beq.n	800410c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004104:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc fa60 	bl	80005cc <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d012      	beq.n	8004140 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004138:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8dc 	bl	80042f8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40010400 	.word	0x40010400

08004154 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800416a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800416c:	f7fd fd2c 	bl	8001bc8 <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004172:	e009      	b.n	8004188 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004174:	f7fd fd28 	bl	8001bc8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004182:	d901      	bls.n	8004188 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e007      	b.n	8004198 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ee      	beq.n	8004174 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d120      	bne.n	80041fc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80041c4:	f7fd fd00 	bl	8001bc8 <HAL_GetTick>
 80041c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041ca:	e00d      	b.n	80041e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041cc:	f7fd fcfc 	bl	8001bc8 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041da:	d905      	bls.n	80041e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2203      	movs	r2, #3
 80041e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <RTC_EnterInitMode+0x5c>
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d1e7      	bne.n	80041cc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <RTC_ExitInitMode+0x78>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <RTC_ExitInitMode+0x78>)
 800421a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <RTC_ExitInitMode+0x78>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10c      	bne.n	8004246 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ff91 	bl	8004154 <HAL_RTC_WaitForSynchro>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01e      	beq.n	8004276 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2203      	movs	r2, #3
 800423c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e017      	b.n	8004276 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004246:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <RTC_ExitInitMode+0x78>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <RTC_ExitInitMode+0x78>)
 800424c:	f023 0320 	bic.w	r3, r3, #32
 8004250:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ff7e 	bl	8004154 <HAL_RTC_WaitForSynchro>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2203      	movs	r2, #3
 8004262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <RTC_ExitInitMode+0x78>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4a04      	ldr	r2, [pc, #16]	; (8004280 <RTC_ExitInitMode+0x78>)
 8004270:	f043 0320 	orr.w	r3, r3, #32
 8004274:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40002800 	.word	0x40002800

08004284 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004296:	e005      	b.n	80042a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	3b0a      	subs	r3, #10
 80042a2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80042a4:	7afb      	ldrb	r3, [r7, #11]
 80042a6:	2b09      	cmp	r3, #9
 80042a8:	d8f6      	bhi.n	8004298 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	b2db      	uxtb	r3, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	0092      	lsls	r2, r2, #2
 80042d8:	4413      	add	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	4413      	add	r3, r2
 80042ea:	b2db      	uxtb	r3, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e095      	b.n	800444a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	2b00      	cmp	r3, #0
 8004324:	d108      	bne.n	8004338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432e:	d009      	beq.n	8004344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	61da      	str	r2, [r3, #28]
 8004336:	e005      	b.n	8004344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd f9d8 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004384:	d902      	bls.n	800438c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e002      	b.n	8004392 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800438c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004390:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800439a:	d007      	beq.n	80043ac <HAL_SPI_Init+0xa0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a4:	d002      	beq.n	80043ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	ea42 0103 	orr.w	r1, r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	f003 0204 	and.w	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004428:	ea42 0103 	orr.w	r1, r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b088      	sub	sp, #32
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_SPI_Transmit+0x22>
 8004470:	2302      	movs	r3, #2
 8004472:	e158      	b.n	8004726 <HAL_SPI_Transmit+0x2d4>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800447c:	f7fd fba4 	bl	8001bc8 <HAL_GetTick>
 8004480:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	d002      	beq.n	8004498 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004492:	2302      	movs	r3, #2
 8004494:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004496:	e13d      	b.n	8004714 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x52>
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044a8:	e134      	b.n	8004714 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2203      	movs	r2, #3
 80044ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	d10f      	bne.n	8004516 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004504:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004514:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d007      	beq.n	8004534 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004532:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800453c:	d94b      	bls.n	80045d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_SPI_Transmit+0xfa>
 8004546:	8afb      	ldrh	r3, [r7, #22]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d13e      	bne.n	80045ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	881a      	ldrh	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	1c9a      	adds	r2, r3, #2
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004570:	e02b      	b.n	80045ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	d112      	bne.n	80045a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	881a      	ldrh	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045a4:	e011      	b.n	80045ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a6:	f7fd fb0f 	bl	8001bc8 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d803      	bhi.n	80045be <HAL_SPI_Transmit+0x16c>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d102      	bne.n	80045c4 <HAL_SPI_Transmit+0x172>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045c8:	e0a4      	b.n	8004714 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ce      	bne.n	8004572 <HAL_SPI_Transmit+0x120>
 80045d4:	e07c      	b.n	80046d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_SPI_Transmit+0x192>
 80045de:	8afb      	ldrh	r3, [r7, #22]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d170      	bne.n	80046c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d912      	bls.n	8004614 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	881a      	ldrh	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	1c9a      	adds	r2, r3, #2
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b02      	subs	r3, #2
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004612:	e058      	b.n	80046c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	7812      	ldrb	r2, [r2, #0]
 8004620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800463a:	e044      	b.n	80046c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d12b      	bne.n	80046a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	d912      	bls.n	800467a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	881a      	ldrh	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b02      	subs	r3, #2
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004678:	e025      	b.n	80046c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046a0:	e011      	b.n	80046c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a2:	f7fd fa91 	bl	8001bc8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d803      	bhi.n	80046ba <HAL_SPI_Transmit+0x268>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_Transmit+0x26e>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046c4:	e026      	b.n	8004714 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1b5      	bne.n	800463c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fa65 	bl	8004ba4 <SPI_EndRxTxTransaction>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e000      	b.n	8004714 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004712:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004724:	7ffb      	ldrb	r3, [r7, #31]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
    return;
 8004772:	e0d7      	b.n	8004924 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_SPI_IRQHandler+0x66>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	09db      	lsrs	r3, r3, #7
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
    return;
 8004794:	e0c6      	b.n	8004924 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <HAL_SPI_IRQHandler+0x8c>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80b4 	beq.w	8004924 <HAL_SPI_IRQHandler+0x1f4>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80ad 	beq.w	8004924 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d023      	beq.n	800481e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d011      	beq.n	8004806 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	e00b      	b.n	800481e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
        return;
 800481c:	e082      	b.n	8004924 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d014      	beq.n	8004854 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00c      	beq.n	800487a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004864:	f043 0208 	orr.w	r2, r3, #8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800486c:	2300      	movs	r3, #0
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487e:	2b00      	cmp	r3, #0
 8004880:	d04f      	beq.n	8004922 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004890:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_SPI_IRQHandler+0x17e>
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d034      	beq.n	8004918 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0203 	bic.w	r2, r2, #3
 80048bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d011      	beq.n	80048ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_SPI_IRQHandler+0x1fc>)
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd fab9 	bl	8001e4a <HAL_DMA_Abort_IT>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	4a0d      	ldr	r2, [pc, #52]	; (800492c <HAL_SPI_IRQHandler+0x1fc>)
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd faa3 	bl	8001e4a <HAL_DMA_Abort_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004916:	e003      	b.n	8004920 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f809 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800491e:	e000      	b.n	8004922 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004920:	bf00      	nop
    return;
 8004922:	bf00      	nop
  }
}
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	08004945 	.word	0x08004945

08004930 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7ff ffe5 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004980:	f7fd f922 	bl	8001bc8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	4413      	add	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004990:	f7fd f91a 	bl	8001bc8 <HAL_GetTick>
 8004994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	015b      	lsls	r3, r3, #5
 800499c:	0d1b      	lsrs	r3, r3, #20
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049a6:	e054      	b.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d050      	beq.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b0:	f7fd f90a 	bl	8001bc8 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d902      	bls.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d13d      	bne.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049de:	d111      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e8:	d004      	beq.n	80049f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f2:	d107      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d10f      	bne.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e017      	b.n	8004a72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d19b      	bne.n	80049a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000008 	.word	0x20000008

08004a80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a8e:	f7fd f89b 	bl	8001bc8 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a9e:	f7fd f893 	bl	8001bc8 <HAL_GetTick>
 8004aa2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004aa4:	4b3e      	ldr	r3, [pc, #248]	; (8004ba0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	00da      	lsls	r2, r3, #3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	0d1b      	lsrs	r3, r3, #20
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004abc:	e062      	b.n	8004b84 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ac4:	d109      	bne.n	8004ada <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004ad8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d050      	beq.n	8004b84 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ae2:	f7fd f871 	bl	8001bc8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d902      	bls.n	8004af8 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d13d      	bne.n	8004b74 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b10:	d111      	bne.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1a:	d004      	beq.n	8004b26 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b24:	d107      	bne.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3e:	d10f      	bne.n	8004b60 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e010      	b.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d194      	bne.n	8004abe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000008 	.word	0x20000008

08004ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff ff5f 	bl	8004a80 <SPI_WaitFifoStateUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bcc:	f043 0220 	orr.w	r2, r3, #32
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e027      	b.n	8004c28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff fec4 	bl	8004970 <SPI_WaitFlagStateUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e014      	b.n	8004c28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff ff38 	bl	8004a80 <SPI_WaitFifoStateUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e000      	b.n	8004c28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e040      	b.n	8004cc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc fdc8 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0201 	bic.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f8c0 	bl	8004df4 <UART_SetConfig>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e022      	b.n	8004cc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb3e 	bl	8005308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fbc5 	bl	800544c <UART_CheckIdleState>
 8004cc2:	4603      	mov	r3, r0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	f040 8082 	bne.w	8004dea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Transmit+0x26>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07a      	b.n	8004dec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Transmit+0x38>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e073      	b.n	8004dec <HAL_UART_Transmit+0x120>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2221      	movs	r2, #33	; 0x21
 8004d18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc ff55 	bl	8001bc8 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d38:	d108      	bne.n	8004d4c <HAL_UART_Transmit+0x80>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e003      	b.n	8004d54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d5c:	e02d      	b.n	8004dba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2180      	movs	r1, #128	; 0x80
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fbb8 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e039      	b.n	8004dec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d8a:	b292      	uxth	r2, r2
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	3302      	adds	r3, #2
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	e008      	b.n	8004da8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	781a      	ldrb	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	b292      	uxth	r2, r2
 8004da0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3301      	adds	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1cb      	bne.n	8004d5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2140      	movs	r1, #64	; 0x40
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fb84 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e005      	b.n	8004dec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3720      	adds	r7, #32
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4bad      	ldr	r3, [pc, #692]	; (80050d4 <UART_SetConfig+0x2e0>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	69f9      	ldr	r1, [r7, #28]
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4aa2      	ldr	r2, [pc, #648]	; (80050d8 <UART_SetConfig+0x2e4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a99      	ldr	r2, [pc, #612]	; (80050dc <UART_SetConfig+0x2e8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d121      	bne.n	8004ebe <UART_SetConfig+0xca>
 8004e7a:	4b99      	ldr	r3, [pc, #612]	; (80050e0 <UART_SetConfig+0x2ec>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d817      	bhi.n	8004eb8 <UART_SetConfig+0xc4>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0x9c>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004ead 	.word	0x08004ead
 8004e98:	08004ea7 	.word	0x08004ea7
 8004e9c:	08004eb3 	.word	0x08004eb3
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	76fb      	strb	r3, [r7, #27]
 8004ea4:	e0e7      	b.n	8005076 <UART_SetConfig+0x282>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	76fb      	strb	r3, [r7, #27]
 8004eaa:	e0e4      	b.n	8005076 <UART_SetConfig+0x282>
 8004eac:	2304      	movs	r3, #4
 8004eae:	76fb      	strb	r3, [r7, #27]
 8004eb0:	e0e1      	b.n	8005076 <UART_SetConfig+0x282>
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	76fb      	strb	r3, [r7, #27]
 8004eb6:	e0de      	b.n	8005076 <UART_SetConfig+0x282>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	76fb      	strb	r3, [r7, #27]
 8004ebc:	e0db      	b.n	8005076 <UART_SetConfig+0x282>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a88      	ldr	r2, [pc, #544]	; (80050e4 <UART_SetConfig+0x2f0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d132      	bne.n	8004f2e <UART_SetConfig+0x13a>
 8004ec8:	4b85      	ldr	r3, [pc, #532]	; (80050e0 <UART_SetConfig+0x2ec>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d828      	bhi.n	8004f28 <UART_SetConfig+0x134>
 8004ed6:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0xe8>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	08004f29 	.word	0x08004f29
 8004ee4:	08004f29 	.word	0x08004f29
 8004ee8:	08004f29 	.word	0x08004f29
 8004eec:	08004f1d 	.word	0x08004f1d
 8004ef0:	08004f29 	.word	0x08004f29
 8004ef4:	08004f29 	.word	0x08004f29
 8004ef8:	08004f29 	.word	0x08004f29
 8004efc:	08004f17 	.word	0x08004f17
 8004f00:	08004f29 	.word	0x08004f29
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f29 	.word	0x08004f29
 8004f0c:	08004f23 	.word	0x08004f23
 8004f10:	2300      	movs	r3, #0
 8004f12:	76fb      	strb	r3, [r7, #27]
 8004f14:	e0af      	b.n	8005076 <UART_SetConfig+0x282>
 8004f16:	2302      	movs	r3, #2
 8004f18:	76fb      	strb	r3, [r7, #27]
 8004f1a:	e0ac      	b.n	8005076 <UART_SetConfig+0x282>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	76fb      	strb	r3, [r7, #27]
 8004f20:	e0a9      	b.n	8005076 <UART_SetConfig+0x282>
 8004f22:	2308      	movs	r3, #8
 8004f24:	76fb      	strb	r3, [r7, #27]
 8004f26:	e0a6      	b.n	8005076 <UART_SetConfig+0x282>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	76fb      	strb	r3, [r7, #27]
 8004f2c:	e0a3      	b.n	8005076 <UART_SetConfig+0x282>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a6d      	ldr	r2, [pc, #436]	; (80050e8 <UART_SetConfig+0x2f4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d120      	bne.n	8004f7a <UART_SetConfig+0x186>
 8004f38:	4b69      	ldr	r3, [pc, #420]	; (80050e0 <UART_SetConfig+0x2ec>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f42:	2b30      	cmp	r3, #48	; 0x30
 8004f44:	d013      	beq.n	8004f6e <UART_SetConfig+0x17a>
 8004f46:	2b30      	cmp	r3, #48	; 0x30
 8004f48:	d814      	bhi.n	8004f74 <UART_SetConfig+0x180>
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d009      	beq.n	8004f62 <UART_SetConfig+0x16e>
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d810      	bhi.n	8004f74 <UART_SetConfig+0x180>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <UART_SetConfig+0x168>
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d006      	beq.n	8004f68 <UART_SetConfig+0x174>
 8004f5a:	e00b      	b.n	8004f74 <UART_SetConfig+0x180>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	76fb      	strb	r3, [r7, #27]
 8004f60:	e089      	b.n	8005076 <UART_SetConfig+0x282>
 8004f62:	2302      	movs	r3, #2
 8004f64:	76fb      	strb	r3, [r7, #27]
 8004f66:	e086      	b.n	8005076 <UART_SetConfig+0x282>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	76fb      	strb	r3, [r7, #27]
 8004f6c:	e083      	b.n	8005076 <UART_SetConfig+0x282>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	76fb      	strb	r3, [r7, #27]
 8004f72:	e080      	b.n	8005076 <UART_SetConfig+0x282>
 8004f74:	2310      	movs	r3, #16
 8004f76:	76fb      	strb	r3, [r7, #27]
 8004f78:	e07d      	b.n	8005076 <UART_SetConfig+0x282>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	; (80050ec <UART_SetConfig+0x2f8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d120      	bne.n	8004fc6 <UART_SetConfig+0x1d2>
 8004f84:	4b56      	ldr	r3, [pc, #344]	; (80050e0 <UART_SetConfig+0x2ec>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f90:	d013      	beq.n	8004fba <UART_SetConfig+0x1c6>
 8004f92:	2bc0      	cmp	r3, #192	; 0xc0
 8004f94:	d814      	bhi.n	8004fc0 <UART_SetConfig+0x1cc>
 8004f96:	2b80      	cmp	r3, #128	; 0x80
 8004f98:	d009      	beq.n	8004fae <UART_SetConfig+0x1ba>
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d810      	bhi.n	8004fc0 <UART_SetConfig+0x1cc>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <UART_SetConfig+0x1b4>
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d006      	beq.n	8004fb4 <UART_SetConfig+0x1c0>
 8004fa6:	e00b      	b.n	8004fc0 <UART_SetConfig+0x1cc>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	76fb      	strb	r3, [r7, #27]
 8004fac:	e063      	b.n	8005076 <UART_SetConfig+0x282>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	76fb      	strb	r3, [r7, #27]
 8004fb2:	e060      	b.n	8005076 <UART_SetConfig+0x282>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e05d      	b.n	8005076 <UART_SetConfig+0x282>
 8004fba:	2308      	movs	r3, #8
 8004fbc:	76fb      	strb	r3, [r7, #27]
 8004fbe:	e05a      	b.n	8005076 <UART_SetConfig+0x282>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e057      	b.n	8005076 <UART_SetConfig+0x282>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a49      	ldr	r2, [pc, #292]	; (80050f0 <UART_SetConfig+0x2fc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d125      	bne.n	800501c <UART_SetConfig+0x228>
 8004fd0:	4b43      	ldr	r3, [pc, #268]	; (80050e0 <UART_SetConfig+0x2ec>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fde:	d017      	beq.n	8005010 <UART_SetConfig+0x21c>
 8004fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe4:	d817      	bhi.n	8005016 <UART_SetConfig+0x222>
 8004fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fea:	d00b      	beq.n	8005004 <UART_SetConfig+0x210>
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff0:	d811      	bhi.n	8005016 <UART_SetConfig+0x222>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <UART_SetConfig+0x20a>
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffa:	d006      	beq.n	800500a <UART_SetConfig+0x216>
 8004ffc:	e00b      	b.n	8005016 <UART_SetConfig+0x222>
 8004ffe:	2300      	movs	r3, #0
 8005000:	76fb      	strb	r3, [r7, #27]
 8005002:	e038      	b.n	8005076 <UART_SetConfig+0x282>
 8005004:	2302      	movs	r3, #2
 8005006:	76fb      	strb	r3, [r7, #27]
 8005008:	e035      	b.n	8005076 <UART_SetConfig+0x282>
 800500a:	2304      	movs	r3, #4
 800500c:	76fb      	strb	r3, [r7, #27]
 800500e:	e032      	b.n	8005076 <UART_SetConfig+0x282>
 8005010:	2308      	movs	r3, #8
 8005012:	76fb      	strb	r3, [r7, #27]
 8005014:	e02f      	b.n	8005076 <UART_SetConfig+0x282>
 8005016:	2310      	movs	r3, #16
 8005018:	76fb      	strb	r3, [r7, #27]
 800501a:	e02c      	b.n	8005076 <UART_SetConfig+0x282>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2d      	ldr	r2, [pc, #180]	; (80050d8 <UART_SetConfig+0x2e4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d125      	bne.n	8005072 <UART_SetConfig+0x27e>
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <UART_SetConfig+0x2ec>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005030:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005034:	d017      	beq.n	8005066 <UART_SetConfig+0x272>
 8005036:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800503a:	d817      	bhi.n	800506c <UART_SetConfig+0x278>
 800503c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005040:	d00b      	beq.n	800505a <UART_SetConfig+0x266>
 8005042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005046:	d811      	bhi.n	800506c <UART_SetConfig+0x278>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <UART_SetConfig+0x260>
 800504c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005050:	d006      	beq.n	8005060 <UART_SetConfig+0x26c>
 8005052:	e00b      	b.n	800506c <UART_SetConfig+0x278>
 8005054:	2300      	movs	r3, #0
 8005056:	76fb      	strb	r3, [r7, #27]
 8005058:	e00d      	b.n	8005076 <UART_SetConfig+0x282>
 800505a:	2302      	movs	r3, #2
 800505c:	76fb      	strb	r3, [r7, #27]
 800505e:	e00a      	b.n	8005076 <UART_SetConfig+0x282>
 8005060:	2304      	movs	r3, #4
 8005062:	76fb      	strb	r3, [r7, #27]
 8005064:	e007      	b.n	8005076 <UART_SetConfig+0x282>
 8005066:	2308      	movs	r3, #8
 8005068:	76fb      	strb	r3, [r7, #27]
 800506a:	e004      	b.n	8005076 <UART_SetConfig+0x282>
 800506c:	2310      	movs	r3, #16
 800506e:	76fb      	strb	r3, [r7, #27]
 8005070:	e001      	b.n	8005076 <UART_SetConfig+0x282>
 8005072:	2310      	movs	r3, #16
 8005074:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <UART_SetConfig+0x2e4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	f040 8087 	bne.w	8005190 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005082:	7efb      	ldrb	r3, [r7, #27]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d837      	bhi.n	80050f8 <UART_SetConfig+0x304>
 8005088:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0x29c>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050f9 	.word	0x080050f9
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050f9 	.word	0x080050f9
 80050a0:	080050c3 	.word	0x080050c3
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	080050f9 	.word	0x080050f9
 80050ac:	080050f9 	.word	0x080050f9
 80050b0:	080050cb 	.word	0x080050cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b4:	f7fd fea8 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80050b8:	6178      	str	r0, [r7, #20]
        break;
 80050ba:	e022      	b.n	8005102 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <UART_SetConfig+0x300>)
 80050be:	617b      	str	r3, [r7, #20]
        break;
 80050c0:	e01f      	b.n	8005102 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c2:	f7fd fe09 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 80050c6:	6178      	str	r0, [r7, #20]
        break;
 80050c8:	e01b      	b.n	8005102 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ce:	617b      	str	r3, [r7, #20]
        break;
 80050d0:	e017      	b.n	8005102 <UART_SetConfig+0x30e>
 80050d2:	bf00      	nop
 80050d4:	efff69f3 	.word	0xefff69f3
 80050d8:	40008000 	.word	0x40008000
 80050dc:	40013800 	.word	0x40013800
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40004400 	.word	0x40004400
 80050e8:	40004800 	.word	0x40004800
 80050ec:	40004c00 	.word	0x40004c00
 80050f0:	40005000 	.word	0x40005000
 80050f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	76bb      	strb	r3, [r7, #26]
        break;
 8005100:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80f1 	beq.w	80052ec <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	4413      	add	r3, r2
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	429a      	cmp	r2, r3
 8005118:	d305      	bcc.n	8005126 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	429a      	cmp	r2, r3
 8005124:	d902      	bls.n	800512c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	76bb      	strb	r3, [r7, #26]
 800512a:	e0df      	b.n	80052ec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4618      	mov	r0, r3
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	020b      	lsls	r3, r1, #8
 800513e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005142:	0202      	lsls	r2, r0, #8
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	6849      	ldr	r1, [r1, #4]
 8005148:	0849      	lsrs	r1, r1, #1
 800514a:	4608      	mov	r0, r1
 800514c:	f04f 0100 	mov.w	r1, #0
 8005150:	1814      	adds	r4, r2, r0
 8005152:	eb43 0501 	adc.w	r5, r3, r1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	461a      	mov	r2, r3
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	4620      	mov	r0, r4
 8005162:	4629      	mov	r1, r5
 8005164:	f7fb f88c 	bl	8000280 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4613      	mov	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005176:	d308      	bcc.n	800518a <UART_SetConfig+0x396>
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517e:	d204      	bcs.n	800518a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	60da      	str	r2, [r3, #12]
 8005188:	e0b0      	b.n	80052ec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	76bb      	strb	r3, [r7, #26]
 800518e:	e0ad      	b.n	80052ec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005198:	d15c      	bne.n	8005254 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800519a:	7efb      	ldrb	r3, [r7, #27]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d828      	bhi.n	80051f2 <UART_SetConfig+0x3fe>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x3b4>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fd fe1c 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80051d0:	6178      	str	r0, [r7, #20]
        break;
 80051d2:	e013      	b.n	80051fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7fd fe2e 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 80051d8:	6178      	str	r0, [r7, #20]
        break;
 80051da:	e00f      	b.n	80051fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b49      	ldr	r3, [pc, #292]	; (8005304 <UART_SetConfig+0x510>)
 80051de:	617b      	str	r3, [r7, #20]
        break;
 80051e0:	e00c      	b.n	80051fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7fd fd79 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 80051e6:	6178      	str	r0, [r7, #20]
        break;
 80051e8:	e008      	b.n	80051fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	617b      	str	r3, [r7, #20]
        break;
 80051f0:	e004      	b.n	80051fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	76bb      	strb	r3, [r7, #26]
        break;
 80051fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d074      	beq.n	80052ec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	005a      	lsls	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	441a      	add	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	fbb2 f3f3 	udiv	r3, r2, r3
 8005216:	b29b      	uxth	r3, r3
 8005218:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b0f      	cmp	r3, #15
 800521e:	d916      	bls.n	800524e <UART_SetConfig+0x45a>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005226:	d212      	bcs.n	800524e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f023 030f 	bic.w	r3, r3, #15
 8005230:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	b29a      	uxth	r2, r3
 800523e:	89fb      	ldrh	r3, [r7, #14]
 8005240:	4313      	orrs	r3, r2
 8005242:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	89fa      	ldrh	r2, [r7, #14]
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	e04e      	b.n	80052ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	76bb      	strb	r3, [r7, #26]
 8005252:	e04b      	b.n	80052ec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005254:	7efb      	ldrb	r3, [r7, #27]
 8005256:	2b08      	cmp	r3, #8
 8005258:	d827      	bhi.n	80052aa <UART_SetConfig+0x4b6>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <UART_SetConfig+0x46c>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005285 	.word	0x08005285
 8005264:	0800528d 	.word	0x0800528d
 8005268:	08005295 	.word	0x08005295
 800526c:	080052ab 	.word	0x080052ab
 8005270:	0800529b 	.word	0x0800529b
 8005274:	080052ab 	.word	0x080052ab
 8005278:	080052ab 	.word	0x080052ab
 800527c:	080052ab 	.word	0x080052ab
 8005280:	080052a3 	.word	0x080052a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7fd fdc0 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8005288:	6178      	str	r0, [r7, #20]
        break;
 800528a:	e013      	b.n	80052b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800528c:	f7fd fdd2 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8005290:	6178      	str	r0, [r7, #20]
        break;
 8005292:	e00f      	b.n	80052b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005294:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <UART_SetConfig+0x510>)
 8005296:	617b      	str	r3, [r7, #20]
        break;
 8005298:	e00c      	b.n	80052b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529a:	f7fd fd1d 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 800529e:	6178      	str	r0, [r7, #20]
        break;
 80052a0:	e008      	b.n	80052b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a6:	617b      	str	r3, [r7, #20]
        break;
 80052a8:	e004      	b.n	80052b4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	76bb      	strb	r3, [r7, #26]
        break;
 80052b2:	bf00      	nop
    }

    if (pclk != 0U)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d018      	beq.n	80052ec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	085a      	lsrs	r2, r3, #1
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	441a      	add	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b0f      	cmp	r3, #15
 80052d4:	d908      	bls.n	80052e8 <UART_SetConfig+0x4f4>
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052dc:	d204      	bcs.n	80052e8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	e001      	b.n	80052ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bdb0      	pop	{r4, r5, r7, pc}
 8005302:	bf00      	nop
 8005304:	00f42400 	.word	0x00f42400

08005308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01a      	beq.n	800541e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005406:	d10a      	bne.n	800541e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af02      	add	r7, sp, #8
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800545c:	f7fc fbb4 	bl	8001bc8 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d10e      	bne.n	800548e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f82d 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e023      	b.n	80054d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d10e      	bne.n	80054ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f817 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e00d      	b.n	80054d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	e05e      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d05a      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f8:	f7fc fb66 	bl	8001bc8 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <UART_WaitOnFlagUntilTimeout+0x30>
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11b      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800551c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e043      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d02c      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800555e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005562:	d124      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800556c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800557c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e00f      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d091      	beq.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <__errno>:
 80055d8:	4b01      	ldr	r3, [pc, #4]	; (80055e0 <__errno+0x8>)
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000014 	.word	0x20000014

080055e4 <__libc_init_array>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	4d0d      	ldr	r5, [pc, #52]	; (800561c <__libc_init_array+0x38>)
 80055e8:	4c0d      	ldr	r4, [pc, #52]	; (8005620 <__libc_init_array+0x3c>)
 80055ea:	1b64      	subs	r4, r4, r5
 80055ec:	10a4      	asrs	r4, r4, #2
 80055ee:	2600      	movs	r6, #0
 80055f0:	42a6      	cmp	r6, r4
 80055f2:	d109      	bne.n	8005608 <__libc_init_array+0x24>
 80055f4:	4d0b      	ldr	r5, [pc, #44]	; (8005624 <__libc_init_array+0x40>)
 80055f6:	4c0c      	ldr	r4, [pc, #48]	; (8005628 <__libc_init_array+0x44>)
 80055f8:	f001 f9c6 	bl	8006988 <_init>
 80055fc:	1b64      	subs	r4, r4, r5
 80055fe:	10a4      	asrs	r4, r4, #2
 8005600:	2600      	movs	r6, #0
 8005602:	42a6      	cmp	r6, r4
 8005604:	d105      	bne.n	8005612 <__libc_init_array+0x2e>
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	f855 3b04 	ldr.w	r3, [r5], #4
 800560c:	4798      	blx	r3
 800560e:	3601      	adds	r6, #1
 8005610:	e7ee      	b.n	80055f0 <__libc_init_array+0xc>
 8005612:	f855 3b04 	ldr.w	r3, [r5], #4
 8005616:	4798      	blx	r3
 8005618:	3601      	adds	r6, #1
 800561a:	e7f2      	b.n	8005602 <__libc_init_array+0x1e>
 800561c:	08007f18 	.word	0x08007f18
 8005620:	08007f18 	.word	0x08007f18
 8005624:	08007f18 	.word	0x08007f18
 8005628:	08007f1c 	.word	0x08007f1c

0800562c <malloc>:
 800562c:	4b02      	ldr	r3, [pc, #8]	; (8005638 <malloc+0xc>)
 800562e:	4601      	mov	r1, r0
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	f000 b85b 	b.w	80056ec <_malloc_r>
 8005636:	bf00      	nop
 8005638:	20000014 	.word	0x20000014

0800563c <memset>:
 800563c:	4402      	add	r2, r0
 800563e:	4603      	mov	r3, r0
 8005640:	4293      	cmp	r3, r2
 8005642:	d100      	bne.n	8005646 <memset+0xa>
 8005644:	4770      	bx	lr
 8005646:	f803 1b01 	strb.w	r1, [r3], #1
 800564a:	e7f9      	b.n	8005640 <memset+0x4>

0800564c <_free_r>:
 800564c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800564e:	2900      	cmp	r1, #0
 8005650:	d048      	beq.n	80056e4 <_free_r+0x98>
 8005652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005656:	9001      	str	r0, [sp, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f1a1 0404 	sub.w	r4, r1, #4
 800565e:	bfb8      	it	lt
 8005660:	18e4      	addlt	r4, r4, r3
 8005662:	f000 fc39 	bl	8005ed8 <__malloc_lock>
 8005666:	4a20      	ldr	r2, [pc, #128]	; (80056e8 <_free_r+0x9c>)
 8005668:	9801      	ldr	r0, [sp, #4]
 800566a:	6813      	ldr	r3, [r2, #0]
 800566c:	4615      	mov	r5, r2
 800566e:	b933      	cbnz	r3, 800567e <_free_r+0x32>
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	6014      	str	r4, [r2, #0]
 8005674:	b003      	add	sp, #12
 8005676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800567a:	f000 bc33 	b.w	8005ee4 <__malloc_unlock>
 800567e:	42a3      	cmp	r3, r4
 8005680:	d90b      	bls.n	800569a <_free_r+0x4e>
 8005682:	6821      	ldr	r1, [r4, #0]
 8005684:	1862      	adds	r2, r4, r1
 8005686:	4293      	cmp	r3, r2
 8005688:	bf04      	itt	eq
 800568a:	681a      	ldreq	r2, [r3, #0]
 800568c:	685b      	ldreq	r3, [r3, #4]
 800568e:	6063      	str	r3, [r4, #4]
 8005690:	bf04      	itt	eq
 8005692:	1852      	addeq	r2, r2, r1
 8005694:	6022      	streq	r2, [r4, #0]
 8005696:	602c      	str	r4, [r5, #0]
 8005698:	e7ec      	b.n	8005674 <_free_r+0x28>
 800569a:	461a      	mov	r2, r3
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b10b      	cbz	r3, 80056a4 <_free_r+0x58>
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	d9fa      	bls.n	800569a <_free_r+0x4e>
 80056a4:	6811      	ldr	r1, [r2, #0]
 80056a6:	1855      	adds	r5, r2, r1
 80056a8:	42a5      	cmp	r5, r4
 80056aa:	d10b      	bne.n	80056c4 <_free_r+0x78>
 80056ac:	6824      	ldr	r4, [r4, #0]
 80056ae:	4421      	add	r1, r4
 80056b0:	1854      	adds	r4, r2, r1
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	6011      	str	r1, [r2, #0]
 80056b6:	d1dd      	bne.n	8005674 <_free_r+0x28>
 80056b8:	681c      	ldr	r4, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	6053      	str	r3, [r2, #4]
 80056be:	4421      	add	r1, r4
 80056c0:	6011      	str	r1, [r2, #0]
 80056c2:	e7d7      	b.n	8005674 <_free_r+0x28>
 80056c4:	d902      	bls.n	80056cc <_free_r+0x80>
 80056c6:	230c      	movs	r3, #12
 80056c8:	6003      	str	r3, [r0, #0]
 80056ca:	e7d3      	b.n	8005674 <_free_r+0x28>
 80056cc:	6825      	ldr	r5, [r4, #0]
 80056ce:	1961      	adds	r1, r4, r5
 80056d0:	428b      	cmp	r3, r1
 80056d2:	bf04      	itt	eq
 80056d4:	6819      	ldreq	r1, [r3, #0]
 80056d6:	685b      	ldreq	r3, [r3, #4]
 80056d8:	6063      	str	r3, [r4, #4]
 80056da:	bf04      	itt	eq
 80056dc:	1949      	addeq	r1, r1, r5
 80056de:	6021      	streq	r1, [r4, #0]
 80056e0:	6054      	str	r4, [r2, #4]
 80056e2:	e7c7      	b.n	8005674 <_free_r+0x28>
 80056e4:	b003      	add	sp, #12
 80056e6:	bd30      	pop	{r4, r5, pc}
 80056e8:	20000098 	.word	0x20000098

080056ec <_malloc_r>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	1ccd      	adds	r5, r1, #3
 80056f0:	f025 0503 	bic.w	r5, r5, #3
 80056f4:	3508      	adds	r5, #8
 80056f6:	2d0c      	cmp	r5, #12
 80056f8:	bf38      	it	cc
 80056fa:	250c      	movcc	r5, #12
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	4606      	mov	r6, r0
 8005700:	db01      	blt.n	8005706 <_malloc_r+0x1a>
 8005702:	42a9      	cmp	r1, r5
 8005704:	d903      	bls.n	800570e <_malloc_r+0x22>
 8005706:	230c      	movs	r3, #12
 8005708:	6033      	str	r3, [r6, #0]
 800570a:	2000      	movs	r0, #0
 800570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800570e:	f000 fbe3 	bl	8005ed8 <__malloc_lock>
 8005712:	4921      	ldr	r1, [pc, #132]	; (8005798 <_malloc_r+0xac>)
 8005714:	680a      	ldr	r2, [r1, #0]
 8005716:	4614      	mov	r4, r2
 8005718:	b99c      	cbnz	r4, 8005742 <_malloc_r+0x56>
 800571a:	4f20      	ldr	r7, [pc, #128]	; (800579c <_malloc_r+0xb0>)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	b923      	cbnz	r3, 800572a <_malloc_r+0x3e>
 8005720:	4621      	mov	r1, r4
 8005722:	4630      	mov	r0, r6
 8005724:	f000 f8ca 	bl	80058bc <_sbrk_r>
 8005728:	6038      	str	r0, [r7, #0]
 800572a:	4629      	mov	r1, r5
 800572c:	4630      	mov	r0, r6
 800572e:	f000 f8c5 	bl	80058bc <_sbrk_r>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d123      	bne.n	800577e <_malloc_r+0x92>
 8005736:	230c      	movs	r3, #12
 8005738:	6033      	str	r3, [r6, #0]
 800573a:	4630      	mov	r0, r6
 800573c:	f000 fbd2 	bl	8005ee4 <__malloc_unlock>
 8005740:	e7e3      	b.n	800570a <_malloc_r+0x1e>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	1b5b      	subs	r3, r3, r5
 8005746:	d417      	bmi.n	8005778 <_malloc_r+0x8c>
 8005748:	2b0b      	cmp	r3, #11
 800574a:	d903      	bls.n	8005754 <_malloc_r+0x68>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	441c      	add	r4, r3
 8005750:	6025      	str	r5, [r4, #0]
 8005752:	e004      	b.n	800575e <_malloc_r+0x72>
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	42a2      	cmp	r2, r4
 8005758:	bf0c      	ite	eq
 800575a:	600b      	streq	r3, [r1, #0]
 800575c:	6053      	strne	r3, [r2, #4]
 800575e:	4630      	mov	r0, r6
 8005760:	f000 fbc0 	bl	8005ee4 <__malloc_unlock>
 8005764:	f104 000b 	add.w	r0, r4, #11
 8005768:	1d23      	adds	r3, r4, #4
 800576a:	f020 0007 	bic.w	r0, r0, #7
 800576e:	1ac2      	subs	r2, r0, r3
 8005770:	d0cc      	beq.n	800570c <_malloc_r+0x20>
 8005772:	1a1b      	subs	r3, r3, r0
 8005774:	50a3      	str	r3, [r4, r2]
 8005776:	e7c9      	b.n	800570c <_malloc_r+0x20>
 8005778:	4622      	mov	r2, r4
 800577a:	6864      	ldr	r4, [r4, #4]
 800577c:	e7cc      	b.n	8005718 <_malloc_r+0x2c>
 800577e:	1cc4      	adds	r4, r0, #3
 8005780:	f024 0403 	bic.w	r4, r4, #3
 8005784:	42a0      	cmp	r0, r4
 8005786:	d0e3      	beq.n	8005750 <_malloc_r+0x64>
 8005788:	1a21      	subs	r1, r4, r0
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f896 	bl	80058bc <_sbrk_r>
 8005790:	3001      	adds	r0, #1
 8005792:	d1dd      	bne.n	8005750 <_malloc_r+0x64>
 8005794:	e7cf      	b.n	8005736 <_malloc_r+0x4a>
 8005796:	bf00      	nop
 8005798:	20000098 	.word	0x20000098
 800579c:	2000009c 	.word	0x2000009c

080057a0 <iprintf>:
 80057a0:	b40f      	push	{r0, r1, r2, r3}
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <iprintf+0x2c>)
 80057a4:	b513      	push	{r0, r1, r4, lr}
 80057a6:	681c      	ldr	r4, [r3, #0]
 80057a8:	b124      	cbz	r4, 80057b4 <iprintf+0x14>
 80057aa:	69a3      	ldr	r3, [r4, #24]
 80057ac:	b913      	cbnz	r3, 80057b4 <iprintf+0x14>
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 fa8e 	bl	8005cd0 <__sinit>
 80057b4:	ab05      	add	r3, sp, #20
 80057b6:	9a04      	ldr	r2, [sp, #16]
 80057b8:	68a1      	ldr	r1, [r4, #8]
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 fd1d 	bl	80061fc <_vfiprintf_r>
 80057c2:	b002      	add	sp, #8
 80057c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c8:	b004      	add	sp, #16
 80057ca:	4770      	bx	lr
 80057cc:	20000014 	.word	0x20000014

080057d0 <_puts_r>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	460e      	mov	r6, r1
 80057d4:	4605      	mov	r5, r0
 80057d6:	b118      	cbz	r0, 80057e0 <_puts_r+0x10>
 80057d8:	6983      	ldr	r3, [r0, #24]
 80057da:	b90b      	cbnz	r3, 80057e0 <_puts_r+0x10>
 80057dc:	f000 fa78 	bl	8005cd0 <__sinit>
 80057e0:	69ab      	ldr	r3, [r5, #24]
 80057e2:	68ac      	ldr	r4, [r5, #8]
 80057e4:	b913      	cbnz	r3, 80057ec <_puts_r+0x1c>
 80057e6:	4628      	mov	r0, r5
 80057e8:	f000 fa72 	bl	8005cd0 <__sinit>
 80057ec:	4b2c      	ldr	r3, [pc, #176]	; (80058a0 <_puts_r+0xd0>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d120      	bne.n	8005834 <_puts_r+0x64>
 80057f2:	686c      	ldr	r4, [r5, #4]
 80057f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057f6:	07db      	lsls	r3, r3, #31
 80057f8:	d405      	bmi.n	8005806 <_puts_r+0x36>
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	0598      	lsls	r0, r3, #22
 80057fe:	d402      	bmi.n	8005806 <_puts_r+0x36>
 8005800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005802:	f000 fb03 	bl	8005e0c <__retarget_lock_acquire_recursive>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	0719      	lsls	r1, r3, #28
 800580a:	d51d      	bpl.n	8005848 <_puts_r+0x78>
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	b1db      	cbz	r3, 8005848 <_puts_r+0x78>
 8005810:	3e01      	subs	r6, #1
 8005812:	68a3      	ldr	r3, [r4, #8]
 8005814:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005818:	3b01      	subs	r3, #1
 800581a:	60a3      	str	r3, [r4, #8]
 800581c:	bb39      	cbnz	r1, 800586e <_puts_r+0x9e>
 800581e:	2b00      	cmp	r3, #0
 8005820:	da38      	bge.n	8005894 <_puts_r+0xc4>
 8005822:	4622      	mov	r2, r4
 8005824:	210a      	movs	r1, #10
 8005826:	4628      	mov	r0, r5
 8005828:	f000 f878 	bl	800591c <__swbuf_r>
 800582c:	3001      	adds	r0, #1
 800582e:	d011      	beq.n	8005854 <_puts_r+0x84>
 8005830:	250a      	movs	r5, #10
 8005832:	e011      	b.n	8005858 <_puts_r+0x88>
 8005834:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <_puts_r+0xd4>)
 8005836:	429c      	cmp	r4, r3
 8005838:	d101      	bne.n	800583e <_puts_r+0x6e>
 800583a:	68ac      	ldr	r4, [r5, #8]
 800583c:	e7da      	b.n	80057f4 <_puts_r+0x24>
 800583e:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <_puts_r+0xd8>)
 8005840:	429c      	cmp	r4, r3
 8005842:	bf08      	it	eq
 8005844:	68ec      	ldreq	r4, [r5, #12]
 8005846:	e7d5      	b.n	80057f4 <_puts_r+0x24>
 8005848:	4621      	mov	r1, r4
 800584a:	4628      	mov	r0, r5
 800584c:	f000 f8b8 	bl	80059c0 <__swsetup_r>
 8005850:	2800      	cmp	r0, #0
 8005852:	d0dd      	beq.n	8005810 <_puts_r+0x40>
 8005854:	f04f 35ff 	mov.w	r5, #4294967295
 8005858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800585a:	07da      	lsls	r2, r3, #31
 800585c:	d405      	bmi.n	800586a <_puts_r+0x9a>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	059b      	lsls	r3, r3, #22
 8005862:	d402      	bmi.n	800586a <_puts_r+0x9a>
 8005864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005866:	f000 fad2 	bl	8005e0e <__retarget_lock_release_recursive>
 800586a:	4628      	mov	r0, r5
 800586c:	bd70      	pop	{r4, r5, r6, pc}
 800586e:	2b00      	cmp	r3, #0
 8005870:	da04      	bge.n	800587c <_puts_r+0xac>
 8005872:	69a2      	ldr	r2, [r4, #24]
 8005874:	429a      	cmp	r2, r3
 8005876:	dc06      	bgt.n	8005886 <_puts_r+0xb6>
 8005878:	290a      	cmp	r1, #10
 800587a:	d004      	beq.n	8005886 <_puts_r+0xb6>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	6022      	str	r2, [r4, #0]
 8005882:	7019      	strb	r1, [r3, #0]
 8005884:	e7c5      	b.n	8005812 <_puts_r+0x42>
 8005886:	4622      	mov	r2, r4
 8005888:	4628      	mov	r0, r5
 800588a:	f000 f847 	bl	800591c <__swbuf_r>
 800588e:	3001      	adds	r0, #1
 8005890:	d1bf      	bne.n	8005812 <_puts_r+0x42>
 8005892:	e7df      	b.n	8005854 <_puts_r+0x84>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	250a      	movs	r5, #10
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	701d      	strb	r5, [r3, #0]
 800589e:	e7db      	b.n	8005858 <_puts_r+0x88>
 80058a0:	08007e9c 	.word	0x08007e9c
 80058a4:	08007ebc 	.word	0x08007ebc
 80058a8:	08007e7c 	.word	0x08007e7c

080058ac <puts>:
 80058ac:	4b02      	ldr	r3, [pc, #8]	; (80058b8 <puts+0xc>)
 80058ae:	4601      	mov	r1, r0
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	f7ff bf8d 	b.w	80057d0 <_puts_r>
 80058b6:	bf00      	nop
 80058b8:	20000014 	.word	0x20000014

080058bc <_sbrk_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d06      	ldr	r5, [pc, #24]	; (80058d8 <_sbrk_r+0x1c>)
 80058c0:	2300      	movs	r3, #0
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	602b      	str	r3, [r5, #0]
 80058c8:	f7fc f87c 	bl	80019c4 <_sbrk>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_sbrk_r+0x1a>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_sbrk_r+0x1a>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	2000021c 	.word	0x2000021c

080058dc <siprintf>:
 80058dc:	b40e      	push	{r1, r2, r3}
 80058de:	b500      	push	{lr}
 80058e0:	b09c      	sub	sp, #112	; 0x70
 80058e2:	ab1d      	add	r3, sp, #116	; 0x74
 80058e4:	9002      	str	r0, [sp, #8]
 80058e6:	9006      	str	r0, [sp, #24]
 80058e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058ec:	4809      	ldr	r0, [pc, #36]	; (8005914 <siprintf+0x38>)
 80058ee:	9107      	str	r1, [sp, #28]
 80058f0:	9104      	str	r1, [sp, #16]
 80058f2:	4909      	ldr	r1, [pc, #36]	; (8005918 <siprintf+0x3c>)
 80058f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f8:	9105      	str	r1, [sp, #20]
 80058fa:	6800      	ldr	r0, [r0, #0]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	a902      	add	r1, sp, #8
 8005900:	f000 fb52 	bl	8005fa8 <_svfiprintf_r>
 8005904:	9b02      	ldr	r3, [sp, #8]
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	b01c      	add	sp, #112	; 0x70
 800590c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005910:	b003      	add	sp, #12
 8005912:	4770      	bx	lr
 8005914:	20000014 	.word	0x20000014
 8005918:	ffff0208 	.word	0xffff0208

0800591c <__swbuf_r>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	460e      	mov	r6, r1
 8005920:	4614      	mov	r4, r2
 8005922:	4605      	mov	r5, r0
 8005924:	b118      	cbz	r0, 800592e <__swbuf_r+0x12>
 8005926:	6983      	ldr	r3, [r0, #24]
 8005928:	b90b      	cbnz	r3, 800592e <__swbuf_r+0x12>
 800592a:	f000 f9d1 	bl	8005cd0 <__sinit>
 800592e:	4b21      	ldr	r3, [pc, #132]	; (80059b4 <__swbuf_r+0x98>)
 8005930:	429c      	cmp	r4, r3
 8005932:	d12b      	bne.n	800598c <__swbuf_r+0x70>
 8005934:	686c      	ldr	r4, [r5, #4]
 8005936:	69a3      	ldr	r3, [r4, #24]
 8005938:	60a3      	str	r3, [r4, #8]
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	071a      	lsls	r2, r3, #28
 800593e:	d52f      	bpl.n	80059a0 <__swbuf_r+0x84>
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	b36b      	cbz	r3, 80059a0 <__swbuf_r+0x84>
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	1ac0      	subs	r0, r0, r3
 800594a:	6963      	ldr	r3, [r4, #20]
 800594c:	b2f6      	uxtb	r6, r6
 800594e:	4283      	cmp	r3, r0
 8005950:	4637      	mov	r7, r6
 8005952:	dc04      	bgt.n	800595e <__swbuf_r+0x42>
 8005954:	4621      	mov	r1, r4
 8005956:	4628      	mov	r0, r5
 8005958:	f000 f926 	bl	8005ba8 <_fflush_r>
 800595c:	bb30      	cbnz	r0, 80059ac <__swbuf_r+0x90>
 800595e:	68a3      	ldr	r3, [r4, #8]
 8005960:	3b01      	subs	r3, #1
 8005962:	60a3      	str	r3, [r4, #8]
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	6022      	str	r2, [r4, #0]
 800596a:	701e      	strb	r6, [r3, #0]
 800596c:	6963      	ldr	r3, [r4, #20]
 800596e:	3001      	adds	r0, #1
 8005970:	4283      	cmp	r3, r0
 8005972:	d004      	beq.n	800597e <__swbuf_r+0x62>
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	07db      	lsls	r3, r3, #31
 8005978:	d506      	bpl.n	8005988 <__swbuf_r+0x6c>
 800597a:	2e0a      	cmp	r6, #10
 800597c:	d104      	bne.n	8005988 <__swbuf_r+0x6c>
 800597e:	4621      	mov	r1, r4
 8005980:	4628      	mov	r0, r5
 8005982:	f000 f911 	bl	8005ba8 <_fflush_r>
 8005986:	b988      	cbnz	r0, 80059ac <__swbuf_r+0x90>
 8005988:	4638      	mov	r0, r7
 800598a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <__swbuf_r+0x9c>)
 800598e:	429c      	cmp	r4, r3
 8005990:	d101      	bne.n	8005996 <__swbuf_r+0x7a>
 8005992:	68ac      	ldr	r4, [r5, #8]
 8005994:	e7cf      	b.n	8005936 <__swbuf_r+0x1a>
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <__swbuf_r+0xa0>)
 8005998:	429c      	cmp	r4, r3
 800599a:	bf08      	it	eq
 800599c:	68ec      	ldreq	r4, [r5, #12]
 800599e:	e7ca      	b.n	8005936 <__swbuf_r+0x1a>
 80059a0:	4621      	mov	r1, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	f000 f80c 	bl	80059c0 <__swsetup_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d0cb      	beq.n	8005944 <__swbuf_r+0x28>
 80059ac:	f04f 37ff 	mov.w	r7, #4294967295
 80059b0:	e7ea      	b.n	8005988 <__swbuf_r+0x6c>
 80059b2:	bf00      	nop
 80059b4:	08007e9c 	.word	0x08007e9c
 80059b8:	08007ebc 	.word	0x08007ebc
 80059bc:	08007e7c 	.word	0x08007e7c

080059c0 <__swsetup_r>:
 80059c0:	4b32      	ldr	r3, [pc, #200]	; (8005a8c <__swsetup_r+0xcc>)
 80059c2:	b570      	push	{r4, r5, r6, lr}
 80059c4:	681d      	ldr	r5, [r3, #0]
 80059c6:	4606      	mov	r6, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	b125      	cbz	r5, 80059d6 <__swsetup_r+0x16>
 80059cc:	69ab      	ldr	r3, [r5, #24]
 80059ce:	b913      	cbnz	r3, 80059d6 <__swsetup_r+0x16>
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 f97d 	bl	8005cd0 <__sinit>
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <__swsetup_r+0xd0>)
 80059d8:	429c      	cmp	r4, r3
 80059da:	d10f      	bne.n	80059fc <__swsetup_r+0x3c>
 80059dc:	686c      	ldr	r4, [r5, #4]
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059e4:	0719      	lsls	r1, r3, #28
 80059e6:	d42c      	bmi.n	8005a42 <__swsetup_r+0x82>
 80059e8:	06dd      	lsls	r5, r3, #27
 80059ea:	d411      	bmi.n	8005a10 <__swsetup_r+0x50>
 80059ec:	2309      	movs	r3, #9
 80059ee:	6033      	str	r3, [r6, #0]
 80059f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	e03e      	b.n	8005a7a <__swsetup_r+0xba>
 80059fc:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <__swsetup_r+0xd4>)
 80059fe:	429c      	cmp	r4, r3
 8005a00:	d101      	bne.n	8005a06 <__swsetup_r+0x46>
 8005a02:	68ac      	ldr	r4, [r5, #8]
 8005a04:	e7eb      	b.n	80059de <__swsetup_r+0x1e>
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <__swsetup_r+0xd8>)
 8005a08:	429c      	cmp	r4, r3
 8005a0a:	bf08      	it	eq
 8005a0c:	68ec      	ldreq	r4, [r5, #12]
 8005a0e:	e7e6      	b.n	80059de <__swsetup_r+0x1e>
 8005a10:	0758      	lsls	r0, r3, #29
 8005a12:	d512      	bpl.n	8005a3a <__swsetup_r+0x7a>
 8005a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a16:	b141      	cbz	r1, 8005a2a <__swsetup_r+0x6a>
 8005a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	d002      	beq.n	8005a26 <__swsetup_r+0x66>
 8005a20:	4630      	mov	r0, r6
 8005a22:	f7ff fe13 	bl	800564c <_free_r>
 8005a26:	2300      	movs	r3, #0
 8005a28:	6363      	str	r3, [r4, #52]	; 0x34
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	2300      	movs	r3, #0
 8005a34:	6063      	str	r3, [r4, #4]
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	f043 0308 	orr.w	r3, r3, #8
 8005a40:	81a3      	strh	r3, [r4, #12]
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	b94b      	cbnz	r3, 8005a5a <__swsetup_r+0x9a>
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a50:	d003      	beq.n	8005a5a <__swsetup_r+0x9a>
 8005a52:	4621      	mov	r1, r4
 8005a54:	4630      	mov	r0, r6
 8005a56:	f000 f9ff 	bl	8005e58 <__smakebuf_r>
 8005a5a:	89a0      	ldrh	r0, [r4, #12]
 8005a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a60:	f010 0301 	ands.w	r3, r0, #1
 8005a64:	d00a      	beq.n	8005a7c <__swsetup_r+0xbc>
 8005a66:	2300      	movs	r3, #0
 8005a68:	60a3      	str	r3, [r4, #8]
 8005a6a:	6963      	ldr	r3, [r4, #20]
 8005a6c:	425b      	negs	r3, r3
 8005a6e:	61a3      	str	r3, [r4, #24]
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	b943      	cbnz	r3, 8005a86 <__swsetup_r+0xc6>
 8005a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a78:	d1ba      	bne.n	80059f0 <__swsetup_r+0x30>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	0781      	lsls	r1, r0, #30
 8005a7e:	bf58      	it	pl
 8005a80:	6963      	ldrpl	r3, [r4, #20]
 8005a82:	60a3      	str	r3, [r4, #8]
 8005a84:	e7f4      	b.n	8005a70 <__swsetup_r+0xb0>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e7f7      	b.n	8005a7a <__swsetup_r+0xba>
 8005a8a:	bf00      	nop
 8005a8c:	20000014 	.word	0x20000014
 8005a90:	08007e9c 	.word	0x08007e9c
 8005a94:	08007ebc 	.word	0x08007ebc
 8005a98:	08007e7c 	.word	0x08007e7c

08005a9c <__sflush_r>:
 8005a9c:	898a      	ldrh	r2, [r1, #12]
 8005a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	0710      	lsls	r0, r2, #28
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	d458      	bmi.n	8005b5c <__sflush_r+0xc0>
 8005aaa:	684b      	ldr	r3, [r1, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dc05      	bgt.n	8005abc <__sflush_r+0x20>
 8005ab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dc02      	bgt.n	8005abc <__sflush_r+0x20>
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005abe:	2e00      	cmp	r6, #0
 8005ac0:	d0f9      	beq.n	8005ab6 <__sflush_r+0x1a>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ac8:	682f      	ldr	r7, [r5, #0]
 8005aca:	602b      	str	r3, [r5, #0]
 8005acc:	d032      	beq.n	8005b34 <__sflush_r+0x98>
 8005ace:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	075a      	lsls	r2, r3, #29
 8005ad4:	d505      	bpl.n	8005ae2 <__sflush_r+0x46>
 8005ad6:	6863      	ldr	r3, [r4, #4]
 8005ad8:	1ac0      	subs	r0, r0, r3
 8005ada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005adc:	b10b      	cbz	r3, 8005ae2 <__sflush_r+0x46>
 8005ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ae0:	1ac0      	subs	r0, r0, r3
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ae8:	6a21      	ldr	r1, [r4, #32]
 8005aea:	4628      	mov	r0, r5
 8005aec:	47b0      	blx	r6
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	d106      	bne.n	8005b02 <__sflush_r+0x66>
 8005af4:	6829      	ldr	r1, [r5, #0]
 8005af6:	291d      	cmp	r1, #29
 8005af8:	d82c      	bhi.n	8005b54 <__sflush_r+0xb8>
 8005afa:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <__sflush_r+0x108>)
 8005afc:	40ca      	lsrs	r2, r1
 8005afe:	07d6      	lsls	r6, r2, #31
 8005b00:	d528      	bpl.n	8005b54 <__sflush_r+0xb8>
 8005b02:	2200      	movs	r2, #0
 8005b04:	6062      	str	r2, [r4, #4]
 8005b06:	04d9      	lsls	r1, r3, #19
 8005b08:	6922      	ldr	r2, [r4, #16]
 8005b0a:	6022      	str	r2, [r4, #0]
 8005b0c:	d504      	bpl.n	8005b18 <__sflush_r+0x7c>
 8005b0e:	1c42      	adds	r2, r0, #1
 8005b10:	d101      	bne.n	8005b16 <__sflush_r+0x7a>
 8005b12:	682b      	ldr	r3, [r5, #0]
 8005b14:	b903      	cbnz	r3, 8005b18 <__sflush_r+0x7c>
 8005b16:	6560      	str	r0, [r4, #84]	; 0x54
 8005b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b1a:	602f      	str	r7, [r5, #0]
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	d0ca      	beq.n	8005ab6 <__sflush_r+0x1a>
 8005b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d002      	beq.n	8005b2e <__sflush_r+0x92>
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f7ff fd8f 	bl	800564c <_free_r>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	6360      	str	r0, [r4, #52]	; 0x34
 8005b32:	e7c1      	b.n	8005ab8 <__sflush_r+0x1c>
 8005b34:	6a21      	ldr	r1, [r4, #32]
 8005b36:	2301      	movs	r3, #1
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b0      	blx	r6
 8005b3c:	1c41      	adds	r1, r0, #1
 8005b3e:	d1c7      	bne.n	8005ad0 <__sflush_r+0x34>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0c4      	beq.n	8005ad0 <__sflush_r+0x34>
 8005b46:	2b1d      	cmp	r3, #29
 8005b48:	d001      	beq.n	8005b4e <__sflush_r+0xb2>
 8005b4a:	2b16      	cmp	r3, #22
 8005b4c:	d101      	bne.n	8005b52 <__sflush_r+0xb6>
 8005b4e:	602f      	str	r7, [r5, #0]
 8005b50:	e7b1      	b.n	8005ab6 <__sflush_r+0x1a>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	e7ad      	b.n	8005ab8 <__sflush_r+0x1c>
 8005b5c:	690f      	ldr	r7, [r1, #16]
 8005b5e:	2f00      	cmp	r7, #0
 8005b60:	d0a9      	beq.n	8005ab6 <__sflush_r+0x1a>
 8005b62:	0793      	lsls	r3, r2, #30
 8005b64:	680e      	ldr	r6, [r1, #0]
 8005b66:	bf08      	it	eq
 8005b68:	694b      	ldreq	r3, [r1, #20]
 8005b6a:	600f      	str	r7, [r1, #0]
 8005b6c:	bf18      	it	ne
 8005b6e:	2300      	movne	r3, #0
 8005b70:	eba6 0807 	sub.w	r8, r6, r7
 8005b74:	608b      	str	r3, [r1, #8]
 8005b76:	f1b8 0f00 	cmp.w	r8, #0
 8005b7a:	dd9c      	ble.n	8005ab6 <__sflush_r+0x1a>
 8005b7c:	6a21      	ldr	r1, [r4, #32]
 8005b7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b80:	4643      	mov	r3, r8
 8005b82:	463a      	mov	r2, r7
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b0      	blx	r6
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	dc06      	bgt.n	8005b9a <__sflush_r+0xfe>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e78e      	b.n	8005ab8 <__sflush_r+0x1c>
 8005b9a:	4407      	add	r7, r0
 8005b9c:	eba8 0800 	sub.w	r8, r8, r0
 8005ba0:	e7e9      	b.n	8005b76 <__sflush_r+0xda>
 8005ba2:	bf00      	nop
 8005ba4:	20400001 	.word	0x20400001

08005ba8 <_fflush_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	690b      	ldr	r3, [r1, #16]
 8005bac:	4605      	mov	r5, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	b913      	cbnz	r3, 8005bb8 <_fflush_r+0x10>
 8005bb2:	2500      	movs	r5, #0
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	b118      	cbz	r0, 8005bc2 <_fflush_r+0x1a>
 8005bba:	6983      	ldr	r3, [r0, #24]
 8005bbc:	b90b      	cbnz	r3, 8005bc2 <_fflush_r+0x1a>
 8005bbe:	f000 f887 	bl	8005cd0 <__sinit>
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <_fflush_r+0x6c>)
 8005bc4:	429c      	cmp	r4, r3
 8005bc6:	d11b      	bne.n	8005c00 <_fflush_r+0x58>
 8005bc8:	686c      	ldr	r4, [r5, #4]
 8005bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0ef      	beq.n	8005bb2 <_fflush_r+0xa>
 8005bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bd4:	07d0      	lsls	r0, r2, #31
 8005bd6:	d404      	bmi.n	8005be2 <_fflush_r+0x3a>
 8005bd8:	0599      	lsls	r1, r3, #22
 8005bda:	d402      	bmi.n	8005be2 <_fflush_r+0x3a>
 8005bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bde:	f000 f915 	bl	8005e0c <__retarget_lock_acquire_recursive>
 8005be2:	4628      	mov	r0, r5
 8005be4:	4621      	mov	r1, r4
 8005be6:	f7ff ff59 	bl	8005a9c <__sflush_r>
 8005bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bec:	07da      	lsls	r2, r3, #31
 8005bee:	4605      	mov	r5, r0
 8005bf0:	d4e0      	bmi.n	8005bb4 <_fflush_r+0xc>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	059b      	lsls	r3, r3, #22
 8005bf6:	d4dd      	bmi.n	8005bb4 <_fflush_r+0xc>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfa:	f000 f908 	bl	8005e0e <__retarget_lock_release_recursive>
 8005bfe:	e7d9      	b.n	8005bb4 <_fflush_r+0xc>
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <_fflush_r+0x70>)
 8005c02:	429c      	cmp	r4, r3
 8005c04:	d101      	bne.n	8005c0a <_fflush_r+0x62>
 8005c06:	68ac      	ldr	r4, [r5, #8]
 8005c08:	e7df      	b.n	8005bca <_fflush_r+0x22>
 8005c0a:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <_fflush_r+0x74>)
 8005c0c:	429c      	cmp	r4, r3
 8005c0e:	bf08      	it	eq
 8005c10:	68ec      	ldreq	r4, [r5, #12]
 8005c12:	e7da      	b.n	8005bca <_fflush_r+0x22>
 8005c14:	08007e9c 	.word	0x08007e9c
 8005c18:	08007ebc 	.word	0x08007ebc
 8005c1c:	08007e7c 	.word	0x08007e7c

08005c20 <std>:
 8005c20:	2300      	movs	r3, #0
 8005c22:	b510      	push	{r4, lr}
 8005c24:	4604      	mov	r4, r0
 8005c26:	e9c0 3300 	strd	r3, r3, [r0]
 8005c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c2e:	6083      	str	r3, [r0, #8]
 8005c30:	8181      	strh	r1, [r0, #12]
 8005c32:	6643      	str	r3, [r0, #100]	; 0x64
 8005c34:	81c2      	strh	r2, [r0, #14]
 8005c36:	6183      	str	r3, [r0, #24]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	305c      	adds	r0, #92	; 0x5c
 8005c3e:	f7ff fcfd 	bl	800563c <memset>
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <std+0x38>)
 8005c44:	6263      	str	r3, [r4, #36]	; 0x24
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <std+0x3c>)
 8005c48:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <std+0x40>)
 8005c4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c4e:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <std+0x44>)
 8005c50:	6224      	str	r4, [r4, #32]
 8005c52:	6323      	str	r3, [r4, #48]	; 0x30
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	bf00      	nop
 8005c58:	08006785 	.word	0x08006785
 8005c5c:	080067a7 	.word	0x080067a7
 8005c60:	080067df 	.word	0x080067df
 8005c64:	08006803 	.word	0x08006803

08005c68 <_cleanup_r>:
 8005c68:	4901      	ldr	r1, [pc, #4]	; (8005c70 <_cleanup_r+0x8>)
 8005c6a:	f000 b8af 	b.w	8005dcc <_fwalk_reent>
 8005c6e:	bf00      	nop
 8005c70:	08005ba9 	.word	0x08005ba9

08005c74 <__sfmoreglue>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	1e4a      	subs	r2, r1, #1
 8005c78:	2568      	movs	r5, #104	; 0x68
 8005c7a:	4355      	muls	r5, r2
 8005c7c:	460e      	mov	r6, r1
 8005c7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c82:	f7ff fd33 	bl	80056ec <_malloc_r>
 8005c86:	4604      	mov	r4, r0
 8005c88:	b140      	cbz	r0, 8005c9c <__sfmoreglue+0x28>
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c90:	300c      	adds	r0, #12
 8005c92:	60a0      	str	r0, [r4, #8]
 8005c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c98:	f7ff fcd0 	bl	800563c <memset>
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}

08005ca0 <__sfp_lock_acquire>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__sfp_lock_acquire+0x8>)
 8005ca2:	f000 b8b3 	b.w	8005e0c <__retarget_lock_acquire_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20000218 	.word	0x20000218

08005cac <__sfp_lock_release>:
 8005cac:	4801      	ldr	r0, [pc, #4]	; (8005cb4 <__sfp_lock_release+0x8>)
 8005cae:	f000 b8ae 	b.w	8005e0e <__retarget_lock_release_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	20000218 	.word	0x20000218

08005cb8 <__sinit_lock_acquire>:
 8005cb8:	4801      	ldr	r0, [pc, #4]	; (8005cc0 <__sinit_lock_acquire+0x8>)
 8005cba:	f000 b8a7 	b.w	8005e0c <__retarget_lock_acquire_recursive>
 8005cbe:	bf00      	nop
 8005cc0:	20000213 	.word	0x20000213

08005cc4 <__sinit_lock_release>:
 8005cc4:	4801      	ldr	r0, [pc, #4]	; (8005ccc <__sinit_lock_release+0x8>)
 8005cc6:	f000 b8a2 	b.w	8005e0e <__retarget_lock_release_recursive>
 8005cca:	bf00      	nop
 8005ccc:	20000213 	.word	0x20000213

08005cd0 <__sinit>:
 8005cd0:	b510      	push	{r4, lr}
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	f7ff fff0 	bl	8005cb8 <__sinit_lock_acquire>
 8005cd8:	69a3      	ldr	r3, [r4, #24]
 8005cda:	b11b      	cbz	r3, 8005ce4 <__sinit+0x14>
 8005cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce0:	f7ff bff0 	b.w	8005cc4 <__sinit_lock_release>
 8005ce4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ce8:	6523      	str	r3, [r4, #80]	; 0x50
 8005cea:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <__sinit+0x68>)
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <__sinit+0x6c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cf2:	42a3      	cmp	r3, r4
 8005cf4:	bf04      	itt	eq
 8005cf6:	2301      	moveq	r3, #1
 8005cf8:	61a3      	streq	r3, [r4, #24]
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 f820 	bl	8005d40 <__sfp>
 8005d00:	6060      	str	r0, [r4, #4]
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 f81c 	bl	8005d40 <__sfp>
 8005d08:	60a0      	str	r0, [r4, #8]
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f000 f818 	bl	8005d40 <__sfp>
 8005d10:	2200      	movs	r2, #0
 8005d12:	60e0      	str	r0, [r4, #12]
 8005d14:	2104      	movs	r1, #4
 8005d16:	6860      	ldr	r0, [r4, #4]
 8005d18:	f7ff ff82 	bl	8005c20 <std>
 8005d1c:	68a0      	ldr	r0, [r4, #8]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	2109      	movs	r1, #9
 8005d22:	f7ff ff7d 	bl	8005c20 <std>
 8005d26:	68e0      	ldr	r0, [r4, #12]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	2112      	movs	r1, #18
 8005d2c:	f7ff ff78 	bl	8005c20 <std>
 8005d30:	2301      	movs	r3, #1
 8005d32:	61a3      	str	r3, [r4, #24]
 8005d34:	e7d2      	b.n	8005cdc <__sinit+0xc>
 8005d36:	bf00      	nop
 8005d38:	08007e78 	.word	0x08007e78
 8005d3c:	08005c69 	.word	0x08005c69

08005d40 <__sfp>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	4607      	mov	r7, r0
 8005d44:	f7ff ffac 	bl	8005ca0 <__sfp_lock_acquire>
 8005d48:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <__sfp+0x84>)
 8005d4a:	681e      	ldr	r6, [r3, #0]
 8005d4c:	69b3      	ldr	r3, [r6, #24]
 8005d4e:	b913      	cbnz	r3, 8005d56 <__sfp+0x16>
 8005d50:	4630      	mov	r0, r6
 8005d52:	f7ff ffbd 	bl	8005cd0 <__sinit>
 8005d56:	3648      	adds	r6, #72	; 0x48
 8005d58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	d503      	bpl.n	8005d68 <__sfp+0x28>
 8005d60:	6833      	ldr	r3, [r6, #0]
 8005d62:	b30b      	cbz	r3, 8005da8 <__sfp+0x68>
 8005d64:	6836      	ldr	r6, [r6, #0]
 8005d66:	e7f7      	b.n	8005d58 <__sfp+0x18>
 8005d68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d6c:	b9d5      	cbnz	r5, 8005da4 <__sfp+0x64>
 8005d6e:	4b16      	ldr	r3, [pc, #88]	; (8005dc8 <__sfp+0x88>)
 8005d70:	60e3      	str	r3, [r4, #12]
 8005d72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d76:	6665      	str	r5, [r4, #100]	; 0x64
 8005d78:	f000 f847 	bl	8005e0a <__retarget_lock_init_recursive>
 8005d7c:	f7ff ff96 	bl	8005cac <__sfp_lock_release>
 8005d80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d88:	6025      	str	r5, [r4, #0]
 8005d8a:	61a5      	str	r5, [r4, #24]
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d94:	f7ff fc52 	bl	800563c <memset>
 8005d98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005da0:	4620      	mov	r0, r4
 8005da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da4:	3468      	adds	r4, #104	; 0x68
 8005da6:	e7d9      	b.n	8005d5c <__sfp+0x1c>
 8005da8:	2104      	movs	r1, #4
 8005daa:	4638      	mov	r0, r7
 8005dac:	f7ff ff62 	bl	8005c74 <__sfmoreglue>
 8005db0:	4604      	mov	r4, r0
 8005db2:	6030      	str	r0, [r6, #0]
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d1d5      	bne.n	8005d64 <__sfp+0x24>
 8005db8:	f7ff ff78 	bl	8005cac <__sfp_lock_release>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	e7ee      	b.n	8005da0 <__sfp+0x60>
 8005dc2:	bf00      	nop
 8005dc4:	08007e78 	.word	0x08007e78
 8005dc8:	ffff0001 	.word	0xffff0001

08005dcc <_fwalk_reent>:
 8005dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	4688      	mov	r8, r1
 8005dd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dd8:	2700      	movs	r7, #0
 8005dda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dde:	f1b9 0901 	subs.w	r9, r9, #1
 8005de2:	d505      	bpl.n	8005df0 <_fwalk_reent+0x24>
 8005de4:	6824      	ldr	r4, [r4, #0]
 8005de6:	2c00      	cmp	r4, #0
 8005de8:	d1f7      	bne.n	8005dda <_fwalk_reent+0xe>
 8005dea:	4638      	mov	r0, r7
 8005dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005df0:	89ab      	ldrh	r3, [r5, #12]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d907      	bls.n	8005e06 <_fwalk_reent+0x3a>
 8005df6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	d003      	beq.n	8005e06 <_fwalk_reent+0x3a>
 8005dfe:	4629      	mov	r1, r5
 8005e00:	4630      	mov	r0, r6
 8005e02:	47c0      	blx	r8
 8005e04:	4307      	orrs	r7, r0
 8005e06:	3568      	adds	r5, #104	; 0x68
 8005e08:	e7e9      	b.n	8005dde <_fwalk_reent+0x12>

08005e0a <__retarget_lock_init_recursive>:
 8005e0a:	4770      	bx	lr

08005e0c <__retarget_lock_acquire_recursive>:
 8005e0c:	4770      	bx	lr

08005e0e <__retarget_lock_release_recursive>:
 8005e0e:	4770      	bx	lr

08005e10 <__swhatbuf_r>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	460e      	mov	r6, r1
 8005e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e18:	2900      	cmp	r1, #0
 8005e1a:	b096      	sub	sp, #88	; 0x58
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	461d      	mov	r5, r3
 8005e20:	da07      	bge.n	8005e32 <__swhatbuf_r+0x22>
 8005e22:	2300      	movs	r3, #0
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	89b3      	ldrh	r3, [r6, #12]
 8005e28:	061a      	lsls	r2, r3, #24
 8005e2a:	d410      	bmi.n	8005e4e <__swhatbuf_r+0x3e>
 8005e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e30:	e00e      	b.n	8005e50 <__swhatbuf_r+0x40>
 8005e32:	466a      	mov	r2, sp
 8005e34:	f000 fd0c 	bl	8006850 <_fstat_r>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	dbf2      	blt.n	8005e22 <__swhatbuf_r+0x12>
 8005e3c:	9a01      	ldr	r2, [sp, #4]
 8005e3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e46:	425a      	negs	r2, r3
 8005e48:	415a      	adcs	r2, r3
 8005e4a:	602a      	str	r2, [r5, #0]
 8005e4c:	e7ee      	b.n	8005e2c <__swhatbuf_r+0x1c>
 8005e4e:	2340      	movs	r3, #64	; 0x40
 8005e50:	2000      	movs	r0, #0
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	b016      	add	sp, #88	; 0x58
 8005e56:	bd70      	pop	{r4, r5, r6, pc}

08005e58 <__smakebuf_r>:
 8005e58:	898b      	ldrh	r3, [r1, #12]
 8005e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e5c:	079d      	lsls	r5, r3, #30
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	d507      	bpl.n	8005e74 <__smakebuf_r+0x1c>
 8005e64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	6163      	str	r3, [r4, #20]
 8005e70:	b002      	add	sp, #8
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	ab01      	add	r3, sp, #4
 8005e76:	466a      	mov	r2, sp
 8005e78:	f7ff ffca 	bl	8005e10 <__swhatbuf_r>
 8005e7c:	9900      	ldr	r1, [sp, #0]
 8005e7e:	4605      	mov	r5, r0
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff fc33 	bl	80056ec <_malloc_r>
 8005e86:	b948      	cbnz	r0, 8005e9c <__smakebuf_r+0x44>
 8005e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8c:	059a      	lsls	r2, r3, #22
 8005e8e:	d4ef      	bmi.n	8005e70 <__smakebuf_r+0x18>
 8005e90:	f023 0303 	bic.w	r3, r3, #3
 8005e94:	f043 0302 	orr.w	r3, r3, #2
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	e7e3      	b.n	8005e64 <__smakebuf_r+0xc>
 8005e9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <__smakebuf_r+0x7c>)
 8005e9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	6020      	str	r0, [r4, #0]
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	9b00      	ldr	r3, [sp, #0]
 8005eac:	6163      	str	r3, [r4, #20]
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	6120      	str	r0, [r4, #16]
 8005eb2:	b15b      	cbz	r3, 8005ecc <__smakebuf_r+0x74>
 8005eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 fcdb 	bl	8006874 <_isatty_r>
 8005ebe:	b128      	cbz	r0, 8005ecc <__smakebuf_r+0x74>
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	f043 0301 	orr.w	r3, r3, #1
 8005eca:	81a3      	strh	r3, [r4, #12]
 8005ecc:	89a0      	ldrh	r0, [r4, #12]
 8005ece:	4305      	orrs	r5, r0
 8005ed0:	81a5      	strh	r5, [r4, #12]
 8005ed2:	e7cd      	b.n	8005e70 <__smakebuf_r+0x18>
 8005ed4:	08005c69 	.word	0x08005c69

08005ed8 <__malloc_lock>:
 8005ed8:	4801      	ldr	r0, [pc, #4]	; (8005ee0 <__malloc_lock+0x8>)
 8005eda:	f7ff bf97 	b.w	8005e0c <__retarget_lock_acquire_recursive>
 8005ede:	bf00      	nop
 8005ee0:	20000214 	.word	0x20000214

08005ee4 <__malloc_unlock>:
 8005ee4:	4801      	ldr	r0, [pc, #4]	; (8005eec <__malloc_unlock+0x8>)
 8005ee6:	f7ff bf92 	b.w	8005e0e <__retarget_lock_release_recursive>
 8005eea:	bf00      	nop
 8005eec:	20000214 	.word	0x20000214

08005ef0 <__ssputs_r>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	688e      	ldr	r6, [r1, #8]
 8005ef6:	429e      	cmp	r6, r3
 8005ef8:	4682      	mov	sl, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4690      	mov	r8, r2
 8005efe:	461f      	mov	r7, r3
 8005f00:	d838      	bhi.n	8005f74 <__ssputs_r+0x84>
 8005f02:	898a      	ldrh	r2, [r1, #12]
 8005f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f08:	d032      	beq.n	8005f70 <__ssputs_r+0x80>
 8005f0a:	6825      	ldr	r5, [r4, #0]
 8005f0c:	6909      	ldr	r1, [r1, #16]
 8005f0e:	eba5 0901 	sub.w	r9, r5, r1
 8005f12:	6965      	ldr	r5, [r4, #20]
 8005f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	444b      	add	r3, r9
 8005f20:	106d      	asrs	r5, r5, #1
 8005f22:	429d      	cmp	r5, r3
 8005f24:	bf38      	it	cc
 8005f26:	461d      	movcc	r5, r3
 8005f28:	0553      	lsls	r3, r2, #21
 8005f2a:	d531      	bpl.n	8005f90 <__ssputs_r+0xa0>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	f7ff fbdd 	bl	80056ec <_malloc_r>
 8005f32:	4606      	mov	r6, r0
 8005f34:	b950      	cbnz	r0, 8005f4c <__ssputs_r+0x5c>
 8005f36:	230c      	movs	r3, #12
 8005f38:	f8ca 3000 	str.w	r3, [sl]
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4c:	6921      	ldr	r1, [r4, #16]
 8005f4e:	464a      	mov	r2, r9
 8005f50:	f000 fcb2 	bl	80068b8 <memcpy>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	6126      	str	r6, [r4, #16]
 8005f62:	6165      	str	r5, [r4, #20]
 8005f64:	444e      	add	r6, r9
 8005f66:	eba5 0509 	sub.w	r5, r5, r9
 8005f6a:	6026      	str	r6, [r4, #0]
 8005f6c:	60a5      	str	r5, [r4, #8]
 8005f6e:	463e      	mov	r6, r7
 8005f70:	42be      	cmp	r6, r7
 8005f72:	d900      	bls.n	8005f76 <__ssputs_r+0x86>
 8005f74:	463e      	mov	r6, r7
 8005f76:	4632      	mov	r2, r6
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	f000 fcaa 	bl	80068d4 <memmove>
 8005f80:	68a3      	ldr	r3, [r4, #8]
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	1b9b      	subs	r3, r3, r6
 8005f86:	4432      	add	r2, r6
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	6022      	str	r2, [r4, #0]
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7db      	b.n	8005f48 <__ssputs_r+0x58>
 8005f90:	462a      	mov	r2, r5
 8005f92:	f000 fcb9 	bl	8006908 <_realloc_r>
 8005f96:	4606      	mov	r6, r0
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d1e1      	bne.n	8005f60 <__ssputs_r+0x70>
 8005f9c:	6921      	ldr	r1, [r4, #16]
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	f7ff fb54 	bl	800564c <_free_r>
 8005fa4:	e7c7      	b.n	8005f36 <__ssputs_r+0x46>
	...

08005fa8 <_svfiprintf_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	4698      	mov	r8, r3
 8005fae:	898b      	ldrh	r3, [r1, #12]
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	b09d      	sub	sp, #116	; 0x74
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	4614      	mov	r4, r2
 8005fba:	d50e      	bpl.n	8005fda <_svfiprintf_r+0x32>
 8005fbc:	690b      	ldr	r3, [r1, #16]
 8005fbe:	b963      	cbnz	r3, 8005fda <_svfiprintf_r+0x32>
 8005fc0:	2140      	movs	r1, #64	; 0x40
 8005fc2:	f7ff fb93 	bl	80056ec <_malloc_r>
 8005fc6:	6028      	str	r0, [r5, #0]
 8005fc8:	6128      	str	r0, [r5, #16]
 8005fca:	b920      	cbnz	r0, 8005fd6 <_svfiprintf_r+0x2e>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	e0d1      	b.n	800617a <_svfiprintf_r+0x1d2>
 8005fd6:	2340      	movs	r3, #64	; 0x40
 8005fd8:	616b      	str	r3, [r5, #20]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fde:	2320      	movs	r3, #32
 8005fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fe8:	2330      	movs	r3, #48	; 0x30
 8005fea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006194 <_svfiprintf_r+0x1ec>
 8005fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ff2:	f04f 0901 	mov.w	r9, #1
 8005ff6:	4623      	mov	r3, r4
 8005ff8:	469a      	mov	sl, r3
 8005ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ffe:	b10a      	cbz	r2, 8006004 <_svfiprintf_r+0x5c>
 8006000:	2a25      	cmp	r2, #37	; 0x25
 8006002:	d1f9      	bne.n	8005ff8 <_svfiprintf_r+0x50>
 8006004:	ebba 0b04 	subs.w	fp, sl, r4
 8006008:	d00b      	beq.n	8006022 <_svfiprintf_r+0x7a>
 800600a:	465b      	mov	r3, fp
 800600c:	4622      	mov	r2, r4
 800600e:	4629      	mov	r1, r5
 8006010:	4638      	mov	r0, r7
 8006012:	f7ff ff6d 	bl	8005ef0 <__ssputs_r>
 8006016:	3001      	adds	r0, #1
 8006018:	f000 80aa 	beq.w	8006170 <_svfiprintf_r+0x1c8>
 800601c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800601e:	445a      	add	r2, fp
 8006020:	9209      	str	r2, [sp, #36]	; 0x24
 8006022:	f89a 3000 	ldrb.w	r3, [sl]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80a2 	beq.w	8006170 <_svfiprintf_r+0x1c8>
 800602c:	2300      	movs	r3, #0
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006036:	f10a 0a01 	add.w	sl, sl, #1
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	9307      	str	r3, [sp, #28]
 800603e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006042:	931a      	str	r3, [sp, #104]	; 0x68
 8006044:	4654      	mov	r4, sl
 8006046:	2205      	movs	r2, #5
 8006048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604c:	4851      	ldr	r0, [pc, #324]	; (8006194 <_svfiprintf_r+0x1ec>)
 800604e:	f7fa f8c7 	bl	80001e0 <memchr>
 8006052:	9a04      	ldr	r2, [sp, #16]
 8006054:	b9d8      	cbnz	r0, 800608e <_svfiprintf_r+0xe6>
 8006056:	06d0      	lsls	r0, r2, #27
 8006058:	bf44      	itt	mi
 800605a:	2320      	movmi	r3, #32
 800605c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006060:	0711      	lsls	r1, r2, #28
 8006062:	bf44      	itt	mi
 8006064:	232b      	movmi	r3, #43	; 0x2b
 8006066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800606a:	f89a 3000 	ldrb.w	r3, [sl]
 800606e:	2b2a      	cmp	r3, #42	; 0x2a
 8006070:	d015      	beq.n	800609e <_svfiprintf_r+0xf6>
 8006072:	9a07      	ldr	r2, [sp, #28]
 8006074:	4654      	mov	r4, sl
 8006076:	2000      	movs	r0, #0
 8006078:	f04f 0c0a 	mov.w	ip, #10
 800607c:	4621      	mov	r1, r4
 800607e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006082:	3b30      	subs	r3, #48	; 0x30
 8006084:	2b09      	cmp	r3, #9
 8006086:	d94e      	bls.n	8006126 <_svfiprintf_r+0x17e>
 8006088:	b1b0      	cbz	r0, 80060b8 <_svfiprintf_r+0x110>
 800608a:	9207      	str	r2, [sp, #28]
 800608c:	e014      	b.n	80060b8 <_svfiprintf_r+0x110>
 800608e:	eba0 0308 	sub.w	r3, r0, r8
 8006092:	fa09 f303 	lsl.w	r3, r9, r3
 8006096:	4313      	orrs	r3, r2
 8006098:	9304      	str	r3, [sp, #16]
 800609a:	46a2      	mov	sl, r4
 800609c:	e7d2      	b.n	8006044 <_svfiprintf_r+0x9c>
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	1d19      	adds	r1, r3, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	9103      	str	r1, [sp, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfbb      	ittet	lt
 80060aa:	425b      	neglt	r3, r3
 80060ac:	f042 0202 	orrlt.w	r2, r2, #2
 80060b0:	9307      	strge	r3, [sp, #28]
 80060b2:	9307      	strlt	r3, [sp, #28]
 80060b4:	bfb8      	it	lt
 80060b6:	9204      	strlt	r2, [sp, #16]
 80060b8:	7823      	ldrb	r3, [r4, #0]
 80060ba:	2b2e      	cmp	r3, #46	; 0x2e
 80060bc:	d10c      	bne.n	80060d8 <_svfiprintf_r+0x130>
 80060be:	7863      	ldrb	r3, [r4, #1]
 80060c0:	2b2a      	cmp	r3, #42	; 0x2a
 80060c2:	d135      	bne.n	8006130 <_svfiprintf_r+0x188>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	9203      	str	r2, [sp, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bfb8      	it	lt
 80060d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060d4:	3402      	adds	r4, #2
 80060d6:	9305      	str	r3, [sp, #20]
 80060d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061a4 <_svfiprintf_r+0x1fc>
 80060dc:	7821      	ldrb	r1, [r4, #0]
 80060de:	2203      	movs	r2, #3
 80060e0:	4650      	mov	r0, sl
 80060e2:	f7fa f87d 	bl	80001e0 <memchr>
 80060e6:	b140      	cbz	r0, 80060fa <_svfiprintf_r+0x152>
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	eba0 000a 	sub.w	r0, r0, sl
 80060ee:	fa03 f000 	lsl.w	r0, r3, r0
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	4303      	orrs	r3, r0
 80060f6:	3401      	adds	r4, #1
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fe:	4826      	ldr	r0, [pc, #152]	; (8006198 <_svfiprintf_r+0x1f0>)
 8006100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006104:	2206      	movs	r2, #6
 8006106:	f7fa f86b 	bl	80001e0 <memchr>
 800610a:	2800      	cmp	r0, #0
 800610c:	d038      	beq.n	8006180 <_svfiprintf_r+0x1d8>
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <_svfiprintf_r+0x1f4>)
 8006110:	bb1b      	cbnz	r3, 800615a <_svfiprintf_r+0x1b2>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	3307      	adds	r3, #7
 8006116:	f023 0307 	bic.w	r3, r3, #7
 800611a:	3308      	adds	r3, #8
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006120:	4433      	add	r3, r6
 8006122:	9309      	str	r3, [sp, #36]	; 0x24
 8006124:	e767      	b.n	8005ff6 <_svfiprintf_r+0x4e>
 8006126:	fb0c 3202 	mla	r2, ip, r2, r3
 800612a:	460c      	mov	r4, r1
 800612c:	2001      	movs	r0, #1
 800612e:	e7a5      	b.n	800607c <_svfiprintf_r+0xd4>
 8006130:	2300      	movs	r3, #0
 8006132:	3401      	adds	r4, #1
 8006134:	9305      	str	r3, [sp, #20]
 8006136:	4619      	mov	r1, r3
 8006138:	f04f 0c0a 	mov.w	ip, #10
 800613c:	4620      	mov	r0, r4
 800613e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006142:	3a30      	subs	r2, #48	; 0x30
 8006144:	2a09      	cmp	r2, #9
 8006146:	d903      	bls.n	8006150 <_svfiprintf_r+0x1a8>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0c5      	beq.n	80060d8 <_svfiprintf_r+0x130>
 800614c:	9105      	str	r1, [sp, #20]
 800614e:	e7c3      	b.n	80060d8 <_svfiprintf_r+0x130>
 8006150:	fb0c 2101 	mla	r1, ip, r1, r2
 8006154:	4604      	mov	r4, r0
 8006156:	2301      	movs	r3, #1
 8006158:	e7f0      	b.n	800613c <_svfiprintf_r+0x194>
 800615a:	ab03      	add	r3, sp, #12
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	462a      	mov	r2, r5
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <_svfiprintf_r+0x1f8>)
 8006162:	a904      	add	r1, sp, #16
 8006164:	4638      	mov	r0, r7
 8006166:	f3af 8000 	nop.w
 800616a:	1c42      	adds	r2, r0, #1
 800616c:	4606      	mov	r6, r0
 800616e:	d1d6      	bne.n	800611e <_svfiprintf_r+0x176>
 8006170:	89ab      	ldrh	r3, [r5, #12]
 8006172:	065b      	lsls	r3, r3, #25
 8006174:	f53f af2c 	bmi.w	8005fd0 <_svfiprintf_r+0x28>
 8006178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800617a:	b01d      	add	sp, #116	; 0x74
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	ab03      	add	r3, sp, #12
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	462a      	mov	r2, r5
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <_svfiprintf_r+0x1f8>)
 8006188:	a904      	add	r1, sp, #16
 800618a:	4638      	mov	r0, r7
 800618c:	f000 f9d4 	bl	8006538 <_printf_i>
 8006190:	e7eb      	b.n	800616a <_svfiprintf_r+0x1c2>
 8006192:	bf00      	nop
 8006194:	08007edc 	.word	0x08007edc
 8006198:	08007ee6 	.word	0x08007ee6
 800619c:	00000000 	.word	0x00000000
 80061a0:	08005ef1 	.word	0x08005ef1
 80061a4:	08007ee2 	.word	0x08007ee2

080061a8 <__sfputc_r>:
 80061a8:	6893      	ldr	r3, [r2, #8]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	b410      	push	{r4}
 80061b0:	6093      	str	r3, [r2, #8]
 80061b2:	da08      	bge.n	80061c6 <__sfputc_r+0x1e>
 80061b4:	6994      	ldr	r4, [r2, #24]
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	db01      	blt.n	80061be <__sfputc_r+0x16>
 80061ba:	290a      	cmp	r1, #10
 80061bc:	d103      	bne.n	80061c6 <__sfputc_r+0x1e>
 80061be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061c2:	f7ff bbab 	b.w	800591c <__swbuf_r>
 80061c6:	6813      	ldr	r3, [r2, #0]
 80061c8:	1c58      	adds	r0, r3, #1
 80061ca:	6010      	str	r0, [r2, #0]
 80061cc:	7019      	strb	r1, [r3, #0]
 80061ce:	4608      	mov	r0, r1
 80061d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <__sfputs_r>:
 80061d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d8:	4606      	mov	r6, r0
 80061da:	460f      	mov	r7, r1
 80061dc:	4614      	mov	r4, r2
 80061de:	18d5      	adds	r5, r2, r3
 80061e0:	42ac      	cmp	r4, r5
 80061e2:	d101      	bne.n	80061e8 <__sfputs_r+0x12>
 80061e4:	2000      	movs	r0, #0
 80061e6:	e007      	b.n	80061f8 <__sfputs_r+0x22>
 80061e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ec:	463a      	mov	r2, r7
 80061ee:	4630      	mov	r0, r6
 80061f0:	f7ff ffda 	bl	80061a8 <__sfputc_r>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d1f3      	bne.n	80061e0 <__sfputs_r+0xa>
 80061f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061fc <_vfiprintf_r>:
 80061fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	460d      	mov	r5, r1
 8006202:	b09d      	sub	sp, #116	; 0x74
 8006204:	4614      	mov	r4, r2
 8006206:	4698      	mov	r8, r3
 8006208:	4606      	mov	r6, r0
 800620a:	b118      	cbz	r0, 8006214 <_vfiprintf_r+0x18>
 800620c:	6983      	ldr	r3, [r0, #24]
 800620e:	b90b      	cbnz	r3, 8006214 <_vfiprintf_r+0x18>
 8006210:	f7ff fd5e 	bl	8005cd0 <__sinit>
 8006214:	4b89      	ldr	r3, [pc, #548]	; (800643c <_vfiprintf_r+0x240>)
 8006216:	429d      	cmp	r5, r3
 8006218:	d11b      	bne.n	8006252 <_vfiprintf_r+0x56>
 800621a:	6875      	ldr	r5, [r6, #4]
 800621c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	d405      	bmi.n	800622e <_vfiprintf_r+0x32>
 8006222:	89ab      	ldrh	r3, [r5, #12]
 8006224:	059a      	lsls	r2, r3, #22
 8006226:	d402      	bmi.n	800622e <_vfiprintf_r+0x32>
 8006228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800622a:	f7ff fdef 	bl	8005e0c <__retarget_lock_acquire_recursive>
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	071b      	lsls	r3, r3, #28
 8006232:	d501      	bpl.n	8006238 <_vfiprintf_r+0x3c>
 8006234:	692b      	ldr	r3, [r5, #16]
 8006236:	b9eb      	cbnz	r3, 8006274 <_vfiprintf_r+0x78>
 8006238:	4629      	mov	r1, r5
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff fbc0 	bl	80059c0 <__swsetup_r>
 8006240:	b1c0      	cbz	r0, 8006274 <_vfiprintf_r+0x78>
 8006242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006244:	07dc      	lsls	r4, r3, #31
 8006246:	d50e      	bpl.n	8006266 <_vfiprintf_r+0x6a>
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	b01d      	add	sp, #116	; 0x74
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	4b7b      	ldr	r3, [pc, #492]	; (8006440 <_vfiprintf_r+0x244>)
 8006254:	429d      	cmp	r5, r3
 8006256:	d101      	bne.n	800625c <_vfiprintf_r+0x60>
 8006258:	68b5      	ldr	r5, [r6, #8]
 800625a:	e7df      	b.n	800621c <_vfiprintf_r+0x20>
 800625c:	4b79      	ldr	r3, [pc, #484]	; (8006444 <_vfiprintf_r+0x248>)
 800625e:	429d      	cmp	r5, r3
 8006260:	bf08      	it	eq
 8006262:	68f5      	ldreq	r5, [r6, #12]
 8006264:	e7da      	b.n	800621c <_vfiprintf_r+0x20>
 8006266:	89ab      	ldrh	r3, [r5, #12]
 8006268:	0598      	lsls	r0, r3, #22
 800626a:	d4ed      	bmi.n	8006248 <_vfiprintf_r+0x4c>
 800626c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800626e:	f7ff fdce 	bl	8005e0e <__retarget_lock_release_recursive>
 8006272:	e7e9      	b.n	8006248 <_vfiprintf_r+0x4c>
 8006274:	2300      	movs	r3, #0
 8006276:	9309      	str	r3, [sp, #36]	; 0x24
 8006278:	2320      	movs	r3, #32
 800627a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800627e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006282:	2330      	movs	r3, #48	; 0x30
 8006284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006448 <_vfiprintf_r+0x24c>
 8006288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800628c:	f04f 0901 	mov.w	r9, #1
 8006290:	4623      	mov	r3, r4
 8006292:	469a      	mov	sl, r3
 8006294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006298:	b10a      	cbz	r2, 800629e <_vfiprintf_r+0xa2>
 800629a:	2a25      	cmp	r2, #37	; 0x25
 800629c:	d1f9      	bne.n	8006292 <_vfiprintf_r+0x96>
 800629e:	ebba 0b04 	subs.w	fp, sl, r4
 80062a2:	d00b      	beq.n	80062bc <_vfiprintf_r+0xc0>
 80062a4:	465b      	mov	r3, fp
 80062a6:	4622      	mov	r2, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7ff ff93 	bl	80061d6 <__sfputs_r>
 80062b0:	3001      	adds	r0, #1
 80062b2:	f000 80aa 	beq.w	800640a <_vfiprintf_r+0x20e>
 80062b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b8:	445a      	add	r2, fp
 80062ba:	9209      	str	r2, [sp, #36]	; 0x24
 80062bc:	f89a 3000 	ldrb.w	r3, [sl]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80a2 	beq.w	800640a <_vfiprintf_r+0x20e>
 80062c6:	2300      	movs	r3, #0
 80062c8:	f04f 32ff 	mov.w	r2, #4294967295
 80062cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062d0:	f10a 0a01 	add.w	sl, sl, #1
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	9307      	str	r3, [sp, #28]
 80062d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062dc:	931a      	str	r3, [sp, #104]	; 0x68
 80062de:	4654      	mov	r4, sl
 80062e0:	2205      	movs	r2, #5
 80062e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e6:	4858      	ldr	r0, [pc, #352]	; (8006448 <_vfiprintf_r+0x24c>)
 80062e8:	f7f9 ff7a 	bl	80001e0 <memchr>
 80062ec:	9a04      	ldr	r2, [sp, #16]
 80062ee:	b9d8      	cbnz	r0, 8006328 <_vfiprintf_r+0x12c>
 80062f0:	06d1      	lsls	r1, r2, #27
 80062f2:	bf44      	itt	mi
 80062f4:	2320      	movmi	r3, #32
 80062f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062fa:	0713      	lsls	r3, r2, #28
 80062fc:	bf44      	itt	mi
 80062fe:	232b      	movmi	r3, #43	; 0x2b
 8006300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006304:	f89a 3000 	ldrb.w	r3, [sl]
 8006308:	2b2a      	cmp	r3, #42	; 0x2a
 800630a:	d015      	beq.n	8006338 <_vfiprintf_r+0x13c>
 800630c:	9a07      	ldr	r2, [sp, #28]
 800630e:	4654      	mov	r4, sl
 8006310:	2000      	movs	r0, #0
 8006312:	f04f 0c0a 	mov.w	ip, #10
 8006316:	4621      	mov	r1, r4
 8006318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800631c:	3b30      	subs	r3, #48	; 0x30
 800631e:	2b09      	cmp	r3, #9
 8006320:	d94e      	bls.n	80063c0 <_vfiprintf_r+0x1c4>
 8006322:	b1b0      	cbz	r0, 8006352 <_vfiprintf_r+0x156>
 8006324:	9207      	str	r2, [sp, #28]
 8006326:	e014      	b.n	8006352 <_vfiprintf_r+0x156>
 8006328:	eba0 0308 	sub.w	r3, r0, r8
 800632c:	fa09 f303 	lsl.w	r3, r9, r3
 8006330:	4313      	orrs	r3, r2
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	46a2      	mov	sl, r4
 8006336:	e7d2      	b.n	80062de <_vfiprintf_r+0xe2>
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	1d19      	adds	r1, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	9103      	str	r1, [sp, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	bfbb      	ittet	lt
 8006344:	425b      	neglt	r3, r3
 8006346:	f042 0202 	orrlt.w	r2, r2, #2
 800634a:	9307      	strge	r3, [sp, #28]
 800634c:	9307      	strlt	r3, [sp, #28]
 800634e:	bfb8      	it	lt
 8006350:	9204      	strlt	r2, [sp, #16]
 8006352:	7823      	ldrb	r3, [r4, #0]
 8006354:	2b2e      	cmp	r3, #46	; 0x2e
 8006356:	d10c      	bne.n	8006372 <_vfiprintf_r+0x176>
 8006358:	7863      	ldrb	r3, [r4, #1]
 800635a:	2b2a      	cmp	r3, #42	; 0x2a
 800635c:	d135      	bne.n	80063ca <_vfiprintf_r+0x1ce>
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	9203      	str	r2, [sp, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfb8      	it	lt
 800636a:	f04f 33ff 	movlt.w	r3, #4294967295
 800636e:	3402      	adds	r4, #2
 8006370:	9305      	str	r3, [sp, #20]
 8006372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006458 <_vfiprintf_r+0x25c>
 8006376:	7821      	ldrb	r1, [r4, #0]
 8006378:	2203      	movs	r2, #3
 800637a:	4650      	mov	r0, sl
 800637c:	f7f9 ff30 	bl	80001e0 <memchr>
 8006380:	b140      	cbz	r0, 8006394 <_vfiprintf_r+0x198>
 8006382:	2340      	movs	r3, #64	; 0x40
 8006384:	eba0 000a 	sub.w	r0, r0, sl
 8006388:	fa03 f000 	lsl.w	r0, r3, r0
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	4303      	orrs	r3, r0
 8006390:	3401      	adds	r4, #1
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006398:	482c      	ldr	r0, [pc, #176]	; (800644c <_vfiprintf_r+0x250>)
 800639a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800639e:	2206      	movs	r2, #6
 80063a0:	f7f9 ff1e 	bl	80001e0 <memchr>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d03f      	beq.n	8006428 <_vfiprintf_r+0x22c>
 80063a8:	4b29      	ldr	r3, [pc, #164]	; (8006450 <_vfiprintf_r+0x254>)
 80063aa:	bb1b      	cbnz	r3, 80063f4 <_vfiprintf_r+0x1f8>
 80063ac:	9b03      	ldr	r3, [sp, #12]
 80063ae:	3307      	adds	r3, #7
 80063b0:	f023 0307 	bic.w	r3, r3, #7
 80063b4:	3308      	adds	r3, #8
 80063b6:	9303      	str	r3, [sp, #12]
 80063b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ba:	443b      	add	r3, r7
 80063bc:	9309      	str	r3, [sp, #36]	; 0x24
 80063be:	e767      	b.n	8006290 <_vfiprintf_r+0x94>
 80063c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063c4:	460c      	mov	r4, r1
 80063c6:	2001      	movs	r0, #1
 80063c8:	e7a5      	b.n	8006316 <_vfiprintf_r+0x11a>
 80063ca:	2300      	movs	r3, #0
 80063cc:	3401      	adds	r4, #1
 80063ce:	9305      	str	r3, [sp, #20]
 80063d0:	4619      	mov	r1, r3
 80063d2:	f04f 0c0a 	mov.w	ip, #10
 80063d6:	4620      	mov	r0, r4
 80063d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063dc:	3a30      	subs	r2, #48	; 0x30
 80063de:	2a09      	cmp	r2, #9
 80063e0:	d903      	bls.n	80063ea <_vfiprintf_r+0x1ee>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0c5      	beq.n	8006372 <_vfiprintf_r+0x176>
 80063e6:	9105      	str	r1, [sp, #20]
 80063e8:	e7c3      	b.n	8006372 <_vfiprintf_r+0x176>
 80063ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ee:	4604      	mov	r4, r0
 80063f0:	2301      	movs	r3, #1
 80063f2:	e7f0      	b.n	80063d6 <_vfiprintf_r+0x1da>
 80063f4:	ab03      	add	r3, sp, #12
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	462a      	mov	r2, r5
 80063fa:	4b16      	ldr	r3, [pc, #88]	; (8006454 <_vfiprintf_r+0x258>)
 80063fc:	a904      	add	r1, sp, #16
 80063fe:	4630      	mov	r0, r6
 8006400:	f3af 8000 	nop.w
 8006404:	4607      	mov	r7, r0
 8006406:	1c78      	adds	r0, r7, #1
 8006408:	d1d6      	bne.n	80063b8 <_vfiprintf_r+0x1bc>
 800640a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800640c:	07d9      	lsls	r1, r3, #31
 800640e:	d405      	bmi.n	800641c <_vfiprintf_r+0x220>
 8006410:	89ab      	ldrh	r3, [r5, #12]
 8006412:	059a      	lsls	r2, r3, #22
 8006414:	d402      	bmi.n	800641c <_vfiprintf_r+0x220>
 8006416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006418:	f7ff fcf9 	bl	8005e0e <__retarget_lock_release_recursive>
 800641c:	89ab      	ldrh	r3, [r5, #12]
 800641e:	065b      	lsls	r3, r3, #25
 8006420:	f53f af12 	bmi.w	8006248 <_vfiprintf_r+0x4c>
 8006424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006426:	e711      	b.n	800624c <_vfiprintf_r+0x50>
 8006428:	ab03      	add	r3, sp, #12
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	462a      	mov	r2, r5
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <_vfiprintf_r+0x258>)
 8006430:	a904      	add	r1, sp, #16
 8006432:	4630      	mov	r0, r6
 8006434:	f000 f880 	bl	8006538 <_printf_i>
 8006438:	e7e4      	b.n	8006404 <_vfiprintf_r+0x208>
 800643a:	bf00      	nop
 800643c:	08007e9c 	.word	0x08007e9c
 8006440:	08007ebc 	.word	0x08007ebc
 8006444:	08007e7c 	.word	0x08007e7c
 8006448:	08007edc 	.word	0x08007edc
 800644c:	08007ee6 	.word	0x08007ee6
 8006450:	00000000 	.word	0x00000000
 8006454:	080061d7 	.word	0x080061d7
 8006458:	08007ee2 	.word	0x08007ee2

0800645c <_printf_common>:
 800645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	4616      	mov	r6, r2
 8006462:	4699      	mov	r9, r3
 8006464:	688a      	ldr	r2, [r1, #8]
 8006466:	690b      	ldr	r3, [r1, #16]
 8006468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800646c:	4293      	cmp	r3, r2
 800646e:	bfb8      	it	lt
 8006470:	4613      	movlt	r3, r2
 8006472:	6033      	str	r3, [r6, #0]
 8006474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006478:	4607      	mov	r7, r0
 800647a:	460c      	mov	r4, r1
 800647c:	b10a      	cbz	r2, 8006482 <_printf_common+0x26>
 800647e:	3301      	adds	r3, #1
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	0699      	lsls	r1, r3, #26
 8006486:	bf42      	ittt	mi
 8006488:	6833      	ldrmi	r3, [r6, #0]
 800648a:	3302      	addmi	r3, #2
 800648c:	6033      	strmi	r3, [r6, #0]
 800648e:	6825      	ldr	r5, [r4, #0]
 8006490:	f015 0506 	ands.w	r5, r5, #6
 8006494:	d106      	bne.n	80064a4 <_printf_common+0x48>
 8006496:	f104 0a19 	add.w	sl, r4, #25
 800649a:	68e3      	ldr	r3, [r4, #12]
 800649c:	6832      	ldr	r2, [r6, #0]
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	dc26      	bgt.n	80064f2 <_printf_common+0x96>
 80064a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064a8:	1e13      	subs	r3, r2, #0
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	bf18      	it	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	0692      	lsls	r2, r2, #26
 80064b2:	d42b      	bmi.n	800650c <_printf_common+0xb0>
 80064b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064b8:	4649      	mov	r1, r9
 80064ba:	4638      	mov	r0, r7
 80064bc:	47c0      	blx	r8
 80064be:	3001      	adds	r0, #1
 80064c0:	d01e      	beq.n	8006500 <_printf_common+0xa4>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	68e5      	ldr	r5, [r4, #12]
 80064c6:	6832      	ldr	r2, [r6, #0]
 80064c8:	f003 0306 	and.w	r3, r3, #6
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	bf08      	it	eq
 80064d0:	1aad      	subeq	r5, r5, r2
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	6922      	ldr	r2, [r4, #16]
 80064d6:	bf0c      	ite	eq
 80064d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064dc:	2500      	movne	r5, #0
 80064de:	4293      	cmp	r3, r2
 80064e0:	bfc4      	itt	gt
 80064e2:	1a9b      	subgt	r3, r3, r2
 80064e4:	18ed      	addgt	r5, r5, r3
 80064e6:	2600      	movs	r6, #0
 80064e8:	341a      	adds	r4, #26
 80064ea:	42b5      	cmp	r5, r6
 80064ec:	d11a      	bne.n	8006524 <_printf_common+0xc8>
 80064ee:	2000      	movs	r0, #0
 80064f0:	e008      	b.n	8006504 <_printf_common+0xa8>
 80064f2:	2301      	movs	r3, #1
 80064f4:	4652      	mov	r2, sl
 80064f6:	4649      	mov	r1, r9
 80064f8:	4638      	mov	r0, r7
 80064fa:	47c0      	blx	r8
 80064fc:	3001      	adds	r0, #1
 80064fe:	d103      	bne.n	8006508 <_printf_common+0xac>
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006508:	3501      	adds	r5, #1
 800650a:	e7c6      	b.n	800649a <_printf_common+0x3e>
 800650c:	18e1      	adds	r1, r4, r3
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	2030      	movs	r0, #48	; 0x30
 8006512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006516:	4422      	add	r2, r4
 8006518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800651c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006520:	3302      	adds	r3, #2
 8006522:	e7c7      	b.n	80064b4 <_printf_common+0x58>
 8006524:	2301      	movs	r3, #1
 8006526:	4622      	mov	r2, r4
 8006528:	4649      	mov	r1, r9
 800652a:	4638      	mov	r0, r7
 800652c:	47c0      	blx	r8
 800652e:	3001      	adds	r0, #1
 8006530:	d0e6      	beq.n	8006500 <_printf_common+0xa4>
 8006532:	3601      	adds	r6, #1
 8006534:	e7d9      	b.n	80064ea <_printf_common+0x8e>
	...

08006538 <_printf_i>:
 8006538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	4691      	mov	r9, r2
 8006540:	7e27      	ldrb	r7, [r4, #24]
 8006542:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006544:	2f78      	cmp	r7, #120	; 0x78
 8006546:	4680      	mov	r8, r0
 8006548:	469a      	mov	sl, r3
 800654a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800654e:	d807      	bhi.n	8006560 <_printf_i+0x28>
 8006550:	2f62      	cmp	r7, #98	; 0x62
 8006552:	d80a      	bhi.n	800656a <_printf_i+0x32>
 8006554:	2f00      	cmp	r7, #0
 8006556:	f000 80d8 	beq.w	800670a <_printf_i+0x1d2>
 800655a:	2f58      	cmp	r7, #88	; 0x58
 800655c:	f000 80a3 	beq.w	80066a6 <_printf_i+0x16e>
 8006560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006568:	e03a      	b.n	80065e0 <_printf_i+0xa8>
 800656a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800656e:	2b15      	cmp	r3, #21
 8006570:	d8f6      	bhi.n	8006560 <_printf_i+0x28>
 8006572:	a001      	add	r0, pc, #4	; (adr r0, 8006578 <_printf_i+0x40>)
 8006574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006578:	080065d1 	.word	0x080065d1
 800657c:	080065e5 	.word	0x080065e5
 8006580:	08006561 	.word	0x08006561
 8006584:	08006561 	.word	0x08006561
 8006588:	08006561 	.word	0x08006561
 800658c:	08006561 	.word	0x08006561
 8006590:	080065e5 	.word	0x080065e5
 8006594:	08006561 	.word	0x08006561
 8006598:	08006561 	.word	0x08006561
 800659c:	08006561 	.word	0x08006561
 80065a0:	08006561 	.word	0x08006561
 80065a4:	080066f1 	.word	0x080066f1
 80065a8:	08006615 	.word	0x08006615
 80065ac:	080066d3 	.word	0x080066d3
 80065b0:	08006561 	.word	0x08006561
 80065b4:	08006561 	.word	0x08006561
 80065b8:	08006713 	.word	0x08006713
 80065bc:	08006561 	.word	0x08006561
 80065c0:	08006615 	.word	0x08006615
 80065c4:	08006561 	.word	0x08006561
 80065c8:	08006561 	.word	0x08006561
 80065cc:	080066db 	.word	0x080066db
 80065d0:	680b      	ldr	r3, [r1, #0]
 80065d2:	1d1a      	adds	r2, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	600a      	str	r2, [r1, #0]
 80065d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0a3      	b.n	800672c <_printf_i+0x1f4>
 80065e4:	6825      	ldr	r5, [r4, #0]
 80065e6:	6808      	ldr	r0, [r1, #0]
 80065e8:	062e      	lsls	r6, r5, #24
 80065ea:	f100 0304 	add.w	r3, r0, #4
 80065ee:	d50a      	bpl.n	8006606 <_printf_i+0xce>
 80065f0:	6805      	ldr	r5, [r0, #0]
 80065f2:	600b      	str	r3, [r1, #0]
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	da03      	bge.n	8006600 <_printf_i+0xc8>
 80065f8:	232d      	movs	r3, #45	; 0x2d
 80065fa:	426d      	negs	r5, r5
 80065fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006600:	485e      	ldr	r0, [pc, #376]	; (800677c <_printf_i+0x244>)
 8006602:	230a      	movs	r3, #10
 8006604:	e019      	b.n	800663a <_printf_i+0x102>
 8006606:	f015 0f40 	tst.w	r5, #64	; 0x40
 800660a:	6805      	ldr	r5, [r0, #0]
 800660c:	600b      	str	r3, [r1, #0]
 800660e:	bf18      	it	ne
 8006610:	b22d      	sxthne	r5, r5
 8006612:	e7ef      	b.n	80065f4 <_printf_i+0xbc>
 8006614:	680b      	ldr	r3, [r1, #0]
 8006616:	6825      	ldr	r5, [r4, #0]
 8006618:	1d18      	adds	r0, r3, #4
 800661a:	6008      	str	r0, [r1, #0]
 800661c:	0628      	lsls	r0, r5, #24
 800661e:	d501      	bpl.n	8006624 <_printf_i+0xec>
 8006620:	681d      	ldr	r5, [r3, #0]
 8006622:	e002      	b.n	800662a <_printf_i+0xf2>
 8006624:	0669      	lsls	r1, r5, #25
 8006626:	d5fb      	bpl.n	8006620 <_printf_i+0xe8>
 8006628:	881d      	ldrh	r5, [r3, #0]
 800662a:	4854      	ldr	r0, [pc, #336]	; (800677c <_printf_i+0x244>)
 800662c:	2f6f      	cmp	r7, #111	; 0x6f
 800662e:	bf0c      	ite	eq
 8006630:	2308      	moveq	r3, #8
 8006632:	230a      	movne	r3, #10
 8006634:	2100      	movs	r1, #0
 8006636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800663a:	6866      	ldr	r6, [r4, #4]
 800663c:	60a6      	str	r6, [r4, #8]
 800663e:	2e00      	cmp	r6, #0
 8006640:	bfa2      	ittt	ge
 8006642:	6821      	ldrge	r1, [r4, #0]
 8006644:	f021 0104 	bicge.w	r1, r1, #4
 8006648:	6021      	strge	r1, [r4, #0]
 800664a:	b90d      	cbnz	r5, 8006650 <_printf_i+0x118>
 800664c:	2e00      	cmp	r6, #0
 800664e:	d04d      	beq.n	80066ec <_printf_i+0x1b4>
 8006650:	4616      	mov	r6, r2
 8006652:	fbb5 f1f3 	udiv	r1, r5, r3
 8006656:	fb03 5711 	mls	r7, r3, r1, r5
 800665a:	5dc7      	ldrb	r7, [r0, r7]
 800665c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006660:	462f      	mov	r7, r5
 8006662:	42bb      	cmp	r3, r7
 8006664:	460d      	mov	r5, r1
 8006666:	d9f4      	bls.n	8006652 <_printf_i+0x11a>
 8006668:	2b08      	cmp	r3, #8
 800666a:	d10b      	bne.n	8006684 <_printf_i+0x14c>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	07df      	lsls	r7, r3, #31
 8006670:	d508      	bpl.n	8006684 <_printf_i+0x14c>
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	6861      	ldr	r1, [r4, #4]
 8006676:	4299      	cmp	r1, r3
 8006678:	bfde      	ittt	le
 800667a:	2330      	movle	r3, #48	; 0x30
 800667c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006684:	1b92      	subs	r2, r2, r6
 8006686:	6122      	str	r2, [r4, #16]
 8006688:	f8cd a000 	str.w	sl, [sp]
 800668c:	464b      	mov	r3, r9
 800668e:	aa03      	add	r2, sp, #12
 8006690:	4621      	mov	r1, r4
 8006692:	4640      	mov	r0, r8
 8006694:	f7ff fee2 	bl	800645c <_printf_common>
 8006698:	3001      	adds	r0, #1
 800669a:	d14c      	bne.n	8006736 <_printf_i+0x1fe>
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	b004      	add	sp, #16
 80066a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a6:	4835      	ldr	r0, [pc, #212]	; (800677c <_printf_i+0x244>)
 80066a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	680e      	ldr	r6, [r1, #0]
 80066b0:	061f      	lsls	r7, r3, #24
 80066b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80066b6:	600e      	str	r6, [r1, #0]
 80066b8:	d514      	bpl.n	80066e4 <_printf_i+0x1ac>
 80066ba:	07d9      	lsls	r1, r3, #31
 80066bc:	bf44      	itt	mi
 80066be:	f043 0320 	orrmi.w	r3, r3, #32
 80066c2:	6023      	strmi	r3, [r4, #0]
 80066c4:	b91d      	cbnz	r5, 80066ce <_printf_i+0x196>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f023 0320 	bic.w	r3, r3, #32
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	2310      	movs	r3, #16
 80066d0:	e7b0      	b.n	8006634 <_printf_i+0xfc>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	f043 0320 	orr.w	r3, r3, #32
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	2378      	movs	r3, #120	; 0x78
 80066dc:	4828      	ldr	r0, [pc, #160]	; (8006780 <_printf_i+0x248>)
 80066de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066e2:	e7e3      	b.n	80066ac <_printf_i+0x174>
 80066e4:	065e      	lsls	r6, r3, #25
 80066e6:	bf48      	it	mi
 80066e8:	b2ad      	uxthmi	r5, r5
 80066ea:	e7e6      	b.n	80066ba <_printf_i+0x182>
 80066ec:	4616      	mov	r6, r2
 80066ee:	e7bb      	b.n	8006668 <_printf_i+0x130>
 80066f0:	680b      	ldr	r3, [r1, #0]
 80066f2:	6826      	ldr	r6, [r4, #0]
 80066f4:	6960      	ldr	r0, [r4, #20]
 80066f6:	1d1d      	adds	r5, r3, #4
 80066f8:	600d      	str	r5, [r1, #0]
 80066fa:	0635      	lsls	r5, r6, #24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	d501      	bpl.n	8006704 <_printf_i+0x1cc>
 8006700:	6018      	str	r0, [r3, #0]
 8006702:	e002      	b.n	800670a <_printf_i+0x1d2>
 8006704:	0671      	lsls	r1, r6, #25
 8006706:	d5fb      	bpl.n	8006700 <_printf_i+0x1c8>
 8006708:	8018      	strh	r0, [r3, #0]
 800670a:	2300      	movs	r3, #0
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	4616      	mov	r6, r2
 8006710:	e7ba      	b.n	8006688 <_printf_i+0x150>
 8006712:	680b      	ldr	r3, [r1, #0]
 8006714:	1d1a      	adds	r2, r3, #4
 8006716:	600a      	str	r2, [r1, #0]
 8006718:	681e      	ldr	r6, [r3, #0]
 800671a:	6862      	ldr	r2, [r4, #4]
 800671c:	2100      	movs	r1, #0
 800671e:	4630      	mov	r0, r6
 8006720:	f7f9 fd5e 	bl	80001e0 <memchr>
 8006724:	b108      	cbz	r0, 800672a <_printf_i+0x1f2>
 8006726:	1b80      	subs	r0, r0, r6
 8006728:	6060      	str	r0, [r4, #4]
 800672a:	6863      	ldr	r3, [r4, #4]
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	2300      	movs	r3, #0
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006734:	e7a8      	b.n	8006688 <_printf_i+0x150>
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	4632      	mov	r2, r6
 800673a:	4649      	mov	r1, r9
 800673c:	4640      	mov	r0, r8
 800673e:	47d0      	blx	sl
 8006740:	3001      	adds	r0, #1
 8006742:	d0ab      	beq.n	800669c <_printf_i+0x164>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	079b      	lsls	r3, r3, #30
 8006748:	d413      	bmi.n	8006772 <_printf_i+0x23a>
 800674a:	68e0      	ldr	r0, [r4, #12]
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	4298      	cmp	r0, r3
 8006750:	bfb8      	it	lt
 8006752:	4618      	movlt	r0, r3
 8006754:	e7a4      	b.n	80066a0 <_printf_i+0x168>
 8006756:	2301      	movs	r3, #1
 8006758:	4632      	mov	r2, r6
 800675a:	4649      	mov	r1, r9
 800675c:	4640      	mov	r0, r8
 800675e:	47d0      	blx	sl
 8006760:	3001      	adds	r0, #1
 8006762:	d09b      	beq.n	800669c <_printf_i+0x164>
 8006764:	3501      	adds	r5, #1
 8006766:	68e3      	ldr	r3, [r4, #12]
 8006768:	9903      	ldr	r1, [sp, #12]
 800676a:	1a5b      	subs	r3, r3, r1
 800676c:	42ab      	cmp	r3, r5
 800676e:	dcf2      	bgt.n	8006756 <_printf_i+0x21e>
 8006770:	e7eb      	b.n	800674a <_printf_i+0x212>
 8006772:	2500      	movs	r5, #0
 8006774:	f104 0619 	add.w	r6, r4, #25
 8006778:	e7f5      	b.n	8006766 <_printf_i+0x22e>
 800677a:	bf00      	nop
 800677c:	08007eed 	.word	0x08007eed
 8006780:	08007efe 	.word	0x08007efe

08006784 <__sread>:
 8006784:	b510      	push	{r4, lr}
 8006786:	460c      	mov	r4, r1
 8006788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678c:	f000 f8e2 	bl	8006954 <_read_r>
 8006790:	2800      	cmp	r0, #0
 8006792:	bfab      	itete	ge
 8006794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006796:	89a3      	ldrhlt	r3, [r4, #12]
 8006798:	181b      	addge	r3, r3, r0
 800679a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800679e:	bfac      	ite	ge
 80067a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80067a2:	81a3      	strhlt	r3, [r4, #12]
 80067a4:	bd10      	pop	{r4, pc}

080067a6 <__swrite>:
 80067a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067aa:	461f      	mov	r7, r3
 80067ac:	898b      	ldrh	r3, [r1, #12]
 80067ae:	05db      	lsls	r3, r3, #23
 80067b0:	4605      	mov	r5, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	4616      	mov	r6, r2
 80067b6:	d505      	bpl.n	80067c4 <__swrite+0x1e>
 80067b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067bc:	2302      	movs	r3, #2
 80067be:	2200      	movs	r2, #0
 80067c0:	f000 f868 	bl	8006894 <_lseek_r>
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	4632      	mov	r2, r6
 80067d2:	463b      	mov	r3, r7
 80067d4:	4628      	mov	r0, r5
 80067d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067da:	f000 b817 	b.w	800680c <_write_r>

080067de <__sseek>:
 80067de:	b510      	push	{r4, lr}
 80067e0:	460c      	mov	r4, r1
 80067e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e6:	f000 f855 	bl	8006894 <_lseek_r>
 80067ea:	1c43      	adds	r3, r0, #1
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	bf15      	itete	ne
 80067f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80067f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067fa:	81a3      	strheq	r3, [r4, #12]
 80067fc:	bf18      	it	ne
 80067fe:	81a3      	strhne	r3, [r4, #12]
 8006800:	bd10      	pop	{r4, pc}

08006802 <__sclose>:
 8006802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006806:	f000 b813 	b.w	8006830 <_close_r>
	...

0800680c <_write_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d07      	ldr	r5, [pc, #28]	; (800682c <_write_r+0x20>)
 8006810:	4604      	mov	r4, r0
 8006812:	4608      	mov	r0, r1
 8006814:	4611      	mov	r1, r2
 8006816:	2200      	movs	r2, #0
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fb f881 	bl	8001922 <_write>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_write_r+0x1e>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_write_r+0x1e>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	2000021c 	.word	0x2000021c

08006830 <_close_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d06      	ldr	r5, [pc, #24]	; (800684c <_close_r+0x1c>)
 8006834:	2300      	movs	r3, #0
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	f7fb f88d 	bl	800195a <_close>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_close_r+0x1a>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_close_r+0x1a>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	2000021c 	.word	0x2000021c

08006850 <_fstat_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4d07      	ldr	r5, [pc, #28]	; (8006870 <_fstat_r+0x20>)
 8006854:	2300      	movs	r3, #0
 8006856:	4604      	mov	r4, r0
 8006858:	4608      	mov	r0, r1
 800685a:	4611      	mov	r1, r2
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	f7fb f888 	bl	8001972 <_fstat>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d102      	bne.n	800686c <_fstat_r+0x1c>
 8006866:	682b      	ldr	r3, [r5, #0]
 8006868:	b103      	cbz	r3, 800686c <_fstat_r+0x1c>
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	bd38      	pop	{r3, r4, r5, pc}
 800686e:	bf00      	nop
 8006870:	2000021c 	.word	0x2000021c

08006874 <_isatty_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d06      	ldr	r5, [pc, #24]	; (8006890 <_isatty_r+0x1c>)
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	4608      	mov	r0, r1
 800687e:	602b      	str	r3, [r5, #0]
 8006880:	f7fb f887 	bl	8001992 <_isatty>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_isatty_r+0x1a>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_isatty_r+0x1a>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	2000021c 	.word	0x2000021c

08006894 <_lseek_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d07      	ldr	r5, [pc, #28]	; (80068b4 <_lseek_r+0x20>)
 8006898:	4604      	mov	r4, r0
 800689a:	4608      	mov	r0, r1
 800689c:	4611      	mov	r1, r2
 800689e:	2200      	movs	r2, #0
 80068a0:	602a      	str	r2, [r5, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f7fb f880 	bl	80019a8 <_lseek>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_lseek_r+0x1e>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_lseek_r+0x1e>
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	2000021c 	.word	0x2000021c

080068b8 <memcpy>:
 80068b8:	440a      	add	r2, r1
 80068ba:	4291      	cmp	r1, r2
 80068bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80068c0:	d100      	bne.n	80068c4 <memcpy+0xc>
 80068c2:	4770      	bx	lr
 80068c4:	b510      	push	{r4, lr}
 80068c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ce:	4291      	cmp	r1, r2
 80068d0:	d1f9      	bne.n	80068c6 <memcpy+0xe>
 80068d2:	bd10      	pop	{r4, pc}

080068d4 <memmove>:
 80068d4:	4288      	cmp	r0, r1
 80068d6:	b510      	push	{r4, lr}
 80068d8:	eb01 0402 	add.w	r4, r1, r2
 80068dc:	d902      	bls.n	80068e4 <memmove+0x10>
 80068de:	4284      	cmp	r4, r0
 80068e0:	4623      	mov	r3, r4
 80068e2:	d807      	bhi.n	80068f4 <memmove+0x20>
 80068e4:	1e43      	subs	r3, r0, #1
 80068e6:	42a1      	cmp	r1, r4
 80068e8:	d008      	beq.n	80068fc <memmove+0x28>
 80068ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068f2:	e7f8      	b.n	80068e6 <memmove+0x12>
 80068f4:	4402      	add	r2, r0
 80068f6:	4601      	mov	r1, r0
 80068f8:	428a      	cmp	r2, r1
 80068fa:	d100      	bne.n	80068fe <memmove+0x2a>
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006906:	e7f7      	b.n	80068f8 <memmove+0x24>

08006908 <_realloc_r>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	4607      	mov	r7, r0
 800690c:	4614      	mov	r4, r2
 800690e:	460e      	mov	r6, r1
 8006910:	b921      	cbnz	r1, 800691c <_realloc_r+0x14>
 8006912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006916:	4611      	mov	r1, r2
 8006918:	f7fe bee8 	b.w	80056ec <_malloc_r>
 800691c:	b922      	cbnz	r2, 8006928 <_realloc_r+0x20>
 800691e:	f7fe fe95 	bl	800564c <_free_r>
 8006922:	4625      	mov	r5, r4
 8006924:	4628      	mov	r0, r5
 8006926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006928:	f000 f826 	bl	8006978 <_malloc_usable_size_r>
 800692c:	42a0      	cmp	r0, r4
 800692e:	d20f      	bcs.n	8006950 <_realloc_r+0x48>
 8006930:	4621      	mov	r1, r4
 8006932:	4638      	mov	r0, r7
 8006934:	f7fe feda 	bl	80056ec <_malloc_r>
 8006938:	4605      	mov	r5, r0
 800693a:	2800      	cmp	r0, #0
 800693c:	d0f2      	beq.n	8006924 <_realloc_r+0x1c>
 800693e:	4631      	mov	r1, r6
 8006940:	4622      	mov	r2, r4
 8006942:	f7ff ffb9 	bl	80068b8 <memcpy>
 8006946:	4631      	mov	r1, r6
 8006948:	4638      	mov	r0, r7
 800694a:	f7fe fe7f 	bl	800564c <_free_r>
 800694e:	e7e9      	b.n	8006924 <_realloc_r+0x1c>
 8006950:	4635      	mov	r5, r6
 8006952:	e7e7      	b.n	8006924 <_realloc_r+0x1c>

08006954 <_read_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d07      	ldr	r5, [pc, #28]	; (8006974 <_read_r+0x20>)
 8006958:	4604      	mov	r4, r0
 800695a:	4608      	mov	r0, r1
 800695c:	4611      	mov	r1, r2
 800695e:	2200      	movs	r2, #0
 8006960:	602a      	str	r2, [r5, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	f7fa ffc0 	bl	80018e8 <_read>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_read_r+0x1e>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_read_r+0x1e>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	2000021c 	.word	0x2000021c

08006978 <_malloc_usable_size_r>:
 8006978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697c:	1f18      	subs	r0, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfbc      	itt	lt
 8006982:	580b      	ldrlt	r3, [r1, r0]
 8006984:	18c0      	addlt	r0, r0, r3
 8006986:	4770      	bx	lr

08006988 <_init>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr

08006994 <_fini>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr

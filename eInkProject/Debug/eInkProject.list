
eInkProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e84  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec0  0800aec0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800aec0  0800aec0  0001aec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aec8  0800aec8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aecc  0800aecc  0001aecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800aed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000088  0800af58  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800af58  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175ee  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003196  00000000  00000000  000376a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0003a840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294da  00000000  00000000  0003c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016683  00000000  00000000  00065baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4acc  00000000  00000000  0007c22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170cf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000496c  00000000  00000000  00170d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007024 	.word	0x08007024

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007024 	.word	0x08007024

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Time_Init>:
extern RTC_HandleTypeDef hrtc;
RTC_TimeTypeDef sTime;
RTC_AlarmTypeDef sAlarm;
RTC_DateTypeDef sDate;

void Time_Init(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	RTC_AlarmCallback();
 800056c:	f000 f80c 	bl	8000588 <RTC_AlarmCallback>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	RTC_AlarmCallback();
 800057c:	f000 f804 	bl	8000588 <RTC_AlarmCallback>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <RTC_AlarmCallback>:

// Called every minute
void RTC_AlarmCallback(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

	uint8_t seconds_interval = 1;
 800058e:	2301      	movs	r3, #1
 8000590:	71fb      	strb	r3, [r7, #7]
	if(seconds_interval > 59) seconds_interval = 59; //No bigger than 59 seconds
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b3b      	cmp	r3, #59	; 0x3b
 8000596:	d901      	bls.n	800059c <RTC_AlarmCallback+0x14>
 8000598:	233b      	movs	r3, #59	; 0x3b
 800059a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800059c:	2120      	movs	r1, #32
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f002 f975 	bl	8002890 <HAL_GPIO_TogglePin>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005a6:	2200      	movs	r2, #0
 80005a8:	4941      	ldr	r1, [pc, #260]	; (80006b0 <RTC_AlarmCallback+0x128>)
 80005aa:	4842      	ldr	r0, [pc, #264]	; (80006b4 <RTC_AlarmCallback+0x12c>)
 80005ac:	f003 fdae 	bl	800410c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); //Dummy read for valid time values
 80005b0:	2200      	movs	r2, #0
 80005b2:	4941      	ldr	r1, [pc, #260]	; (80006b8 <RTC_AlarmCallback+0x130>)
 80005b4:	483f      	ldr	r0, [pc, #252]	; (80006b4 <RTC_AlarmCallback+0x12c>)
 80005b6:	f003 fe8c 	bl	80042d2 <HAL_RTC_GetDate>

	uint8_t next_second = sTime.Seconds+=seconds_interval; //Max 59 second intervals
 80005ba:	4b3d      	ldr	r3, [pc, #244]	; (80006b0 <RTC_AlarmCallback+0x128>)
 80005bc:	789a      	ldrb	r2, [r3, #2]
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4413      	add	r3, r2
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b3a      	ldr	r3, [pc, #232]	; (80006b0 <RTC_AlarmCallback+0x128>)
 80005c6:	709a      	strb	r2, [r3, #2]
 80005c8:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <RTC_AlarmCallback+0x128>)
 80005ca:	789b      	ldrb	r3, [r3, #2]
 80005cc:	71bb      	strb	r3, [r7, #6]

	if (next_second >= 60) {
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	2b3b      	cmp	r3, #59	; 0x3b
 80005d2:	d924      	bls.n	800061e <RTC_AlarmCallback+0x96>
		sAlarm.AlarmTime.Minutes = sAlarm.AlarmTime.Minutes + 1;
 80005d4:	4b39      	ldr	r3, [pc, #228]	; (80006bc <RTC_AlarmCallback+0x134>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b37      	ldr	r3, [pc, #220]	; (80006bc <RTC_AlarmCallback+0x134>)
 80005de:	705a      	strb	r2, [r3, #1]
		sAlarm.AlarmTime.Seconds = next_second - 60;
 80005e0:	79bb      	ldrb	r3, [r7, #6]
 80005e2:	3b3c      	subs	r3, #60	; 0x3c
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <RTC_AlarmCallback+0x134>)
 80005e8:	709a      	strb	r2, [r3, #2]
		if (sAlarm.AlarmTime.Minutes == 60) {
 80005ea:	4b34      	ldr	r3, [pc, #208]	; (80006bc <RTC_AlarmCallback+0x134>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	2b3c      	cmp	r3, #60	; 0x3c
 80005f0:	d115      	bne.n	800061e <RTC_AlarmCallback+0x96>
			sAlarm.AlarmTime.Hours =  sAlarm.AlarmTime.Hours + 1;
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <RTC_AlarmCallback+0x134>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b30      	ldr	r3, [pc, #192]	; (80006bc <RTC_AlarmCallback+0x134>)
 80005fc:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.Minutes = 0;
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000600:	2200      	movs	r2, #0
 8000602:	705a      	strb	r2, [r3, #1]
			if (sAlarm.AlarmTime.Hours == 24) {
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b18      	cmp	r3, #24
 800060a:	d108      	bne.n	800061e <RTC_AlarmCallback+0x96>
				sAlarm.AlarmTime.Hours = 0;
 800060c:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <RTC_AlarmCallback+0x134>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
				sAlarm.AlarmTime.Minutes = 0;
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000614:	2200      	movs	r2, #0
 8000616:	705a      	strb	r2, [r3, #1]
				sAlarm.AlarmTime.Seconds = 0;
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <RTC_AlarmCallback+0x134>)
 800061a:	2200      	movs	r2, #0
 800061c:	709a      	strb	r2, [r3, #2]
			}
		}
	}

	sAlarm.AlarmTime.SubSeconds = 0x0;
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <RTC_AlarmCallback+0x134>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000632:	f04f 3280 	mov.w	r2, #2155905152	; 0x80808080
 8000636:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <RTC_AlarmCallback+0x134>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000646:	2201      	movs	r2, #1
 8000648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <RTC_AlarmCallback+0x134>)
 800064e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000654:	2200      	movs	r2, #0
 8000656:	4919      	ldr	r1, [pc, #100]	; (80006bc <RTC_AlarmCallback+0x134>)
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <RTC_AlarmCallback+0x12c>)
 800065a:	f003 fe87 	bl	800436c <HAL_RTC_SetAlarm_IT>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <RTC_AlarmCallback+0xe0>
	{
	Error_Handler();
 8000664:	f001 fb12 	bl	8001c8c <Error_Handler>
	}

	//Refresh Time
	//GUI_DrawTime();
	if((sTime.Seconds)%10 == 0 ){
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <RTC_AlarmCallback+0x128>)
 800066a:	789a      	ldrb	r2, [r3, #2]
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <RTC_AlarmCallback+0x138>)
 800066e:	fba3 1302 	umull	r1, r3, r3, r2
 8000672:	08d9      	lsrs	r1, r3, #3
 8000674:	460b      	mov	r3, r1
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d109      	bne.n	8000698 <RTC_AlarmCallback+0x110>
		if(sTime.Seconds == 0){
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <RTC_AlarmCallback+0x128>)
 8000686:	789b      	ldrb	r3, [r3, #2]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d102      	bne.n	8000692 <RTC_AlarmCallback+0x10a>
			drawTimeNowFullRedraw = 1;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <RTC_AlarmCallback+0x13c>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
		}
		drawTimeNow = 1;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <RTC_AlarmCallback+0x140>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
	}

	//Refresh Date
	if(sTime.Hours == 0 && sTime.Minutes == 0 && sTime.Seconds == 0){
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <RTC_AlarmCallback+0x128>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <RTC_AlarmCallback+0x11e>
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <RTC_AlarmCallback+0x128>)
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	2b00      	cmp	r3, #0
		drawDateNow;
	}


}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000b0 	.word	0x200000b0
 80006b4:	20000174 	.word	0x20000174
 80006b8:	200000f0 	.word	0x200000f0
 80006bc:	200000c4 	.word	0x200000c4
 80006c0:	cccccccd 	.word	0xcccccccd
 80006c4:	20000001 	.word	0x20000001
 80006c8:	20000000 	.word	0x20000000

080006cc <Init_GUI>:
extern RTC_HandleTypeDef hrtc;

UBYTE *BlackImage;
UWORD Imagesize = ((EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1)) * EPD_2IN13_V2_HEIGHT;

void Init_GUI(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af02      	add	r7, sp, #8
	EPD_2IN13_V2_Init(EPD_2IN13_V2_FULL);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fe96 	bl	8001404 <EPD_2IN13_V2_Init>
	EPD_2IN13_V2_Clear();
 80006d8:	f000 ff84 	bl	80015e4 <EPD_2IN13_V2_Clear>
	DEV_Delay_ms(100);
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f001 fd87 	bl	80021f0 <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <Init_GUI+0x78>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 faee 	bl	8005cc8 <malloc>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <Init_GUI+0x7c>)
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <Init_GUI+0x7c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d01f      	beq.n	800073c <Init_GUI+0x70>
		//printf("Failed to apply for black memory...\r\n");
		return;
	}
	//printf("Paint_NewImage\r\n");
	Paint_NewImage(BlackImage, EPD_2IN13_V2_WIDTH, EPD_2IN13_V2_HEIGHT, 270, WHITE);
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <Init_GUI+0x7c>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	23ff      	movs	r3, #255	; 0xff
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000708:	22fa      	movs	r2, #250	; 0xfa
 800070a:	217a      	movs	r1, #122	; 0x7a
 800070c:	f000 f91a 	bl	8000944 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <Init_GUI+0x7c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f96b 	bl	80009f0 <Paint_SelectImage>
	//Paint_SetMirroring(MIRROR_HORIZONTAL); //
	Paint_SetMirroring(MIRROR_VERTICAL); //
 800071a:	2002      	movs	r0, #2
 800071c:	f000 f978 	bl	8000a10 <Paint_SetMirroring>
	Paint_Clear(WHITE);
 8000720:	20ff      	movs	r0, #255	; 0xff
 8000722:	f000 faff 	bl	8000d24 <Paint_Clear>

	//Paint_DrawBitMap(gImage_2in13);
	Paint_DrawBitMap(splash);
 8000726:	4809      	ldr	r0, [pc, #36]	; (800074c <Init_GUI+0x80>)
 8000728:	f000 fd92 	bl	8001250 <Paint_DrawBitMap>

	EPD_2IN13_V2_Display(BlackImage);
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <Init_GUI+0x7c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f000 ff7e 	bl	8001632 <EPD_2IN13_V2_Display>
	//printf("Goto Sleep...\r\n");
	EPD_2IN13_V2_Sleep();
 8000736:	f001 f83a 	bl	80017ae <EPD_2IN13_V2_Sleep>
 800073a:	e000      	b.n	800073e <Init_GUI+0x72>
		return;
 800073c:	bf00      	nop

	//DEV_Module_Exit();

}
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000014 	.word	0x20000014
 8000748:	200000f4 	.word	0x200000f4
 800074c:	08009da8 	.word	0x08009da8

08000750 <GUI_DrawTime>:

void GUI_DrawTime(uint8_t full_redraw){
 8000750:	b580      	push	{r7, lr}
 8000752:	b09a      	sub	sp, #104	; 0x68
 8000754:	af02      	add	r7, sp, #8
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	if(full_redraw){
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d003      	beq.n	8000768 <GUI_DrawTime+0x18>
		EPD_2IN13_V2_Init(EPD_2IN13_V2_FULL); //Wakeup display...
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fe4f 	bl	8001404 <EPD_2IN13_V2_Init>
 8000766:	e002      	b.n	800076e <GUI_DrawTime+0x1e>
	}else{
		EPD_2IN13_V2_Init(EPD_2IN13_V2_PART); //Wakeup display...
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fe4b 	bl	8001404 <EPD_2IN13_V2_Init>
	}

	EPD_2IN13_V2_DisplayPartBaseImage(BlackImage);
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <GUI_DrawTime+0x128>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 ff8f 	bl	8001696 <EPD_2IN13_V2_DisplayPartBaseImage>

	EPD_2IN13_V2_Init(EPD_2IN13_V2_PART);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fe43 	bl	8001404 <EPD_2IN13_V2_Init>
	Paint_SelectImage(BlackImage);
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <GUI_DrawTime+0x128>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f934 	bl	80009f0 <Paint_SelectImage>

	RTC_TimeTypeDef sTime;
	RTC_AlarmTypeDef sAlarm;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	483a      	ldr	r0, [pc, #232]	; (800087c <GUI_DrawTime+0x12c>)
 8000792:	f003 fd9e 	bl	80042d2 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4837      	ldr	r0, [pc, #220]	; (800087c <GUI_DrawTime+0x12c>)
 80007a0:	f003 fcb4 	bl	800410c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	4833      	ldr	r0, [pc, #204]	; (800087c <GUI_DrawTime+0x12c>)
 80007ae:	f003 fd90 	bl	80042d2 <HAL_RTC_GetDate>

	rtctime.Hour = sTime.Hours;
 80007b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80007b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	rtctime.Min = sTime.Minutes;
 80007ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	rtctime.Sec = sTime.Seconds;
 80007c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	Paint_ClearWindows(125, 20, 125 + Font24.Width * 7, 20 + Font24.Height, WHITE);
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <GUI_DrawTime+0x130>)
 80007cc:	889b      	ldrh	r3, [r3, #4]
 80007ce:	461a      	mov	r2, r3
 80007d0:	00d2      	lsls	r2, r2, #3
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	337d      	adds	r3, #125	; 0x7d
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b29      	ldr	r3, [pc, #164]	; (8000880 <GUI_DrawTime+0x130>)
 80007dc:	88db      	ldrh	r3, [r3, #6]
 80007de:	3314      	adds	r3, #20
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	21ff      	movs	r1, #255	; 0xff
 80007e4:	9100      	str	r1, [sp, #0]
 80007e6:	2114      	movs	r1, #20
 80007e8:	207d      	movs	r0, #125	; 0x7d
 80007ea:	f000 fb07 	bl	8000dfc <Paint_ClearWindows>
	Paint_DrawTime(125, 20, &rtctime, &Font24, WHITE, BLACK);
 80007ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80007f2:	2300      	movs	r3, #0
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	23ff      	movs	r3, #255	; 0xff
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <GUI_DrawTime+0x130>)
 80007fc:	2114      	movs	r1, #20
 80007fe:	207d      	movs	r0, #125	; 0x7d
 8000800:	f000 fc26 	bl	8001050 <Paint_DrawTime>

	HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	2300      	movs	r3, #0
 800080a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800080e:	481b      	ldr	r0, [pc, #108]	; (800087c <GUI_DrawTime+0x12c>)
 8000810:	f003 ff7c 	bl	800470c <HAL_RTC_GetAlarm>
	alarmtime.Hour = sAlarm.AlarmTime.Hours;
 8000814:	7c3b      	ldrb	r3, [r7, #16]
 8000816:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	alarmtime.Min = sAlarm.AlarmTime.Minutes;
 800081a:	7c7b      	ldrb	r3, [r7, #17]
 800081c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	alarmtime.Sec = sAlarm.AlarmTime.Seconds;
 8000820:	7cbb      	ldrb	r3, [r7, #18]
 8000822:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	Paint_ClearWindows(125, 50, 125 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <GUI_DrawTime+0x130>)
 8000828:	889b      	ldrh	r3, [r3, #4]
 800082a:	461a      	mov	r2, r3
 800082c:	00d2      	lsls	r2, r2, #3
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	b29b      	uxth	r3, r3
 8000832:	337d      	adds	r3, #125	; 0x7d
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <GUI_DrawTime+0x130>)
 8000838:	88db      	ldrh	r3, [r3, #6]
 800083a:	3332      	adds	r3, #50	; 0x32
 800083c:	b29b      	uxth	r3, r3
 800083e:	21ff      	movs	r1, #255	; 0xff
 8000840:	9100      	str	r1, [sp, #0]
 8000842:	2132      	movs	r1, #50	; 0x32
 8000844:	207d      	movs	r0, #125	; 0x7d
 8000846:	f000 fad9 	bl	8000dfc <Paint_ClearWindows>
	Paint_DrawTime(125, 50, &alarmtime, &Font24, WHITE, BLACK);
 800084a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800084e:	2300      	movs	r3, #0
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	23ff      	movs	r3, #255	; 0xff
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <GUI_DrawTime+0x130>)
 8000858:	2132      	movs	r1, #50	; 0x32
 800085a:	207d      	movs	r0, #125	; 0x7d
 800085c:	f000 fbf8 	bl	8001050 <Paint_DrawTime>

	EPD_2IN13_V2_DisplayPart(BlackImage);
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <GUI_DrawTime+0x128>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f000 ff70 	bl	800174a <EPD_2IN13_V2_DisplayPart>

	EPD_2IN13_V2_Sleep(); //Put display to sleep...
 800086a:	f000 ffa0 	bl	80017ae <EPD_2IN13_V2_Sleep>

}
 800086e:	bf00      	nop
 8000870:	3760      	adds	r7, #96	; 0x60
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000f4 	.word	0x200000f4
 800087c:	20000174 	.word	0x20000174
 8000880:	2000000c 	.word	0x2000000c

08000884 <GUI_DrawDate>:

void GUI_DrawDate(){
 8000884:	b580      	push	{r7, lr}
 8000886:	b096      	sub	sp, #88	; 0x58
 8000888:	af02      	add	r7, sp, #8
	EPD_2IN13_V2_Init(EPD_2IN13_V2_PART);
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fdba 	bl	8001404 <EPD_2IN13_V2_Init>
	Paint_SelectImage(BlackImage);
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <GUI_DrawDate+0xac>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f8ab 	bl	80009f0 <Paint_SelectImage>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800089a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	4824      	ldr	r0, [pc, #144]	; (8000934 <GUI_DrawDate+0xb0>)
 80008a4:	f003 fc32 	bl	800410c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4820      	ldr	r0, [pc, #128]	; (8000934 <GUI_DrawDate+0xb0>)
 80008b2:	f003 fd0e 	bl	80042d2 <HAL_RTC_GetDate>

	uint8_t day = sDate.Date;
 80008b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t month = sDate.Month;
 80008be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80008c2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t year = sDate.Year;
 80008c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008ca:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	char text[50];
	sprintf(text, "%02d.%02d.%02d", day, month, year);
 80008ce:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80008d2:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 80008d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80008da:	4638      	mov	r0, r7
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	460b      	mov	r3, r1
 80008e0:	4915      	ldr	r1, [pc, #84]	; (8000938 <GUI_DrawDate+0xb4>)
 80008e2:	f005 fb49 	bl	8005f78 <siprintf>

	Paint_ClearWindows(125, 80, 125 + Font24.Width * 7, 80 + Font24.Height, WHITE);
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <GUI_DrawDate+0xb8>)
 80008e8:	889b      	ldrh	r3, [r3, #4]
 80008ea:	461a      	mov	r2, r3
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	337d      	adds	r3, #125	; 0x7d
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <GUI_DrawDate+0xb8>)
 80008f8:	88db      	ldrh	r3, [r3, #6]
 80008fa:	3350      	adds	r3, #80	; 0x50
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	9100      	str	r1, [sp, #0]
 8000902:	2150      	movs	r1, #80	; 0x50
 8000904:	207d      	movs	r0, #125	; 0x7d
 8000906:	f000 fa79 	bl	8000dfc <Paint_ClearWindows>
	Paint_DrawString_EN(125, 80, text, &Font20, WHITE, BLACK);
 800090a:	463a      	mov	r2, r7
 800090c:	2300      	movs	r3, #0
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	23ff      	movs	r3, #255	; 0xff
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <GUI_DrawDate+0xbc>)
 8000916:	2150      	movs	r1, #80	; 0x50
 8000918:	207d      	movs	r0, #125	; 0x7d
 800091a:	f000 fb45 	bl	8000fa8 <Paint_DrawString_EN>

	EPD_2IN13_V2_DisplayPart(BlackImage);
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <GUI_DrawDate+0xac>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 ff11 	bl	800174a <EPD_2IN13_V2_DisplayPart>

}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000f4 	.word	0x200000f4
 8000934:	20000174 	.word	0x20000174
 8000938:	0800703c 	.word	0x0800703c
 800093c:	2000000c 	.word	0x2000000c
 8000940:	20000004 	.word	0x20000004

08000944 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	4608      	mov	r0, r1
 800094e:	4611      	mov	r1, r2
 8000950:	461a      	mov	r2, r3
 8000952:	4603      	mov	r3, r0
 8000954:	817b      	strh	r3, [r7, #10]
 8000956:	460b      	mov	r3, r1
 8000958:	813b      	strh	r3, [r7, #8]
 800095a:	4613      	mov	r3, r2
 800095c:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <Paint_NewImage+0xa8>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <Paint_NewImage+0xa8>)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800096a:	4a20      	ldr	r2, [pc, #128]	; (80009ec <Paint_NewImage+0xa8>)
 800096c:	897b      	ldrh	r3, [r7, #10]
 800096e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000970:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <Paint_NewImage+0xa8>)
 8000972:	893b      	ldrh	r3, [r7, #8]
 8000974:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000976:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <Paint_NewImage+0xa8>)
 8000978:	8b3b      	ldrh	r3, [r7, #24]
 800097a:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <Paint_NewImage+0xa8>)
 800097e:	2202      	movs	r2, #2
 8000980:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000982:	897b      	ldrh	r3, [r7, #10]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	b29b      	uxth	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d103      	bne.n	8000996 <Paint_NewImage+0x52>
 800098e:	897b      	ldrh	r3, [r7, #10]
 8000990:	08db      	lsrs	r3, r3, #3
 8000992:	b29b      	uxth	r3, r3
 8000994:	e004      	b.n	80009a0 <Paint_NewImage+0x5c>
 8000996:	897b      	ldrh	r3, [r7, #10]
 8000998:	08db      	lsrs	r3, r3, #3
 800099a:	b29b      	uxth	r3, r3
 800099c:	3301      	adds	r3, #1
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <Paint_NewImage+0xa8>)
 80009a2:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <Paint_NewImage+0xa8>)
 80009a6:	893b      	ldrh	r3, [r7, #8]
 80009a8:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <Paint_NewImage+0xa8>)
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <Paint_NewImage+0xa8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <Paint_NewImage+0x7e>
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	2bb4      	cmp	r3, #180	; 0xb4
 80009c0:	d106      	bne.n	80009d0 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <Paint_NewImage+0xa8>)
 80009c4:	897b      	ldrh	r3, [r7, #10]
 80009c6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <Paint_NewImage+0xa8>)
 80009ca:	893b      	ldrh	r3, [r7, #8]
 80009cc:	80d3      	strh	r3, [r2, #6]
 80009ce:	e006      	b.n	80009de <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <Paint_NewImage+0xa8>)
 80009d2:	893b      	ldrh	r3, [r7, #8]
 80009d4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <Paint_NewImage+0xa8>)
 80009d8:	897b      	ldrh	r3, [r7, #10]
 80009da:	80d3      	strh	r3, [r2, #6]
    }
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200000f8 	.word	0x200000f8

080009f0 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <Paint_SelectImage+0x1c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200000f8 	.word	0x200000f8

08000a10 <Paint_SetMirroring>:
function:	Select Image mirror
parameter:
    mirror   :Not mirror,Horizontal mirror,Vertical mirror,Origin mirror
******************************************************************************/
void Paint_SetMirroring(UBYTE mirror)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
    if(mirror == MIRROR_NONE || mirror == MIRROR_HORIZONTAL || 
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d008      	beq.n	8000a32 <Paint_SetMirroring+0x22>
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d005      	beq.n	8000a32 <Paint_SetMirroring+0x22>
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d002      	beq.n	8000a32 <Paint_SetMirroring+0x22>
        mirror == MIRROR_VERTICAL || mirror == MIRROR_ORIGIN) {
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d11a      	bne.n	8000a68 <Paint_SetMirroring+0x58>
        Debug("mirror image x:%s, y:%s\r\n",(mirror & 0x01)? "mirror":"none", ((mirror >> 1) & 0x01)? "mirror":"none");
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <Paint_SetMirroring+0x30>
 8000a3c:	490e      	ldr	r1, [pc, #56]	; (8000a78 <Paint_SetMirroring+0x68>)
 8000a3e:	e000      	b.n	8000a42 <Paint_SetMirroring+0x32>
 8000a40:	490e      	ldr	r1, [pc, #56]	; (8000a7c <Paint_SetMirroring+0x6c>)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <Paint_SetMirroring+0x44>
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <Paint_SetMirroring+0x68>)
 8000a52:	e000      	b.n	8000a56 <Paint_SetMirroring+0x46>
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <Paint_SetMirroring+0x6c>)
 8000a56:	461a      	mov	r2, r3
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <Paint_SetMirroring+0x70>)
 8000a5a:	f005 f9ef 	bl	8005e3c <iprintf>
        Paint.Mirror = mirror;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <Paint_SetMirroring+0x74>)
 8000a64:	821a      	strh	r2, [r3, #16]
        mirror == MIRROR_VERTICAL || mirror == MIRROR_ORIGIN) {
 8000a66:	e003      	b.n	8000a70 <Paint_SetMirroring+0x60>
    } else {
        Debug("mirror should be MIRROR_NONE, MIRROR_HORIZONTAL, \
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <Paint_SetMirroring+0x78>)
 8000a6a:	f005 fa6d 	bl	8005f48 <puts>
        MIRROR_VERTICAL or MIRROR_ORIGIN\r\n");
    }    
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	080070dc 	.word	0x080070dc
 8000a7c:	080070e4 	.word	0x080070e4
 8000a80:	080070ec 	.word	0x080070ec
 8000a84:	200000f8 	.word	0x200000f8
 8000a88:	08007110 	.word	0x08007110

08000a8c <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	460b      	mov	r3, r1
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000a9e:	4b9f      	ldr	r3, [pc, #636]	; (8000d1c <Paint_SetPixel+0x290>)
 8000aa0:	889b      	ldrh	r3, [r3, #4]
 8000aa2:	88fa      	ldrh	r2, [r7, #6]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d804      	bhi.n	8000ab2 <Paint_SetPixel+0x26>
 8000aa8:	4b9c      	ldr	r3, [pc, #624]	; (8000d1c <Paint_SetPixel+0x290>)
 8000aaa:	88db      	ldrh	r3, [r3, #6]
 8000aac:	88ba      	ldrh	r2, [r7, #4]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d903      	bls.n	8000aba <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8000ab2:	489b      	ldr	r0, [pc, #620]	; (8000d20 <Paint_SetPixel+0x294>)
 8000ab4:	f005 fa48 	bl	8005f48 <puts>
        return;
 8000ab8:	e12d      	b.n	8000d16 <Paint_SetPixel+0x28a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000aba:	4b98      	ldr	r3, [pc, #608]	; (8000d1c <Paint_SetPixel+0x290>)
 8000abc:	89db      	ldrh	r3, [r3, #14]
 8000abe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000ac2:	d02b      	beq.n	8000b1c <Paint_SetPixel+0x90>
 8000ac4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000ac8:	f300 8122 	bgt.w	8000d10 <Paint_SetPixel+0x284>
 8000acc:	2bb4      	cmp	r3, #180	; 0xb4
 8000ace:	d016      	beq.n	8000afe <Paint_SetPixel+0x72>
 8000ad0:	2bb4      	cmp	r3, #180	; 0xb4
 8000ad2:	f300 811d 	bgt.w	8000d10 <Paint_SetPixel+0x284>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <Paint_SetPixel+0x54>
 8000ada:	2b5a      	cmp	r3, #90	; 0x5a
 8000adc:	d005      	beq.n	8000aea <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8000ade:	e117      	b.n	8000d10 <Paint_SetPixel+0x284>
        X = Xpoint;
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000ae8:	e022      	b.n	8000b30 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 8000aea:	4b8c      	ldr	r3, [pc, #560]	; (8000d1c <Paint_SetPixel+0x290>)
 8000aec:	891a      	ldrh	r2, [r3, #8]
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	3b01      	subs	r3, #1
 8000af6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000afc:	e018      	b.n	8000b30 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8000afe:	4b87      	ldr	r3, [pc, #540]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b00:	891a      	ldrh	r2, [r3, #8]
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8000b0c:	4b83      	ldr	r3, [pc, #524]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b0e:	895a      	ldrh	r2, [r3, #10]
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	3b01      	subs	r3, #1
 8000b18:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000b1a:	e009      	b.n	8000b30 <Paint_SetPixel+0xa4>
        X = Ypoint;
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8000b20:	4b7e      	ldr	r3, [pc, #504]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b22:	895a      	ldrh	r2, [r3, #10]
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000b2e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000b30:	4b7a      	ldr	r3, [pc, #488]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b32:	8a1b      	ldrh	r3, [r3, #16]
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	f200 80ed 	bhi.w	8000d14 <Paint_SetPixel+0x288>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <Paint_SetPixel+0xb4>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b8f 	.word	0x08000b8f
 8000b44:	08000b51 	.word	0x08000b51
 8000b48:	08000b61 	.word	0x08000b61
 8000b4c:	08000b71 	.word	0x08000b71
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000b50:	4b72      	ldr	r3, [pc, #456]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b52:	891a      	ldrh	r2, [r3, #8]
 8000b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8000b5e:	e017      	b.n	8000b90 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000b60:	4b6e      	ldr	r3, [pc, #440]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b62:	895a      	ldrh	r2, [r3, #10]
 8000b64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000b6e:	e00f      	b.n	8000b90 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000b70:	4b6a      	ldr	r3, [pc, #424]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b72:	891a      	ldrh	r2, [r3, #8]
 8000b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8000b7e:	4b67      	ldr	r3, [pc, #412]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b80:	895a      	ldrh	r2, [r3, #10]
 8000b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000b8c:	e000      	b.n	8000b90 <Paint_SetPixel+0x104>
        break;
 8000b8e:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000b90:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b92:	891b      	ldrh	r3, [r3, #8]
 8000b94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d804      	bhi.n	8000ba4 <Paint_SetPixel+0x118>
 8000b9a:	4b60      	ldr	r3, [pc, #384]	; (8000d1c <Paint_SetPixel+0x290>)
 8000b9c:	895b      	ldrh	r3, [r3, #10]
 8000b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d903      	bls.n	8000bac <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8000ba4:	485e      	ldr	r0, [pc, #376]	; (8000d20 <Paint_SetPixel+0x294>)
 8000ba6:	f005 f9cf 	bl	8005f48 <puts>
        return;
 8000baa:	e0b4      	b.n	8000d16 <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 8000bac:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <Paint_SetPixel+0x290>)
 8000bae:	8adb      	ldrh	r3, [r3, #22]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d139      	bne.n	8000c28 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8000bb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bbe:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <Paint_SetPixel+0x290>)
 8000bc0:	8a52      	ldrh	r2, [r2, #18]
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	440b      	add	r3, r1
 8000bc8:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8000bca:	4b54      	ldr	r3, [pc, #336]	; (8000d1c <Paint_SetPixel+0x290>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d113      	bne.n	8000c04 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000bdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	fa42 f303 	asr.w	r3, r2, r3
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	b25a      	sxtb	r2, r3
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	b259      	sxtb	r1, r3
 8000bf6:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <Paint_SetPixel+0x290>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2ca      	uxtb	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e088      	b.n	8000d16 <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000c04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	fa42 f303 	asr.w	r3, r2, r3
 8000c10:	b25a      	sxtb	r2, r3
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b259      	sxtb	r1, r3
 8000c1a:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <Paint_SetPixel+0x290>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4413      	add	r3, r2
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e076      	b.n	8000d16 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8000c28:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <Paint_SetPixel+0x290>)
 8000c2a:	8adb      	ldrh	r3, [r3, #22]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d137      	bne.n	8000ca0 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000c30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c3a:	4a38      	ldr	r2, [pc, #224]	; (8000d1c <Paint_SetPixel+0x290>)
 8000c3c:	8a52      	ldrh	r2, [r2, #18]
 8000c3e:	fb02 f303 	mul.w	r3, r2, r3
 8000c42:	440b      	add	r3, r1
 8000c44:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8000c4e:	4b33      	ldr	r3, [pc, #204]	; (8000d1c <Paint_SetPixel+0x290>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	22c0      	movs	r2, #192	; 0xc0
 8000c64:	fa42 f303 	asr.w	r3, r2, r3
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	b25a      	sxtb	r2, r3
 8000c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c72:	4013      	ands	r3, r2
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	019a      	lsls	r2, r3, #6
 8000c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	fa42 f303 	asr.w	r3, r2, r3
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b259      	sxtb	r1, r3
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <Paint_SetPixel+0x290>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e03a      	b.n	8000d16 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <Paint_SetPixel+0x290>)
 8000ca2:	8adb      	ldrh	r3, [r3, #22]
 8000ca4:	2b07      	cmp	r3, #7
 8000ca6:	d136      	bne.n	8000d16 <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8000ca8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000caa:	085b      	lsrs	r3, r3, #1
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cb2:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <Paint_SetPixel+0x290>)
 8000cb4:	8a52      	ldrh	r2, [r2, #18]
 8000cb6:	fb02 f303 	mul.w	r3, r2, r3
 8000cba:	440b      	add	r3, r1
 8000cbc:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <Paint_SetPixel+0x290>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8000cca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	22f0      	movs	r2, #240	; 0xf0
 8000cd4:	fa42 f303 	asr.w	r3, r2, r3
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	b25a      	sxtb	r2, r3
 8000cde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	011a      	lsls	r2, r3, #4
 8000cec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fa42 f303 	asr.w	r3, r2, r3
 8000cf8:	b25a      	sxtb	r2, r3
 8000cfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b259      	sxtb	r1, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <Paint_SetPixel+0x290>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	4413      	add	r3, r2
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e002      	b.n	8000d16 <Paint_SetPixel+0x28a>
        return;
 8000d10:	bf00      	nop
 8000d12:	e000      	b.n	8000d16 <Paint_SetPixel+0x28a>
        return;
 8000d14:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000f8 	.word	0x200000f8
 8000d20:	08007174 	.word	0x08007174

08000d24 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <Paint_Clear+0xd4>)
 8000d30:	8adb      	ldrh	r3, [r3, #22]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d003      	beq.n	8000d3e <Paint_Clear+0x1a>
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <Paint_Clear+0xd4>)
 8000d38:	8adb      	ldrh	r3, [r3, #22]
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d125      	bne.n	8000d8a <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	82fb      	strh	r3, [r7, #22]
 8000d42:	e01c      	b.n	8000d7e <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000d44:	2300      	movs	r3, #0
 8000d46:	82bb      	strh	r3, [r7, #20]
 8000d48:	e011      	b.n	8000d6e <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000d4a:	8aba      	ldrh	r2, [r7, #20]
 8000d4c:	8afb      	ldrh	r3, [r7, #22]
 8000d4e:	492a      	ldr	r1, [pc, #168]	; (8000df8 <Paint_Clear+0xd4>)
 8000d50:	8a49      	ldrh	r1, [r1, #18]
 8000d52:	fb01 f303 	mul.w	r3, r1, r3
 8000d56:	4413      	add	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <Paint_Clear+0xd4>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	4413      	add	r3, r2
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000d68:	8abb      	ldrh	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	82bb      	strh	r3, [r7, #20]
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <Paint_Clear+0xd4>)
 8000d70:	8a5b      	ldrh	r3, [r3, #18]
 8000d72:	8aba      	ldrh	r2, [r7, #20]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3e8      	bcc.n	8000d4a <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000d78:	8afb      	ldrh	r3, [r7, #22]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	82fb      	strh	r3, [r7, #22]
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <Paint_Clear+0xd4>)
 8000d80:	8a9b      	ldrh	r3, [r3, #20]
 8000d82:	8afa      	ldrh	r2, [r7, #22]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d3dd      	bcc.n	8000d44 <Paint_Clear+0x20>
 8000d88:	e02f      	b.n	8000dea <Paint_Clear+0xc6>
			}
		}		
	}else if(Paint.Scale == 7){
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <Paint_Clear+0xd4>)
 8000d8c:	8adb      	ldrh	r3, [r3, #22]
 8000d8e:	2b07      	cmp	r3, #7
 8000d90:	d12b      	bne.n	8000dea <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	827b      	strh	r3, [r7, #18]
 8000d96:	e022      	b.n	8000dde <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	823b      	strh	r3, [r7, #16]
 8000d9c:	e017      	b.n	8000dce <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000d9e:	8a3a      	ldrh	r2, [r7, #16]
 8000da0:	8a7b      	ldrh	r3, [r7, #18]
 8000da2:	4915      	ldr	r1, [pc, #84]	; (8000df8 <Paint_Clear+0xd4>)
 8000da4:	8a49      	ldrh	r1, [r1, #18]
 8000da6:	fb01 f303 	mul.w	r3, r1, r3
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b259      	sxtb	r1, r3
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <Paint_Clear+0xd4>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2ca      	uxtb	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000dc8:	8a3b      	ldrh	r3, [r7, #16]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	823b      	strh	r3, [r7, #16]
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <Paint_Clear+0xd4>)
 8000dd0:	8a5b      	ldrh	r3, [r3, #18]
 8000dd2:	8a3a      	ldrh	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d3e2      	bcc.n	8000d9e <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000dd8:	8a7b      	ldrh	r3, [r7, #18]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	827b      	strh	r3, [r7, #18]
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <Paint_Clear+0xd4>)
 8000de0:	8a9b      	ldrh	r3, [r3, #20]
 8000de2:	8a7a      	ldrh	r2, [r7, #18]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d3d7      	bcc.n	8000d98 <Paint_Clear+0x74>
			}
		}		
	}
}
 8000de8:	e7ff      	b.n	8000dea <Paint_Clear+0xc6>
 8000dea:	bf00      	nop
 8000dec:	371c      	adds	r7, #28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200000f8 	.word	0x200000f8

08000dfc <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	80fb      	strh	r3, [r7, #6]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	807b      	strh	r3, [r7, #2]
 8000e16:	4613      	mov	r3, r2
 8000e18:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	81bb      	strh	r3, [r7, #12]
 8000e1e:	e012      	b.n	8000e46 <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	81fb      	strh	r3, [r7, #14]
 8000e24:	e008      	b.n	8000e38 <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 8000e26:	8c3a      	ldrh	r2, [r7, #32]
 8000e28:	89b9      	ldrh	r1, [r7, #12]
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe2d 	bl	8000a8c <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	3301      	adds	r3, #1
 8000e36:	81fb      	strh	r3, [r7, #14]
 8000e38:	89fa      	ldrh	r2, [r7, #14]
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3f2      	bcc.n	8000e26 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8000e40:	89bb      	ldrh	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	81bb      	strh	r3, [r7, #12]
 8000e46:	89ba      	ldrh	r2, [r7, #12]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3e8      	bcc.n	8000e20 <Paint_ClearWindows+0x24>
        }
    }
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}

08000e58 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	4603      	mov	r3, r0
 8000e62:	81fb      	strh	r3, [r7, #14]
 8000e64:	460b      	mov	r3, r1
 8000e66:	81bb      	strh	r3, [r7, #12]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000e6c:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <Paint_DrawChar+0x148>)
 8000e6e:	889b      	ldrh	r3, [r3, #4]
 8000e70:	89fa      	ldrh	r2, [r7, #14]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d804      	bhi.n	8000e80 <Paint_DrawChar+0x28>
 8000e76:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <Paint_DrawChar+0x148>)
 8000e78:	88db      	ldrh	r3, [r3, #6]
 8000e7a:	89ba      	ldrh	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d903      	bls.n	8000e88 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8000e80:	4848      	ldr	r0, [pc, #288]	; (8000fa4 <Paint_DrawChar+0x14c>)
 8000e82:	f005 f861 	bl	8005f48 <puts>
        return;
 8000e86:	e087      	b.n	8000f98 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	3b20      	subs	r3, #32
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	88d2      	ldrh	r2, [r2, #6]
 8000e90:	fb02 f303 	mul.w	r3, r2, r3
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	8892      	ldrh	r2, [r2, #4]
 8000e98:	08d2      	lsrs	r2, r2, #3
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	8892      	ldrh	r2, [r2, #4]
 8000ea2:	f002 0207 	and.w	r2, r2, #7
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2201      	movne	r2, #1
 8000eae:	2200      	moveq	r2, #0
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440a      	add	r2, r1
 8000eb4:	fb02 f303 	mul.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	83fb      	strh	r3, [r7, #30]
 8000ec8:	e061      	b.n	8000f8e <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	83bb      	strh	r3, [r7, #28]
 8000ece:	e04c      	b.n	8000f6a <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000ed0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ed2:	2bff      	cmp	r3, #255	; 0xff
 8000ed4:	d118      	bne.n	8000f08 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	8bbb      	ldrh	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	fa42 f303 	asr.w	r3, r2, r3
 8000ee8:	400b      	ands	r3, r1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d031      	beq.n	8000f52 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000eee:	89fa      	ldrh	r2, [r7, #14]
 8000ef0:	8bbb      	ldrh	r3, [r7, #28]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	89ba      	ldrh	r2, [r7, #12]
 8000ef8:	8bfb      	ldrh	r3, [r7, #30]
 8000efa:	4413      	add	r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fdc3 	bl	8000a8c <Paint_SetPixel>
 8000f06:	e024      	b.n	8000f52 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	8bbb      	ldrh	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	fa42 f303 	asr.w	r3, r2, r3
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00c      	beq.n	8000f3a <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000f20:	89fa      	ldrh	r2, [r7, #14]
 8000f22:	8bbb      	ldrh	r3, [r7, #28]
 8000f24:	4413      	add	r3, r2
 8000f26:	b298      	uxth	r0, r3
 8000f28:	89ba      	ldrh	r2, [r7, #12]
 8000f2a:	8bfb      	ldrh	r3, [r7, #30]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fdaa 	bl	8000a8c <Paint_SetPixel>
 8000f38:	e00b      	b.n	8000f52 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000f3a:	89fa      	ldrh	r2, [r7, #14]
 8000f3c:	8bbb      	ldrh	r3, [r7, #28]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b298      	uxth	r0, r3
 8000f42:	89ba      	ldrh	r2, [r7, #12]
 8000f44:	8bfb      	ldrh	r3, [r7, #30]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fd9d 	bl	8000a8c <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000f52:	8bbb      	ldrh	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d102      	bne.n	8000f64 <Paint_DrawChar+0x10c>
                ptr++;
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000f64:	8bbb      	ldrh	r3, [r7, #28]
 8000f66:	3301      	adds	r3, #1
 8000f68:	83bb      	strh	r3, [r7, #28]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	889b      	ldrh	r3, [r3, #4]
 8000f6e:	8bba      	ldrh	r2, [r7, #28]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3ad      	bcc.n	8000ed0 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	889b      	ldrh	r3, [r3, #4]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <Paint_DrawChar+0x130>
            ptr++;
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	83fb      	strh	r3, [r7, #30]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	88db      	ldrh	r3, [r3, #6]
 8000f92:	8bfa      	ldrh	r2, [r7, #30]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d398      	bcc.n	8000eca <Paint_DrawChar+0x72>
    }// Write all
}
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000f8 	.word	0x200000f8
 8000fa4:	080072d8 	.word	0x080072d8

08000fa8 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	60ba      	str	r2, [r7, #8]
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	81fb      	strh	r3, [r7, #14]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <Paint_DrawString_EN+0xa0>)
 8000fc4:	889b      	ldrh	r3, [r3, #4]
 8000fc6:	89fa      	ldrh	r2, [r7, #14]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d804      	bhi.n	8000fd6 <Paint_DrawString_EN+0x2e>
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <Paint_DrawString_EN+0xa0>)
 8000fce:	88db      	ldrh	r3, [r3, #6]
 8000fd0:	89ba      	ldrh	r2, [r7, #12]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d931      	bls.n	800103a <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8000fd6:	481d      	ldr	r0, [pc, #116]	; (800104c <Paint_DrawString_EN+0xa4>)
 8000fd8:	f004 ffb6 	bl	8005f48 <puts>
        return;
 8000fdc:	e031      	b.n	8001042 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000fde:	8afb      	ldrh	r3, [r7, #22]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	8892      	ldrh	r2, [r2, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a18      	ldr	r2, [pc, #96]	; (8001048 <Paint_DrawString_EN+0xa0>)
 8000fe8:	8892      	ldrh	r2, [r2, #4]
 8000fea:	4293      	cmp	r3, r2
 8000fec:	dd06      	ble.n	8000ffc <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	88da      	ldrh	r2, [r3, #6]
 8000ff6:	8abb      	ldrh	r3, [r7, #20]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000ffc:	8abb      	ldrh	r3, [r7, #20]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	88d2      	ldrh	r2, [r2, #6]
 8001002:	4413      	add	r3, r2
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <Paint_DrawString_EN+0xa0>)
 8001006:	88d2      	ldrh	r2, [r2, #6]
 8001008:	4293      	cmp	r3, r2
 800100a:	dd03      	ble.n	8001014 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001010:	89bb      	ldrh	r3, [r7, #12]
 8001012:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	8ab9      	ldrh	r1, [r7, #20]
 800101a:	8af8      	ldrh	r0, [r7, #22]
 800101c:	8c3b      	ldrh	r3, [r7, #32]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f7ff ff17 	bl	8000e58 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3301      	adds	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	889a      	ldrh	r2, [r3, #4]
 8001034:	8afb      	ldrh	r3, [r7, #22]
 8001036:	4413      	add	r3, r2
 8001038:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1cd      	bne.n	8000fde <Paint_DrawString_EN+0x36>
    }
}
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000f8 	.word	0x200000f8
 800104c:	08007318 	.word	0x08007318

08001050 <Paint_DrawTime>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af02      	add	r7, sp, #8
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4603      	mov	r3, r0
 800105c:	81fb      	strh	r3, [r7, #14]
 800105e:	460b      	mov	r3, r1
 8001060:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8001062:	4a79      	ldr	r2, [pc, #484]	; (8001248 <Paint_DrawTime+0x1f8>)
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	ca07      	ldmia	r2, {r0, r1, r2}
 800106a:	c303      	stmia	r3!, {r0, r1}
 800106c:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	889b      	ldrh	r3, [r3, #4]
 8001072:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	4a74      	ldr	r2, [pc, #464]	; (800124c <Paint_DrawTime+0x1fc>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	08db      	lsrs	r3, r3, #3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f107 0220 	add.w	r2, r7, #32
 8001086:	4413      	add	r3, r2
 8001088:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800108c:	89b9      	ldrh	r1, [r7, #12]
 800108e:	89f8      	ldrh	r0, [r7, #14]
 8001090:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f7ff fedd 	bl	8000e58 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 800109e:	89fa      	ldrh	r2, [r7, #14]
 80010a0:	8bfb      	ldrh	r3, [r7, #30]
 80010a2:	4413      	add	r3, r2
 80010a4:	b298      	uxth	r0, r3
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	791a      	ldrb	r2, [r3, #4]
 80010aa:	4b68      	ldr	r3, [pc, #416]	; (800124c <Paint_DrawTime+0x1fc>)
 80010ac:	fba3 1302 	umull	r1, r3, r3, r2
 80010b0:	08d9      	lsrs	r1, r3, #3
 80010b2:	460b      	mov	r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f107 0220 	add.w	r2, r7, #32
 80010c2:	4413      	add	r3, r2
 80010c4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80010c8:	89b9      	ldrh	r1, [r7, #12]
 80010ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f7ff fec0 	bl	8000e58 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 80010d8:	89fa      	ldrh	r2, [r7, #14]
 80010da:	8bfb      	ldrh	r3, [r7, #30]
 80010dc:	4413      	add	r3, r2
 80010de:	b29a      	uxth	r2, r3
 80010e0:	8bfb      	ldrh	r3, [r7, #30]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	8bfb      	ldrh	r3, [r7, #30]
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b298      	uxth	r0, r3
 80010f4:	89b9      	ldrh	r1, [r7, #12]
 80010f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	223a      	movs	r2, #58	; 0x3a
 8001102:	f7ff fea9 	bl	8000e58 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 8001106:	8bfb      	ldrh	r3, [r7, #30]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	4413      	add	r3, r2
 8001110:	b29a      	uxth	r2, r3
 8001112:	8bfb      	ldrh	r3, [r7, #30]
 8001114:	085b      	lsrs	r3, r3, #1
 8001116:	b29b      	uxth	r3, r3
 8001118:	4413      	add	r3, r2
 800111a:	b298      	uxth	r0, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	795b      	ldrb	r3, [r3, #5]
 8001120:	4a4a      	ldr	r2, [pc, #296]	; (800124c <Paint_DrawTime+0x1fc>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f107 0220 	add.w	r2, r7, #32
 800112e:	4413      	add	r3, r2
 8001130:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001134:	89b9      	ldrh	r1, [r7, #12]
 8001136:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f7ff fe8a 	bl	8000e58 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 8001144:	8bfb      	ldrh	r3, [r7, #30]
 8001146:	461a      	mov	r2, r3
 8001148:	0052      	lsls	r2, r2, #1
 800114a:	4413      	add	r3, r2
 800114c:	b29a      	uxth	r2, r3
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	4413      	add	r3, r2
 8001152:	b29a      	uxth	r2, r3
 8001154:	8bfb      	ldrh	r3, [r7, #30]
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	b29b      	uxth	r3, r3
 800115a:	4413      	add	r3, r2
 800115c:	b298      	uxth	r0, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	795a      	ldrb	r2, [r3, #5]
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <Paint_DrawTime+0x1fc>)
 8001164:	fba3 1302 	umull	r1, r3, r3, r2
 8001168:	08d9      	lsrs	r1, r3, #3
 800116a:	460b      	mov	r3, r1
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	f107 0220 	add.w	r2, r7, #32
 800117a:	4413      	add	r3, r2
 800117c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001180:	89b9      	ldrh	r1, [r7, #12]
 8001182:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f7ff fe64 	bl	8000e58 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8001190:	8bfb      	ldrh	r3, [r7, #30]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	b29a      	uxth	r2, r3
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	4413      	add	r3, r2
 800119a:	b29a      	uxth	r2, r3
 800119c:	8bfb      	ldrh	r3, [r7, #30]
 800119e:	085b      	lsrs	r3, r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	8bfb      	ldrh	r3, [r7, #30]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b298      	uxth	r0, r3
 80011b0:	89b9      	ldrh	r1, [r7, #12]
 80011b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	223a      	movs	r2, #58	; 0x3a
 80011be:	f7ff fe4b 	bl	8000e58 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 80011c2:	8bfb      	ldrh	r3, [r7, #30]
 80011c4:	461a      	mov	r2, r3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	4413      	add	r3, r2
 80011d0:	b298      	uxth	r0, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	799b      	ldrb	r3, [r3, #6]
 80011d6:	4a1d      	ldr	r2, [pc, #116]	; (800124c <Paint_DrawTime+0x1fc>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f107 0220 	add.w	r2, r7, #32
 80011e4:	4413      	add	r3, r2
 80011e6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80011ea:	89b9      	ldrh	r1, [r7, #12]
 80011ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f7ff fe2f 	bl	8000e58 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 80011fa:	8bfb      	ldrh	r3, [r7, #30]
 80011fc:	461a      	mov	r2, r3
 80011fe:	0052      	lsls	r2, r2, #1
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	89fb      	ldrh	r3, [r7, #14]
 8001208:	4413      	add	r3, r2
 800120a:	b298      	uxth	r0, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	799a      	ldrb	r2, [r3, #6]
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <Paint_DrawTime+0x1fc>)
 8001212:	fba3 1302 	umull	r1, r3, r3, r2
 8001216:	08d9      	lsrs	r1, r3, #3
 8001218:	460b      	mov	r3, r1
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f107 0220 	add.w	r2, r7, #32
 8001228:	4413      	add	r3, r2
 800122a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800122e:	89b9      	ldrh	r1, [r7, #12]
 8001230:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f7ff fe0d 	bl	8000e58 <Paint_DrawChar>
}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08007398 	.word	0x08007398
 800124c:	cccccccd 	.word	0xcccccccd

08001250 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 800125c:	2300      	movs	r3, #0
 800125e:	81bb      	strh	r3, [r7, #12]
 8001260:	e01e      	b.n	80012a0 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8001262:	2300      	movs	r3, #0
 8001264:	81fb      	strh	r3, [r7, #14]
 8001266:	e013      	b.n	8001290 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 8001268:	89fa      	ldrh	r2, [r7, #14]
 800126a:	89bb      	ldrh	r3, [r7, #12]
 800126c:	4912      	ldr	r1, [pc, #72]	; (80012b8 <Paint_DrawBitMap+0x68>)
 800126e:	8a49      	ldrh	r1, [r1, #18]
 8001270:	fb01 f303 	mul.w	r3, r1, r3
 8001274:	4413      	add	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	441a      	add	r2, r3
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <Paint_DrawBitMap+0x68>)
 8001280:	6819      	ldr	r1, [r3, #0]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	440b      	add	r3, r1
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	3301      	adds	r3, #1
 800128e:	81fb      	strh	r3, [r7, #14]
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <Paint_DrawBitMap+0x68>)
 8001292:	8a5b      	ldrh	r3, [r3, #18]
 8001294:	89fa      	ldrh	r2, [r7, #14]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3e6      	bcc.n	8001268 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 800129a:	89bb      	ldrh	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	81bb      	strh	r3, [r7, #12]
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <Paint_DrawBitMap+0x68>)
 80012a2:	8a9b      	ldrh	r3, [r3, #20]
 80012a4:	89ba      	ldrh	r2, [r7, #12]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3db      	bcc.n	8001262 <Paint_DrawBitMap+0x12>
        }
    }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	200000f8 	.word	0x200000f8

080012bc <DEV_SPI_WriteByte>:
#include <eInk_config/DEV_Config.h>
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi2;
void DEV_SPI_WriteByte(UBYTE value)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 80012c6:	1df9      	adds	r1, r7, #7
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	2201      	movs	r2, #1
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <DEV_SPI_WriteByte+0x20>)
 80012d0:	f003 fca1 	bl	8004c16 <HAL_SPI_Transmit>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000110 	.word	0x20000110

080012e0 <EPD_2IN13_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN13_V2_Reset(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2101      	movs	r1, #1
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <EPD_2IN13_V2_Reset+0x38>)
 80012ea:	f001 fab9 	bl	8002860 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 80012ee:	20c8      	movs	r0, #200	; 0xc8
 80012f0:	f000 ff7e 	bl	80021f0 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2101      	movs	r1, #1
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <EPD_2IN13_V2_Reset+0x38>)
 80012fa:	f001 fab1 	bl	8002860 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 80012fe:	2002      	movs	r0, #2
 8001300:	f000 ff76 	bl	80021f0 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	2101      	movs	r1, #1
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <EPD_2IN13_V2_Reset+0x38>)
 800130a:	f001 faa9 	bl	8002860 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 800130e:	20c8      	movs	r0, #200	; 0xc8
 8001310:	f000 ff6e 	bl	80021f0 <HAL_Delay>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	48000400 	.word	0x48000400

0800131c <EPD_2IN13_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN13_V2_SendCommand(UBYTE Reg)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2101      	movs	r1, #1
 800132a:	480a      	ldr	r0, [pc, #40]	; (8001354 <EPD_2IN13_V2_SendCommand+0x38>)
 800132c:	f001 fa98 	bl	8002860 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2102      	movs	r1, #2
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <EPD_2IN13_V2_SendCommand+0x38>)
 8001336:	f001 fa93 	bl	8002860 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffbd 	bl	80012bc <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	2102      	movs	r1, #2
 8001346:	4803      	ldr	r0, [pc, #12]	; (8001354 <EPD_2IN13_V2_SendCommand+0x38>)
 8001348:	f001 fa8a 	bl	8002860 <HAL_GPIO_WritePin>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	48000800 	.word	0x48000800

08001358 <EPD_2IN13_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN13_V2_SendData(UBYTE Data)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <EPD_2IN13_V2_SendData+0x38>)
 8001368:	f001 fa7a 	bl	8002860 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2102      	movs	r1, #2
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <EPD_2IN13_V2_SendData+0x38>)
 8001372:	f001 fa75 	bl	8002860 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff9f 	bl	80012bc <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	2102      	movs	r1, #2
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <EPD_2IN13_V2_SendData+0x38>)
 8001384:	f001 fa6c 	bl	8002860 <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	48000800 	.word	0x48000800

08001394 <EPD_2IN13_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN13_V2_ReadBusy(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <EPD_2IN13_V2_ReadBusy+0x2c>)
 800139a:	f004 fdd5 	bl	8005f48 <puts>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 800139e:	e002      	b.n	80013a6 <EPD_2IN13_V2_ReadBusy+0x12>
        DEV_Delay_ms(100);
 80013a0:	2064      	movs	r0, #100	; 0x64
 80013a2:	f000 ff25 	bl	80021f0 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 80013a6:	2110      	movs	r1, #16
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f001 fa40 	bl	8002830 <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d0f4      	beq.n	80013a0 <EPD_2IN13_V2_ReadBusy+0xc>
    }
    Debug("e-Paper busy release\r\n");
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <EPD_2IN13_V2_ReadBusy+0x30>)
 80013b8:	f004 fdc6 	bl	8005f48 <puts>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	080073a4 	.word	0x080073a4
 80013c4:	080073bc 	.word	0x080073bc

080013c8 <EPD_2IN13_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN13_V2_TurnOnDisplay(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    EPD_2IN13_V2_SendCommand(0x22);
 80013cc:	2022      	movs	r0, #34	; 0x22
 80013ce:	f7ff ffa5 	bl	800131c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0xC7);
 80013d2:	20c7      	movs	r0, #199	; 0xc7
 80013d4:	f7ff ffc0 	bl	8001358 <EPD_2IN13_V2_SendData>
    EPD_2IN13_V2_SendCommand(0x20);
 80013d8:	2020      	movs	r0, #32
 80013da:	f7ff ff9f 	bl	800131c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_ReadBusy();
 80013de:	f7ff ffd9 	bl	8001394 <EPD_2IN13_V2_ReadBusy>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <EPD_2IN13_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN13_V2_TurnOnDisplayPart(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
    EPD_2IN13_V2_SendCommand(0x22);
 80013ea:	2022      	movs	r0, #34	; 0x22
 80013ec:	f7ff ff96 	bl	800131c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0x0C);
 80013f0:	200c      	movs	r0, #12
 80013f2:	f7ff ffb1 	bl	8001358 <EPD_2IN13_V2_SendData>
    EPD_2IN13_V2_SendCommand(0x20);
 80013f6:	2020      	movs	r0, #32
 80013f8:	f7ff ff90 	bl	800131c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_ReadBusy();
 80013fc:	f7ff ffca 	bl	8001394 <EPD_2IN13_V2_ReadBusy>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <EPD_2IN13_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN13_V2_Init(UBYTE Mode)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
    UBYTE count;
    EPD_2IN13_V2_Reset();
 800140e:	f7ff ff67 	bl	80012e0 <EPD_2IN13_V2_Reset>

    if(Mode == EPD_2IN13_V2_FULL) {
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	f040 8091 	bne.w	800153c <EPD_2IN13_V2_Init+0x138>
        EPD_2IN13_V2_ReadBusy();
 800141a:	f7ff ffbb 	bl	8001394 <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x12); // soft reset
 800141e:	2012      	movs	r0, #18
 8001420:	f7ff ff7c 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_ReadBusy();
 8001424:	f7ff ffb6 	bl	8001394 <EPD_2IN13_V2_ReadBusy>

        EPD_2IN13_V2_SendCommand(0x74); //set analog block control
 8001428:	2074      	movs	r0, #116	; 0x74
 800142a:	f7ff ff77 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x54);
 800142e:	2054      	movs	r0, #84	; 0x54
 8001430:	f7ff ff92 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x7E); //set digital block control
 8001434:	207e      	movs	r0, #126	; 0x7e
 8001436:	f7ff ff71 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x3B);
 800143a:	203b      	movs	r0, #59	; 0x3b
 800143c:	f7ff ff8c 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x01); //Driver output control
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff ff6b 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);
 8001446:	20f9      	movs	r0, #249	; 0xf9
 8001448:	f7ff ff86 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff ff83 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff ff80 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x11); //data entry mode
 8001458:	2011      	movs	r0, #17
 800145a:	f7ff ff5f 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x01);
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff ff7a 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x44); //set Ram-X address start/end position
 8001464:	2044      	movs	r0, #68	; 0x44
 8001466:	f7ff ff59 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff ff74 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x0F);    //0x0C-->(15+1)*8=128
 8001470:	200f      	movs	r0, #15
 8001472:	f7ff ff71 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x45); //set Ram-Y address start/end position
 8001476:	2045      	movs	r0, #69	; 0x45
 8001478:	f7ff ff50 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);   //0xF9-->(249+1)=250
 800147c:	20f9      	movs	r0, #249	; 0xf9
 800147e:	f7ff ff6b 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff ff68 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff ff65 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ff62 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
 8001494:	203c      	movs	r0, #60	; 0x3c
 8001496:	f7ff ff41 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x03);
 800149a:	2003      	movs	r0, #3
 800149c:	f7ff ff5c 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x2C); //VCOM Voltage
 80014a0:	202c      	movs	r0, #44	; 0x2c
 80014a2:	f7ff ff3b 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x55); //
 80014a6:	2055      	movs	r0, #85	; 0x55
 80014a8:	f7ff ff56 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x03);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f7ff ff35 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[70]);
 80014b2:	2315      	movs	r3, #21
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff4f 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x04); //
 80014ba:	2004      	movs	r0, #4
 80014bc:	f7ff ff2e 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[71]);
 80014c0:	2341      	movs	r3, #65	; 0x41
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff48 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[72]);
 80014c8:	23a8      	movs	r3, #168	; 0xa8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff44 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[73]);
 80014d0:	2332      	movs	r3, #50	; 0x32
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff40 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x3A);     //Dummy Line
 80014d8:	203a      	movs	r0, #58	; 0x3a
 80014da:	f7ff ff1f 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[74]);
 80014de:	2330      	movs	r3, #48	; 0x30
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff39 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x3B);     //Gate time
 80014e6:	203b      	movs	r0, #59	; 0x3b
 80014e8:	f7ff ff18 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[75]);
 80014ec:	230a      	movs	r3, #10
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff32 	bl	8001358 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x32);
 80014f4:	2032      	movs	r0, #50	; 0x32
 80014f6:	f7ff ff11 	bl	800131c <EPD_2IN13_V2_SendCommand>
        for(count = 0; count < 70; count++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e008      	b.n	8001512 <EPD_2IN13_V2_Init+0x10e>
            EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[count]);
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	4a35      	ldr	r2, [pc, #212]	; (80015d8 <EPD_2IN13_V2_Init+0x1d4>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff26 	bl	8001358 <EPD_2IN13_V2_SendData>
        for(count = 0; count < 70; count++) {
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	3301      	adds	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b45      	cmp	r3, #69	; 0x45
 8001516:	d9f3      	bls.n	8001500 <EPD_2IN13_V2_Init+0xfc>
        }

        EPD_2IN13_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 8001518:	204e      	movs	r0, #78	; 0x4e
 800151a:	f7ff feff 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff ff1a 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x4F);   // set RAM y address count to 0X127;
 8001524:	204f      	movs	r0, #79	; 0x4f
 8001526:	f7ff fef9 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);
 800152a:	20f9      	movs	r0, #249	; 0xf9
 800152c:	f7ff ff14 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff ff11 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_ReadBusy();
 8001536:	f7ff ff2d 	bl	8001394 <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
        EPD_2IN13_V2_SendData(0x01);
    } else {
        Debug("error, the Mode is EPD_2IN13_FULL or EPD_2IN13_PART");
    }
}
 800153a:	e049      	b.n	80015d0 <EPD_2IN13_V2_Init+0x1cc>
    } else if(Mode == EPD_2IN13_V2_PART) {
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d143      	bne.n	80015ca <EPD_2IN13_V2_Init+0x1c6>
        EPD_2IN13_V2_SendCommand(0x2C);     //VCOM Voltage
 8001542:	202c      	movs	r0, #44	; 0x2c
 8001544:	f7ff feea 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x26);
 8001548:	2026      	movs	r0, #38	; 0x26
 800154a:	f7ff ff05 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_ReadBusy();
 800154e:	f7ff ff21 	bl	8001394 <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x32);
 8001552:	2032      	movs	r0, #50	; 0x32
 8001554:	f7ff fee2 	bl	800131c <EPD_2IN13_V2_SendCommand>
        for(count = 0; count < 70; count++) {
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e008      	b.n	8001570 <EPD_2IN13_V2_Init+0x16c>
            EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_partial_update[count]);
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <EPD_2IN13_V2_Init+0x1d8>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fef7 	bl	8001358 <EPD_2IN13_V2_SendData>
        for(count = 0; count < 70; count++) {
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3301      	adds	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b45      	cmp	r3, #69	; 0x45
 8001574:	d9f3      	bls.n	800155e <EPD_2IN13_V2_Init+0x15a>
        EPD_2IN13_V2_SendCommand(0x37);
 8001576:	2037      	movs	r0, #55	; 0x37
 8001578:	f7ff fed0 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff feeb 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fee8 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fee5 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fee2 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x40);
 8001594:	2040      	movs	r0, #64	; 0x40
 8001596:	f7ff fedf 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fedc 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fed9 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x22);
 80015a6:	2022      	movs	r0, #34	; 0x22
 80015a8:	f7ff feb8 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xC0);
 80015ac:	20c0      	movs	r0, #192	; 0xc0
 80015ae:	f7ff fed3 	bl	8001358 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x20);
 80015b2:	2020      	movs	r0, #32
 80015b4:	f7ff feb2 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_ReadBusy();
 80015b8:	f7ff feec 	bl	8001394 <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
 80015bc:	203c      	movs	r0, #60	; 0x3c
 80015be:	f7ff fead 	bl	800131c <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x01);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fec8 	bl	8001358 <EPD_2IN13_V2_SendData>
}
 80015c8:	e002      	b.n	80015d0 <EPD_2IN13_V2_Init+0x1cc>
        Debug("error, the Mode is EPD_2IN13_FULL or EPD_2IN13_PART");
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <EPD_2IN13_V2_Init+0x1dc>)
 80015cc:	f004 fc36 	bl	8005e3c <iprintf>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	0800ad48 	.word	0x0800ad48
 80015dc:	0800ad94 	.word	0x0800ad94
 80015e0:	080073dc 	.word	0x080073dc

080015e4 <EPD_2IN13_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN13_V2_Clear(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 80015ea:	2310      	movs	r3, #16
 80015ec:	807b      	strh	r3, [r7, #2]
    Height = EPD_2IN13_V2_HEIGHT;
 80015ee:	23fa      	movs	r3, #250	; 0xfa
 80015f0:	803b      	strh	r3, [r7, #0]

    EPD_2IN13_V2_SendCommand(0x24);
 80015f2:	2024      	movs	r0, #36	; 0x24
 80015f4:	f7ff fe92 	bl	800131c <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	e00f      	b.n	800161e <EPD_2IN13_V2_Clear+0x3a>
        for (UWORD i = 0; i < Width; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	e005      	b.n	8001610 <EPD_2IN13_V2_Clear+0x2c>
            EPD_2IN13_V2_SendData(0XFF);
 8001604:	20ff      	movs	r0, #255	; 0xff
 8001606:	f7ff fea7 	bl	8001358 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	80bb      	strh	r3, [r7, #4]
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3f5      	bcc.n	8001604 <EPD_2IN13_V2_Clear+0x20>
    for (UWORD j = 0; j < Height; j++) {
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	3301      	adds	r3, #1
 800161c:	80fb      	strh	r3, [r7, #6]
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	883b      	ldrh	r3, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d3eb      	bcc.n	80015fe <EPD_2IN13_V2_Clear+0x1a>
        }
    }

    EPD_2IN13_V2_TurnOnDisplay();
 8001626:	f7ff fecf 	bl	80013c8 <EPD_2IN13_V2_TurnOnDisplay>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <EPD_2IN13_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN13_V2_Display(UBYTE *Image)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 800163a:	2310      	movs	r3, #16
 800163c:	817b      	strh	r3, [r7, #10]
    Height = EPD_2IN13_V2_HEIGHT;
 800163e:	23fa      	movs	r3, #250	; 0xfa
 8001640:	813b      	strh	r3, [r7, #8]

    EPD_2IN13_V2_SendCommand(0x24);
 8001642:	2024      	movs	r0, #36	; 0x24
 8001644:	f7ff fe6a 	bl	800131c <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	81fb      	strh	r3, [r7, #14]
 800164c:	e019      	b.n	8001682 <EPD_2IN13_V2_Display+0x50>
        for (UWORD i = 0; i < Width; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	81bb      	strh	r3, [r7, #12]
 8001652:	e00f      	b.n	8001674 <EPD_2IN13_V2_Display+0x42>
            EPD_2IN13_V2_SendData(Image[i + j * Width]);
 8001654:	89ba      	ldrh	r2, [r7, #12]
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	8979      	ldrh	r1, [r7, #10]
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	4413      	add	r3, r2
 8001660:	461a      	mov	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe75 	bl	8001358 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800166e:	89bb      	ldrh	r3, [r7, #12]
 8001670:	3301      	adds	r3, #1
 8001672:	81bb      	strh	r3, [r7, #12]
 8001674:	89ba      	ldrh	r2, [r7, #12]
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3eb      	bcc.n	8001654 <EPD_2IN13_V2_Display+0x22>
    for (UWORD j = 0; j < Height; j++) {
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	3301      	adds	r3, #1
 8001680:	81fb      	strh	r3, [r7, #14]
 8001682:	89fa      	ldrh	r2, [r7, #14]
 8001684:	893b      	ldrh	r3, [r7, #8]
 8001686:	429a      	cmp	r2, r3
 8001688:	d3e1      	bcc.n	800164e <EPD_2IN13_V2_Display+0x1c>
        }
    }
    EPD_2IN13_V2_TurnOnDisplay();
 800168a:	f7ff fe9d 	bl	80013c8 <EPD_2IN13_V2_TurnOnDisplay>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <EPD_2IN13_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_2IN13_V2_DisplayPartBaseImage(UBYTE *Image)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 800169e:	2310      	movs	r3, #16
 80016a0:	81fb      	strh	r3, [r7, #14]
    Height = EPD_2IN13_V2_HEIGHT;
 80016a2:	23fa      	movs	r3, #250	; 0xfa
 80016a4:	81bb      	strh	r3, [r7, #12]

    UDOUBLE Addr = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
    EPD_2IN13_V2_SendCommand(0x24);
 80016aa:	2024      	movs	r0, #36	; 0x24
 80016ac:	f7ff fe36 	bl	800131c <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	82fb      	strh	r3, [r7, #22]
 80016b4:	e01a      	b.n	80016ec <EPD_2IN13_V2_DisplayPartBaseImage+0x56>
        for (UWORD i = 0; i < Width; i++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	82bb      	strh	r3, [r7, #20]
 80016ba:	e010      	b.n	80016de <EPD_2IN13_V2_DisplayPartBaseImage+0x48>
            Addr = i + j * Width;
 80016bc:	8aba      	ldrh	r2, [r7, #20]
 80016be:	8afb      	ldrh	r3, [r7, #22]
 80016c0:	89f9      	ldrh	r1, [r7, #14]
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	60bb      	str	r3, [r7, #8]
            EPD_2IN13_V2_SendData(Image[Addr]);
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fe40 	bl	8001358 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80016d8:	8abb      	ldrh	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	82bb      	strh	r3, [r7, #20]
 80016de:	8aba      	ldrh	r2, [r7, #20]
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3ea      	bcc.n	80016bc <EPD_2IN13_V2_DisplayPartBaseImage+0x26>
    for (UWORD j = 0; j < Height; j++) {
 80016e6:	8afb      	ldrh	r3, [r7, #22]
 80016e8:	3301      	adds	r3, #1
 80016ea:	82fb      	strh	r3, [r7, #22]
 80016ec:	8afa      	ldrh	r2, [r7, #22]
 80016ee:	89bb      	ldrh	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d3e0      	bcc.n	80016b6 <EPD_2IN13_V2_DisplayPartBaseImage+0x20>
        }
    }
    EPD_2IN13_V2_SendCommand(0x26);
 80016f4:	2026      	movs	r0, #38	; 0x26
 80016f6:	f7ff fe11 	bl	800131c <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	827b      	strh	r3, [r7, #18]
 80016fe:	e01a      	b.n	8001736 <EPD_2IN13_V2_DisplayPartBaseImage+0xa0>
        for (UWORD i = 0; i < Width; i++) {
 8001700:	2300      	movs	r3, #0
 8001702:	823b      	strh	r3, [r7, #16]
 8001704:	e010      	b.n	8001728 <EPD_2IN13_V2_DisplayPartBaseImage+0x92>
            Addr = i + j * Width;
 8001706:	8a3a      	ldrh	r2, [r7, #16]
 8001708:	8a7b      	ldrh	r3, [r7, #18]
 800170a:	89f9      	ldrh	r1, [r7, #14]
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
            EPD_2IN13_V2_SendData(Image[Addr]);
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe1b 	bl	8001358 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001722:	8a3b      	ldrh	r3, [r7, #16]
 8001724:	3301      	adds	r3, #1
 8001726:	823b      	strh	r3, [r7, #16]
 8001728:	8a3a      	ldrh	r2, [r7, #16]
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3ea      	bcc.n	8001706 <EPD_2IN13_V2_DisplayPartBaseImage+0x70>
    for (UWORD j = 0; j < Height; j++) {
 8001730:	8a7b      	ldrh	r3, [r7, #18]
 8001732:	3301      	adds	r3, #1
 8001734:	827b      	strh	r3, [r7, #18]
 8001736:	8a7a      	ldrh	r2, [r7, #18]
 8001738:	89bb      	ldrh	r3, [r7, #12]
 800173a:	429a      	cmp	r2, r3
 800173c:	d3e0      	bcc.n	8001700 <EPD_2IN13_V2_DisplayPartBaseImage+0x6a>
        }
    }
    EPD_2IN13_V2_TurnOnDisplay();
 800173e:	f7ff fe43 	bl	80013c8 <EPD_2IN13_V2_TurnOnDisplay>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <EPD_2IN13_V2_DisplayPart>:


void EPD_2IN13_V2_DisplayPart(UBYTE *Image)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 8001752:	2310      	movs	r3, #16
 8001754:	817b      	strh	r3, [r7, #10]
    Height = EPD_2IN13_V2_HEIGHT;
 8001756:	23fa      	movs	r3, #250	; 0xfa
 8001758:	813b      	strh	r3, [r7, #8]
    EPD_2IN13_V2_SendCommand(0x24);
 800175a:	2024      	movs	r0, #36	; 0x24
 800175c:	f7ff fdde 	bl	800131c <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001760:	2300      	movs	r3, #0
 8001762:	81fb      	strh	r3, [r7, #14]
 8001764:	e019      	b.n	800179a <EPD_2IN13_V2_DisplayPart+0x50>
        for (UWORD i = 0; i < Width; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	81bb      	strh	r3, [r7, #12]
 800176a:	e00f      	b.n	800178c <EPD_2IN13_V2_DisplayPart+0x42>
            EPD_2IN13_V2_SendData(Image[i + j * Width]);
 800176c:	89ba      	ldrh	r2, [r7, #12]
 800176e:	89fb      	ldrh	r3, [r7, #14]
 8001770:	8979      	ldrh	r1, [r7, #10]
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fde9 	bl	8001358 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001786:	89bb      	ldrh	r3, [r7, #12]
 8001788:	3301      	adds	r3, #1
 800178a:	81bb      	strh	r3, [r7, #12]
 800178c:	89ba      	ldrh	r2, [r7, #12]
 800178e:	897b      	ldrh	r3, [r7, #10]
 8001790:	429a      	cmp	r2, r3
 8001792:	d3eb      	bcc.n	800176c <EPD_2IN13_V2_DisplayPart+0x22>
    for (UWORD j = 0; j < Height; j++) {
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	3301      	adds	r3, #1
 8001798:	81fb      	strh	r3, [r7, #14]
 800179a:	89fa      	ldrh	r2, [r7, #14]
 800179c:	893b      	ldrh	r3, [r7, #8]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3e1      	bcc.n	8001766 <EPD_2IN13_V2_DisplayPart+0x1c>
        }
    }

    EPD_2IN13_V2_TurnOnDisplayPart();
 80017a2:	f7ff fe20 	bl	80013e6 <EPD_2IN13_V2_TurnOnDisplayPart>
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <EPD_2IN13_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN13_V2_Sleep(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
    EPD_2IN13_V2_SendCommand(0x22); //POWER OFF
 80017b2:	2022      	movs	r0, #34	; 0x22
 80017b4:	f7ff fdb2 	bl	800131c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0xC3);
 80017b8:	20c3      	movs	r0, #195	; 0xc3
 80017ba:	f7ff fdcd 	bl	8001358 <EPD_2IN13_V2_SendData>
    EPD_2IN13_V2_SendCommand(0x20);
 80017be:	2020      	movs	r0, #32
 80017c0:	f7ff fdac 	bl	800131c <EPD_2IN13_V2_SendCommand>

    EPD_2IN13_V2_SendCommand(0x10); //enter deep sleep
 80017c4:	2010      	movs	r0, #16
 80017c6:	f7ff fda9 	bl	800131c <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0x01);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fdc4 	bl	8001358 <EPD_2IN13_V2_SendData>
    DEV_Delay_ms(100);
 80017d0:	2064      	movs	r0, #100	; 0x64
 80017d2:	f000 fd0d 	bl	80021f0 <HAL_Delay>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e0:	f000 fc8a 	bl	80020f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e4:	f000 f83a 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e8:	f000 f9b4 	bl	8001b54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017ec:	f000 f982 	bl	8001af4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80017f0:	f000 f942 	bl	8001a78 <MX_SPI2_Init>
  MX_RTC_Init();
 80017f4:	f000 f8b0 	bl	8001958 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //EPD_2in13_V2_test();
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); //Wait with alarm until display is ready
 80017f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fc:	4813      	ldr	r0, [pc, #76]	; (800184c <main+0x70>)
 80017fe:	f002 fef1 	bl	80045e4 <HAL_RTC_DeactivateAlarm>
  Init_GUI();
 8001802:	f7fe ff63 	bl	80006cc <Init_GUI>
  Time_Init();
 8001806:	f7fe feaf 	bl	8000568 <Time_Init>
    /* USER CODE BEGIN 3 */

	  //HAL_Delay(300);
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  HAL_Delay(50);
 800180a:	2032      	movs	r0, #50	; 0x32
 800180c:	f000 fcf0 	bl	80021f0 <HAL_Delay>
	  if(drawTimeNow){
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <main+0x74>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d011      	beq.n	800183c <main+0x60>
		  drawTimeNow = 0;
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <main+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
		  if(drawTimeNowFullRedraw == 0){
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <main+0x78>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d103      	bne.n	800182e <main+0x52>
			  GUI_DrawTime(0);
 8001826:	2000      	movs	r0, #0
 8001828:	f7fe ff92 	bl	8000750 <GUI_DrawTime>
 800182c:	e7ed      	b.n	800180a <main+0x2e>
		  }else{
			  drawTimeNowFullRedraw = 0;
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <main+0x78>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
			  GUI_DrawTime(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f7fe ff8b 	bl	8000750 <GUI_DrawTime>
 800183a:	e7e6      	b.n	800180a <main+0x2e>
		  }
	  }else if(drawDateNow){
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <main+0x7c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0e2      	beq.n	800180a <main+0x2e>
		  GUI_DrawDate();
 8001844:	f7ff f81e 	bl	8000884 <GUI_DrawDate>
	  HAL_Delay(50);
 8001848:	e7df      	b.n	800180a <main+0x2e>
 800184a:	bf00      	nop
 800184c:	20000174 	.word	0x20000174
 8001850:	20000000 	.word	0x20000000
 8001854:	20000001 	.word	0x20000001
 8001858:	20000002 	.word	0x20000002

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0b8      	sub	sp, #224	; 0xe0
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001866:	2244      	movs	r2, #68	; 0x44
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f004 fa34 	bl	8005cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001880:	463b      	mov	r3, r7
 8001882:	2288      	movs	r2, #136	; 0x88
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f004 fa26 	bl	8005cd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800188c:	230a      	movs	r3, #10
 800188e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189a:	2310      	movs	r3, #16
 800189c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ac:	2302      	movs	r3, #2
 80018ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018b8:	230a      	movs	r3, #10
 80018ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018be:	2307      	movs	r3, #7
 80018c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 f859 	bl	800298c <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80018e0:	f000 f9d4 	bl	8001c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e4:	230f      	movs	r3, #15
 80018e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001902:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001906:	2104      	movs	r1, #4
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fc25 	bl	8003158 <HAL_RCC_ClockConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001914:	f000 f9ba 	bl	8001c8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8001918:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 800191c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800191e:	2300      	movs	r3, #0
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192a:	463b      	mov	r3, r7
 800192c:	4618      	mov	r0, r3
 800192e:	f001 fe19 	bl	8003564 <HAL_RCCEx_PeriphCLKConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001938:	f000 f9a8 	bl	8001c8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800193c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001940:	f000 ffce 	bl	80028e0 <HAL_PWREx_ControlVoltageScaling>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800194a:	f000 f99f 	bl	8001c8c <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	37e0      	adds	r7, #224	; 0xe0
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b092      	sub	sp, #72	; 0x48
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800195e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	222c      	movs	r2, #44	; 0x2c
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f004 f9ad 	bl	8005cd8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800197e:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <MX_RTC_Init+0x118>)
 8001980:	4a3c      	ldr	r2, [pc, #240]	; (8001a74 <MX_RTC_Init+0x11c>)
 8001982:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001984:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <MX_RTC_Init+0x118>)
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800198a:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <MX_RTC_Init+0x118>)
 800198c:	227f      	movs	r2, #127	; 0x7f
 800198e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001990:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <MX_RTC_Init+0x118>)
 8001992:	22ff      	movs	r2, #255	; 0xff
 8001994:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001996:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <MX_RTC_Init+0x118>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800199c:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <MX_RTC_Init+0x118>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019a2:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <MX_RTC_Init+0x118>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019a8:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <MX_RTC_Init+0x118>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ae:	4830      	ldr	r0, [pc, #192]	; (8001a70 <MX_RTC_Init+0x118>)
 80019b0:	f002 fa94 	bl	8003edc <HAL_RTC_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80019ba:	f000 f967 	bl	8001c8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80019d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019dc:	2200      	movs	r2, #0
 80019de:	4619      	mov	r1, r3
 80019e0:	4823      	ldr	r0, [pc, #140]	; (8001a70 <MX_RTC_Init+0x118>)
 80019e2:	f002 faf6 	bl	8003fd2 <HAL_RTC_SetTime>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80019ec:	f000 f94e 	bl	8001c8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80019f0:	2306      	movs	r3, #6
 80019f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_APRIL;
 80019f6:	2304      	movs	r3, #4
 80019f8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 3;
 80019fc:	2303      	movs	r3, #3
 80019fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 21;
 8001a02:	2315      	movs	r3, #21
 8001a04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001a08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4817      	ldr	r0, [pc, #92]	; (8001a70 <MX_RTC_Init+0x118>)
 8001a12:	f002 fbd7 	bl	80041c4 <HAL_RTC_SetDate>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001a1c:	f000 f936 	bl	8001c8c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 2;
 8001a24:	2302      	movs	r3, #2
 8001a26:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 3;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001a38:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8001a3c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_RTC_Init+0x118>)
 8001a5a:	f002 fc87 	bl	800436c <HAL_RTC_SetAlarm_IT>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8001a64:	f000 f912 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	3748      	adds	r7, #72	; 0x48
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000174 	.word	0x20000174
 8001a74:	40002800 	.word	0x40002800

08001a78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_SPI2_Init+0x74>)
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <MX_SPI2_Init+0x78>)
 8001a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_SPI2_Init+0x74>)
 8001a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_SPI2_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_SPI2_Init+0x74>)
 8001a92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_SPI2_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <MX_SPI2_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_SPI2_Init+0x74>)
 8001aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_SPI2_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_SPI2_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_SPI2_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_SPI2_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_SPI2_Init+0x74>)
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_SPI2_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_SPI2_Init+0x74>)
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_SPI2_Init+0x74>)
 8001ad8:	f002 fffa 	bl	8004ad0 <HAL_SPI_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ae2:	f000 f8d3 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000110 	.word	0x20000110
 8001af0:	40003800 	.word	0x40003800

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <MX_USART2_UART_Init+0x5c>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b38:	f003 fc5c 	bl	80053f4 <HAL_UART_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b42:	f000 f8a3 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000198 	.word	0x20000198
 8001b50:	40004400 	.word	0x40004400

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4a43      	ldr	r2, [pc, #268]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4a3d      	ldr	r2, [pc, #244]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a37      	ldr	r2, [pc, #220]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <MX_GPIO_Init+0x128>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EINK_DC_Pin|EINK_CS_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2103      	movs	r1, #3
 8001bce:	482c      	ldr	r0, [pc, #176]	; (8001c80 <MX_GPIO_Init+0x12c>)
 8001bd0:	f000 fe46 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f000 fe40 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EINK_RST_GPIO_Port, EINK_RST_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2101      	movs	r1, #1
 8001be4:	4827      	ldr	r0, [pc, #156]	; (8001c84 <MX_GPIO_Init+0x130>)
 8001be6:	f000 fe3b 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <MX_GPIO_Init+0x134>)
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4820      	ldr	r0, [pc, #128]	; (8001c80 <MX_GPIO_Init+0x12c>)
 8001c00:	f000 fc6c 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EINK_DC_Pin EINK_CS_Pin */
  GPIO_InitStruct.Pin = EINK_DC_Pin|EINK_CS_Pin;
 8001c04:	2303      	movs	r3, #3
 8001c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4819      	ldr	r0, [pc, #100]	; (8001c80 <MX_GPIO_Init+0x12c>)
 8001c1c:	f000 fc5e 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : EINK_BSY_Pin */
  GPIO_InitStruct.Pin = EINK_BSY_Pin;
 8001c20:	2310      	movs	r3, #16
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EINK_BSY_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f000 fc51 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f000 fc42 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : EINK_RST_Pin */
  GPIO_InitStruct.Pin = EINK_RST_Pin;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EINK_RST_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_GPIO_Init+0x130>)
 8001c70:	f000 fc34 	bl	80024dc <HAL_GPIO_Init>

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000800 	.word	0x48000800
 8001c84:	48000400 	.word	0x48000400
 8001c88:	10210000 	.word	0x10210000

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x44>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_MspInit+0x44>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_MspInit+0x44>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <HAL_RTC_MspInit+0x3c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d10f      	bne.n	8001d12 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RTC_MspInit+0x40>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf8:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_RTC_MspInit+0x40>)
 8001cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2029      	movs	r0, #41	; 0x29
 8001d08:	f000 fb71 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d0c:	2029      	movs	r0, #41	; 0x29
 8001d0e:	f000 fb8a 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40002800 	.word	0x40002800
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <HAL_SPI_MspInit+0xc4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d14c      	bne.n	8001de0 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a28      	ldr	r2, [pc, #160]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a22      	ldr	r2, [pc, #136]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_SPI_MspInit+0xc8>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d8e:	230c      	movs	r3, #12
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d9e:	2305      	movs	r3, #5
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4811      	ldr	r0, [pc, #68]	; (8001df0 <HAL_SPI_MspInit+0xcc>)
 8001daa:	f000 fb97 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <HAL_SPI_MspInit+0xd0>)
 8001dcc:	f000 fb86 	bl	80024dc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2024      	movs	r0, #36	; 0x24
 8001dd6:	f000 fb0a 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001dda:	2024      	movs	r0, #36	; 0x24
 8001ddc:	f000 fb23 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40003800 	.word	0x40003800
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000800 	.word	0x48000800
 8001df4:	48000400 	.word	0x48000400

08001df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_UART_MspInit+0x7c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d128      	bne.n	8001e6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_UART_MspInit+0x80>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <HAL_UART_MspInit+0x80>)
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_UART_MspInit+0x80>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_UART_MspInit+0x80>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_UART_MspInit+0x80>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_UART_MspInit+0x80>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e68:	f000 fb38 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40004400 	.word	0x40004400
 8001e78:	40021000 	.word	0x40021000

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <NMI_Handler+0x4>

08001e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <MemManage_Handler+0x4>

08001e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec8:	f000 f972 	bl	80021b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <SPI2_IRQHandler+0x10>)
 8001ed6:	f003 f80d 	bl	8004ef4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000110 	.word	0x20000110

08001ee4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <RTC_Alarm_IRQHandler+0x10>)
 8001eea:	f002 fccf 	bl	800488c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000174 	.word	0x20000174

08001ef8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e00a      	b.n	8001f20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f0a:	f3af 8000 	nop.w
 8001f0e:	4601      	mov	r1, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	b2ca      	uxtb	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dbf0      	blt.n	8001f0a <_read+0x12>
	}

return len;
 8001f28:	687b      	ldr	r3, [r7, #4]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e009      	b.n	8001f58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbf1      	blt.n	8001f44 <_write+0x12>
	}
	return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_close>:

int _close(int file)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f92:	605a      	str	r2, [r3, #4]
	return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_isatty>:

int _isatty(int file)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
	return 1;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fdc:	4a14      	ldr	r2, [pc, #80]	; (8002030 <_sbrk+0x5c>)
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <_sbrk+0x60>)
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <_sbrk+0x64>)
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <_sbrk+0x68>)
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d207      	bcs.n	8002014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002004:	f003 fe36 	bl	8005c74 <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	220c      	movs	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e009      	b.n	8002028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <_sbrk+0x64>)
 8002024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002026:	68fb      	ldr	r3, [r7, #12]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20018000 	.word	0x20018000
 8002034:	00000400 	.word	0x00000400
 8002038:	200000a4 	.word	0x200000a4
 800203c:	20000230 	.word	0x20000230

08002040 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <SystemInit+0x5c>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <SystemInit+0x5c>)
 800204c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <SystemInit+0x60>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <SystemInit+0x60>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <SystemInit+0x60>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <SystemInit+0x60>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <SystemInit+0x60>)
 800206c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002070:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002074:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <SystemInit+0x60>)
 8002078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800207c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <SystemInit+0x60>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <SystemInit+0x60>)
 8002084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SystemInit+0x60>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00
 80020a0:	40021000 	.word	0x40021000

080020a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020a8:	f7ff ffca 	bl	8002040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020ae:	e003      	b.n	80020b8 <LoopCopyDataInit>

080020b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020b6:	3104      	adds	r1, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020b8:	480a      	ldr	r0, [pc, #40]	; (80020e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020c0:	d3f6      	bcc.n	80020b0 <CopyDataInit>
	ldr	r2, =_sbss
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80020c4:	e002      	b.n	80020cc <LoopFillZerobss>

080020c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020c8:	f842 3b04 	str.w	r3, [r2], #4

080020cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <LoopForever+0x16>)
	cmp	r2, r3
 80020ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020d0:	d3f9      	bcc.n	80020c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d2:	f003 fdd5 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020d6:	f7ff fb81 	bl	80017dc <main>

080020da <LoopForever>:

LoopForever:
    b LoopForever
 80020da:	e7fe      	b.n	80020da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80020e0:	0800aed0 	.word	0x0800aed0
	ldr	r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020e8:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80020ec:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80020f0:	20000230 	.word	0x20000230

080020f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC1_2_IRQHandler>
	...

080020f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_Init+0x3c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <HAL_Init+0x3c>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210e:	2003      	movs	r0, #3
 8002110:	f000 f962 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002114:	2000      	movs	r0, #0
 8002116:	f000 f80f 	bl	8002138 <HAL_InitTick>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	e001      	b.n	800212a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002126:	f7ff fdb7 	bl	8001c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800212a:	79fb      	ldrb	r3, [r7, #7]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40022000 	.word	0x40022000

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_InitTick+0x6c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d023      	beq.n	8002194 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_InitTick+0x70>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_InitTick+0x6c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f96d 	bl	8002442 <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10f      	bne.n	800218e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b0f      	cmp	r3, #15
 8002172:	d809      	bhi.n	8002188 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002174:	2200      	movs	r2, #0
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f000 f937 	bl	80023ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <HAL_InitTick+0x74>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e007      	b.n	8002198 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e004      	b.n	8002198 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e001      	b.n	8002198 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000020 	.word	0x20000020
 80021a8:	20000018 	.word	0x20000018
 80021ac:	2000001c 	.word	0x2000001c

080021b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x20>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x24>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_IncTick+0x24>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000020 	.word	0x20000020
 80021d4:	2000021c 	.word	0x2000021c

080021d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	2000021c 	.word	0x2000021c

080021f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff ffee 	bl	80021d8 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d005      	beq.n	8002216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_Delay+0x44>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002216:	bf00      	nop
 8002218:	f7ff ffde 	bl	80021d8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	429a      	cmp	r2, r3
 8002226:	d8f7      	bhi.n	8002218 <HAL_Delay+0x28>
  {
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000020 	.word	0x20000020

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <__NVIC_EnableIRQ+0x38>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff8e 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff29 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff3e 	bl	8002280 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff8e 	bl	800232c <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff31 	bl	800229c <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa2 	bl	8002394 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d005      	beq.n	800247e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2204      	movs	r2, #4
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e029      	b.n	80024d2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 020e 	bic.w	r2, r2, #14
 800248c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f003 021c 	and.w	r2, r3, #28
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
    }
  }
  return status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	e17f      	b.n	80027ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8171 	beq.w	80027e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d00b      	beq.n	8002524 <HAL_GPIO_Init+0x48>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d007      	beq.n	8002524 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002518:	2b11      	cmp	r3, #17
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b12      	cmp	r3, #18
 8002522:	d130      	bne.n	8002586 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800255a:	2201      	movs	r2, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 0201 	and.w	r2, r3, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b03      	cmp	r3, #3
 8002590:	d118      	bne.n	80025c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x128>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b12      	cmp	r3, #18
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	6939      	ldr	r1, [r7, #16]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80ac 	beq.w	80027e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	4b5f      	ldr	r3, [pc, #380]	; (800280c <HAL_GPIO_Init+0x330>)
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	4a5e      	ldr	r2, [pc, #376]	; (800280c <HAL_GPIO_Init+0x330>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6613      	str	r3, [r2, #96]	; 0x60
 800269a:	4b5c      	ldr	r3, [pc, #368]	; (800280c <HAL_GPIO_Init+0x330>)
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026a6:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_GPIO_Init+0x334>)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	3302      	adds	r3, #2
 80026ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	220f      	movs	r2, #15
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026d0:	d025      	beq.n	800271e <HAL_GPIO_Init+0x242>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <HAL_GPIO_Init+0x338>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_GPIO_Init+0x23e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4e      	ldr	r2, [pc, #312]	; (8002818 <HAL_GPIO_Init+0x33c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x23a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4d      	ldr	r2, [pc, #308]	; (800281c <HAL_GPIO_Init+0x340>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x236>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <HAL_GPIO_Init+0x344>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x232>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4b      	ldr	r2, [pc, #300]	; (8002824 <HAL_GPIO_Init+0x348>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x22e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4a      	ldr	r2, [pc, #296]	; (8002828 <HAL_GPIO_Init+0x34c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x22a>
 8002702:	2306      	movs	r3, #6
 8002704:	e00c      	b.n	8002720 <HAL_GPIO_Init+0x244>
 8002706:	2307      	movs	r3, #7
 8002708:	e00a      	b.n	8002720 <HAL_GPIO_Init+0x244>
 800270a:	2305      	movs	r3, #5
 800270c:	e008      	b.n	8002720 <HAL_GPIO_Init+0x244>
 800270e:	2304      	movs	r3, #4
 8002710:	e006      	b.n	8002720 <HAL_GPIO_Init+0x244>
 8002712:	2303      	movs	r3, #3
 8002714:	e004      	b.n	8002720 <HAL_GPIO_Init+0x244>
 8002716:	2302      	movs	r3, #2
 8002718:	e002      	b.n	8002720 <HAL_GPIO_Init+0x244>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_GPIO_Init+0x244>
 800271e:	2300      	movs	r3, #0
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	f002 0203 	and.w	r2, r2, #3
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	4093      	lsls	r3, r2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002730:	4937      	ldr	r1, [pc, #220]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800273e:	4b3b      	ldr	r3, [pc, #236]	; (800282c <HAL_GPIO_Init+0x350>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002762:	4a32      	ldr	r2, [pc, #200]	; (800282c <HAL_GPIO_Init+0x350>)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002768:	4b30      	ldr	r3, [pc, #192]	; (800282c <HAL_GPIO_Init+0x350>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800278c:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_GPIO_Init+0x350>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_GPIO_Init+0x350>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027b6:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_GPIO_Init+0x350>)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_GPIO_Init+0x350>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_GPIO_Init+0x350>)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	3301      	adds	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa22 f303 	lsr.w	r3, r2, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f47f ae78 	bne.w	80024ec <HAL_GPIO_Init+0x10>
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	40010000 	.word	0x40010000
 8002814:	48000400 	.word	0x48000400
 8002818:	48000800 	.word	0x48000800
 800281c:	48000c00 	.word	0x48000c00
 8002820:	48001000 	.word	0x48001000
 8002824:	48001400 	.word	0x48001400
 8002828:	48001800 	.word	0x48001800
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e001      	b.n	8002852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800287c:	e002      	b.n	8002884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43d9      	mvns	r1, r3
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	400b      	ands	r3, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_PWREx_GetVoltageRange+0x18>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40007000 	.word	0x40007000

080028e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ee:	d130      	bne.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f0:	4b23      	ldr	r3, [pc, #140]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d038      	beq.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2232      	movs	r2, #50	; 0x32
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	3301      	adds	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002924:	e002      	b.n	800292c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3b01      	subs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002938:	d102      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f2      	bne.n	8002926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	d110      	bne.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e00f      	b.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295e:	d007      	beq.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40007000 	.word	0x40007000
 8002984:	20000018 	.word	0x20000018
 8002988:	431bde83 	.word	0x431bde83

0800298c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e3d4      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299e:	4ba1      	ldr	r3, [pc, #644]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a8:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80e4 	beq.w	8002b88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4a>
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	f040 808b 	bne.w	8002ae4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 8087 	bne.w	8002ae4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d6:	4b93      	ldr	r3, [pc, #588]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_RCC_OscConfig+0x62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e3ac      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1a      	ldr	r2, [r3, #32]
 80029f2:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_RCC_OscConfig+0x7c>
 80029fe:	4b89      	ldr	r3, [pc, #548]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a06:	e005      	b.n	8002a14 <HAL_RCC_OscConfig+0x88>
 8002a08:	4b86      	ldr	r3, [pc, #536]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d223      	bcs.n	8002a60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fd41 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e38d      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2c:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a7c      	ldr	r2, [pc, #496]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a32:	f043 0308 	orr.w	r3, r3, #8
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4977      	ldr	r1, [pc, #476]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4a:	4b76      	ldr	r3, [pc, #472]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4972      	ldr	r1, [pc, #456]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
 8002a5e:	e025      	b.n	8002aac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6f      	ldr	r2, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a66:	f043 0308 	orr.w	r3, r3, #8
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b6d      	ldr	r3, [pc, #436]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	496a      	ldr	r1, [pc, #424]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7e:	4b69      	ldr	r3, [pc, #420]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4965      	ldr	r1, [pc, #404]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fd01 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e34d      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aac:	f000 fc36 	bl	800331c <HAL_RCC_GetSysClockFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	495a      	ldr	r1, [pc, #360]	; (8002c28 <HAL_RCC_OscConfig+0x29c>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_RCC_OscConfig+0x2a0>)
 8002aca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002acc:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <HAL_RCC_OscConfig+0x2a4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fb31 	bl	8002138 <HAL_InitTick>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d052      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	e331      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d032      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aec:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002af8:	f7ff fb6e 	bl	80021d8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b00:	f7ff fb6a 	bl	80021d8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e31a      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b12:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a40      	ldr	r2, [pc, #256]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b24:	f043 0308 	orr.w	r3, r3, #8
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	493b      	ldr	r1, [pc, #236]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3c:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	4936      	ldr	r1, [pc, #216]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
 8002b50:	e01a      	b.n	8002b88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b52:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a33      	ldr	r2, [pc, #204]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b5e:	f7ff fb3b 	bl	80021d8 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b66:	f7ff fb37 	bl	80021d8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e2e7      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b78:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x1da>
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d074      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x21a>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d10e      	bne.n	8002bbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d10b      	bne.n	8002bbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d064      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d160      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e2c4      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x24a>
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e01d      	b.n	8002c12 <HAL_RCC_OscConfig+0x286>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bde:	d10c      	bne.n	8002bfa <HAL_RCC_OscConfig+0x26e>
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e00b      	b.n	8002c12 <HAL_RCC_OscConfig+0x286>
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7ff fadd 	bl	80021d8 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c20:	e011      	b.n	8002c46 <HAL_RCC_OscConfig+0x2ba>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	0800ade0 	.word	0x0800ade0
 8002c2c:	20000018 	.word	0x20000018
 8002c30:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7ff fad0 	bl	80021d8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e280      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	4baf      	ldr	r3, [pc, #700]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x2a8>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7ff fac0 	bl	80021d8 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7ff fabc 	bl	80021d8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e26c      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	4ba5      	ldr	r3, [pc, #660]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2d0>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d060      	beq.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_OscConfig+0x310>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d119      	bne.n	8002cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d116      	bne.n	8002cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9c:	4b99      	ldr	r3, [pc, #612]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x328>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e249      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b93      	ldr	r3, [pc, #588]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	4990      	ldr	r1, [pc, #576]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc8:	e040      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d023      	beq.n	8002d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd2:	4b8c      	ldr	r3, [pc, #560]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a8b      	ldr	r2, [pc, #556]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7ff fa7b 	bl	80021d8 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7ff fa77 	bl	80021d8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e227      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	497c      	ldr	r1, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
 8002d18:	e018      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b7a      	ldr	r3, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7ff fa57 	bl	80021d8 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7ff fa53 	bl	80021d8 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e203      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d03c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	4a67      	ldr	r2, [pc, #412]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7ff fa32 	bl	80021d8 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7ff fa2e 	bl	80021d8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1de      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8a:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <HAL_RCC_OscConfig+0x3ec>
 8002d98:	e01b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9a:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7ff fa15 	bl	80021d8 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db2:	f7ff fa11 	bl	80021d8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1c1      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ef      	bne.n	8002db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80a6 	beq.w	8002f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002de4:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	4b3e      	ldr	r3, [pc, #248]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d118      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e24:	f7ff f9d8 	bl	80021d8 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7ff f9d4 	bl	80021d8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e184      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d8>
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e62:	e024      	b.n	8002eae <HAL_RCC_OscConfig+0x522>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d110      	bne.n	8002e8e <HAL_RCC_OscConfig+0x502>
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	4a20      	ldr	r2, [pc, #128]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e8c:	e00f      	b.n	8002eae <HAL_RCC_OscConfig+0x522>
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7ff f98f 	bl	80021d8 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7ff f98b 	bl	80021d8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e139      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ed      	beq.n	8002ebe <HAL_RCC_OscConfig+0x532>
 8002ee2:	e01a      	b.n	8002f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7ff f978 	bl	80021d8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eea:	e00f      	b.n	8002f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7ff f974 	bl	80021d8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d906      	bls.n	8002f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e122      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0c:	4b90      	ldr	r3, [pc, #576]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e8      	bne.n	8002eec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1a:	7ffb      	ldrb	r3, [r7, #31]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b8b      	ldr	r3, [pc, #556]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	4a8a      	ldr	r2, [pc, #552]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8108 	beq.w	8003146 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	f040 80d0 	bne.w	80030e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f40:	4b83      	ldr	r3, [pc, #524]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0203 	and.w	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d130      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d127      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d11f      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f80:	2a07      	cmp	r2, #7
 8002f82:	bf14      	ite	ne
 8002f84:	2201      	movne	r2, #1
 8002f86:	2200      	moveq	r2, #0
 8002f88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d113      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d06e      	beq.n	8003094 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d069      	beq.n	8003090 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fc8:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b7      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fd8:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5c      	ldr	r2, [pc, #368]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fe4:	f7ff f8f8 	bl	80021d8 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7ff f8f4 	bl	80021d8 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0a4      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffe:	4b54      	ldr	r3, [pc, #336]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300a:	4b51      	ldr	r3, [pc, #324]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_RCC_OscConfig+0x7c8>)
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800301a:	3a01      	subs	r2, #1
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003024:	0212      	lsls	r2, r2, #8
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800302c:	0852      	lsrs	r2, r2, #1
 800302e:	3a01      	subs	r2, #1
 8003030:	0552      	lsls	r2, r2, #21
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003038:	0852      	lsrs	r2, r2, #1
 800303a:	3a01      	subs	r2, #1
 800303c:	0652      	lsls	r2, r2, #25
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003044:	0912      	lsrs	r2, r2, #4
 8003046:	0452      	lsls	r2, r2, #17
 8003048:	430a      	orrs	r2, r1
 800304a:	4941      	ldr	r1, [pc, #260]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 800304c:	4313      	orrs	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3e      	ldr	r2, [pc, #248]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800305c:	4b3c      	ldr	r3, [pc, #240]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a3b      	ldr	r2, [pc, #236]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003068:	f7ff f8b6 	bl	80021d8 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7ff f8b2 	bl	80021d8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e062      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	4b33      	ldr	r3, [pc, #204]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800308e:	e05a      	b.n	8003146 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e059      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d152      	bne.n	8003146 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2a      	ldr	r2, [pc, #168]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a27      	ldr	r2, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030b8:	f7ff f88e 	bl	80021d8 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7ff f88a 	bl	80021d8 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e03a      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x734>
 80030de:	e032      	b.n	8003146 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d02d      	beq.n	8003142 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003104:	f023 0303 	bic.w	r3, r3, #3
 8003108:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7ff f85d 	bl	80021d8 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003122:	f7ff f859 	bl	80021d8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e009      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x796>
 8003140:	e001      	b.n	8003146 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	f99d808c 	.word	0xf99d808c

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0c8      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b66      	ldr	r3, [pc, #408]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	4961      	ldr	r1, [pc, #388]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0b0      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d04c      	beq.n	8003242 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b0:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d121      	bne.n	8003200 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e09e      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c8:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d115      	bne.n	8003200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e092      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e086      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e07e      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 0203 	bic.w	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	493f      	ldr	r1, [pc, #252]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003212:	f7fe ffe1 	bl	80021d8 <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003218:	e00a      	b.n	8003230 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321a:	f7fe ffdd 	bl	80021d8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e066      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 020c 	and.w	r2, r3, #12
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	429a      	cmp	r2, r3
 8003240:	d1eb      	bne.n	800321a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	492c      	ldr	r1, [pc, #176]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d210      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	4924      	ldr	r1, [pc, #144]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e036      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4918      	ldr	r1, [pc, #96]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4910      	ldr	r1, [pc, #64]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ce:	f000 f825 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032d2:	4602      	mov	r2, r0
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	490c      	ldr	r1, [pc, #48]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	5ccb      	ldrb	r3, [r1, r3]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe ff20 	bl	8002138 <HAL_InitTick>
 80032f8:	4603      	mov	r3, r0
 80032fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80032fc:	7afb      	ldrb	r3, [r7, #11]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40022000 	.word	0x40022000
 800330c:	40021000 	.word	0x40021000
 8003310:	0800ade0 	.word	0x0800ade0
 8003314:	20000018 	.word	0x20000018
 8003318:	2000001c 	.word	0x2000001c

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003334:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d121      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d11e      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003350:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e005      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003378:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_RCC_GetSysClockFreq+0x10c>)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d102      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_RCC_GetSysClockFreq+0x110>)
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	e004      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <HAL_RCC_GetSysClockFreq+0x114>)
 80033a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d134      	bne.n	8003414 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d003      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d003      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0xac>
 80033c0:	e005      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_RCC_GetSysClockFreq+0x110>)
 80033c4:	617b      	str	r3, [r7, #20]
      break;
 80033c6:	e005      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ca:	617b      	str	r3, [r7, #20]
      break;
 80033cc:	e002      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	617b      	str	r3, [r7, #20]
      break;
 80033d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	3301      	adds	r3, #1
 80033e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	fb02 f203 	mul.w	r2, r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	0e5b      	lsrs	r3, r3, #25
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	3301      	adds	r3, #1
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003414:	69bb      	ldr	r3, [r7, #24]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	0800adf8 	.word	0x0800adf8
 800342c:	00f42400 	.word	0x00f42400
 8003430:	007a1200 	.word	0x007a1200

08003434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCC_GetHCLKFreq+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000018 	.word	0x20000018

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003450:	f7ff fff0 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4904      	ldr	r1, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	0800adf0 	.word	0x0800adf0

08003478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800347c:	f7ff ffda 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	0adb      	lsrs	r3, r3, #11
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4904      	ldr	r1, [pc, #16]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	0800adf0 	.word	0x0800adf0

080034a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034b0:	4b2a      	ldr	r3, [pc, #168]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034bc:	f7ff fa02 	bl	80028c4 <HAL_PWREx_GetVoltageRange>
 80034c0:	6178      	str	r0, [r7, #20]
 80034c2:	e014      	b.n	80034ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a24      	ldr	r2, [pc, #144]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
 80034d0:	4b22      	ldr	r3, [pc, #136]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034dc:	f7ff f9f2 	bl	80028c4 <HAL_PWREx_GetVoltageRange>
 80034e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	4a1d      	ldr	r2, [pc, #116]	; (800355c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f4:	d10b      	bne.n	800350e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d919      	bls.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2ba0      	cmp	r3, #160	; 0xa0
 8003500:	d902      	bls.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003502:	2302      	movs	r3, #2
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	e013      	b.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003508:	2301      	movs	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	e010      	b.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d902      	bls.n	800351a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003514:	2303      	movs	r3, #3
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	e00a      	b.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d102      	bne.n	8003526 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003520:	2302      	movs	r3, #2
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	e004      	b.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b70      	cmp	r3, #112	; 0x70
 800352a:	d101      	bne.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800352c:	2301      	movs	r3, #1
 800352e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 0207 	bic.w	r2, r3, #7
 8003538:	4909      	ldr	r1, [pc, #36]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	429a      	cmp	r2, r3
 800354c:	d001      	beq.n	8003552 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	40022000 	.word	0x40022000

08003564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800356c:	2300      	movs	r3, #0
 800356e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003570:	2300      	movs	r3, #0
 8003572:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357c:	2b00      	cmp	r3, #0
 800357e:	d041      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003584:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003588:	d02a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800358a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800358e:	d824      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003590:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003594:	d008      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800359a:	d81e      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a4:	d010      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035a6:	e018      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a8:	4b86      	ldr	r3, [pc, #536]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a85      	ldr	r2, [pc, #532]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b4:	e015      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fabb 	bl	8003b38 <RCCEx_PLLSAI1_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c6:	e00c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3320      	adds	r3, #32
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fba6 	bl	8003d20 <RCCEx_PLLSAI2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	74fb      	strb	r3, [r7, #19]
      break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e8:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f6:	4973      	ldr	r1, [pc, #460]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035fe:	e001      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d041      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003618:	d02a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800361a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800361e:	d824      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800362a:	d81e      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003634:	d010      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003636:	e018      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003638:	4b62      	ldr	r3, [pc, #392]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a61      	ldr	r2, [pc, #388]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003642:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003644:	e015      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fa73 	bl	8003b38 <RCCEx_PLLSAI1_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003656:	e00c      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3320      	adds	r3, #32
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fb5e 	bl	8003d20 <RCCEx_PLLSAI2_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003668:	e003      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	74fb      	strb	r3, [r7, #19]
      break;
 800366e:	e000      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003678:	4b52      	ldr	r3, [pc, #328]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003686:	494f      	ldr	r1, [pc, #316]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800368e:	e001      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80a0 	beq.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a2:	2300      	movs	r3, #0
 80036a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036bc:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	6593      	str	r3, [r2, #88]	; 0x58
 80036c8:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d4:	2301      	movs	r3, #1
 80036d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d8:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e4:	f7fe fd78 	bl	80021d8 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ea:	e009      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fe fd74 	bl	80021d8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d902      	bls.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	74fb      	strb	r3, [r7, #19]
        break;
 80036fe:	e005      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003700:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ef      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d15c      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003712:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01f      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	429a      	cmp	r2, r3
 800372e:	d019      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003730:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800375c:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fe fd33 	bl	80021d8 <HAL_GetTick>
 8003772:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003774:	e00b      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fe fd2f 	bl	80021d8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f241 3288 	movw	r2, #5000	; 0x1388
 8003784:	4293      	cmp	r3, r2
 8003786:	d902      	bls.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	74fb      	strb	r3, [r7, #19]
            break;
 800378c:	e006      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ec      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b2:	4904      	ldr	r1, [pc, #16]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ba:	e009      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	74bb      	strb	r3, [r7, #18]
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d0:	7c7b      	ldrb	r3, [r7, #17]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4b9e      	ldr	r3, [pc, #632]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a9d      	ldr	r2, [pc, #628]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ee:	4b98      	ldr	r3, [pc, #608]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f023 0203 	bic.w	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	4994      	ldr	r1, [pc, #592]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003810:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 020c 	bic.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	498c      	ldr	r1, [pc, #560]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003832:	4b87      	ldr	r3, [pc, #540]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	4983      	ldr	r1, [pc, #524]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003854:	4b7e      	ldr	r3, [pc, #504]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	497b      	ldr	r1, [pc, #492]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003876:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	4972      	ldr	r1, [pc, #456]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003898:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	496a      	ldr	r1, [pc, #424]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ba:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	4961      	ldr	r1, [pc, #388]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038dc:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	4959      	ldr	r1, [pc, #356]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038fe:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390c:	4950      	ldr	r1, [pc, #320]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003920:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	4948      	ldr	r1, [pc, #288]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	493f      	ldr	r1, [pc, #252]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d028      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003964:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003972:	4937      	ldr	r1, [pc, #220]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003982:	d106      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003984:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a31      	ldr	r2, [pc, #196]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398e:	60d3      	str	r3, [r2, #12]
 8003990:	e011      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399a:	d10c      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f8c8 	bl	8003b38 <RCCEx_PLLSAI1_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d028      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	491f      	ldr	r1, [pc, #124]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e0:	d106      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ec:	60d3      	str	r3, [r2, #12]
 80039ee:	e011      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2101      	movs	r1, #1
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f899 	bl	8003b38 <RCCEx_PLLSAI1_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02b      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2e:	4908      	ldr	r1, [pc, #32]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a3e:	d109      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a02      	ldr	r2, [pc, #8]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4a:	60d3      	str	r3, [r2, #12]
 8003a4c:	e014      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f867 	bl	8003b38 <RCCEx_PLLSAI1_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02f      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a92:	4928      	ldr	r1, [pc, #160]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f844 	bl	8003b38 <RCCEx_PLLSAI1_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	74bb      	strb	r3, [r7, #18]
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3320      	adds	r3, #32
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f925 	bl	8003d20 <RCCEx_PLLSAI2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003af0:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003afe:	490d      	ldr	r1, [pc, #52]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b12:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b22:	4904      	ldr	r1, [pc, #16]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000

08003b38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b46:	4b75      	ldr	r3, [pc, #468]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b52:	4b72      	ldr	r3, [pc, #456]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0203 	and.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d10d      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
       ||
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
       ||
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d047      	beq.n	8003c0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	e044      	b.n	8003c0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d018      	beq.n	8003bbe <RCCEx_PLLSAI1_Config+0x86>
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d825      	bhi.n	8003bdc <RCCEx_PLLSAI1_Config+0xa4>
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d002      	beq.n	8003b9a <RCCEx_PLLSAI1_Config+0x62>
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d009      	beq.n	8003bac <RCCEx_PLLSAI1_Config+0x74>
 8003b98:	e020      	b.n	8003bdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b9a:	4b60      	ldr	r3, [pc, #384]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d11d      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e01a      	b.n	8003be2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bac:	4b5b      	ldr	r3, [pc, #364]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bbc:	e013      	b.n	8003be6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bbe:	4b57      	ldr	r3, [pc, #348]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bca:	4b54      	ldr	r3, [pc, #336]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bda:	e006      	b.n	8003bea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e004      	b.n	8003bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10d      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bf2:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	430b      	orrs	r3, r1
 8003c08:	4944      	ldr	r1, [pc, #272]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d17d      	bne.n	8003d10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a40      	ldr	r2, [pc, #256]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c20:	f7fe fada 	bl	80021d8 <HAL_GetTick>
 8003c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c26:	e009      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c28:	f7fe fad6 	bl	80021d8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d902      	bls.n	8003c3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	73fb      	strb	r3, [r7, #15]
        break;
 8003c3a:	e005      	b.n	8003c48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c3c:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ef      	bne.n	8003c28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d160      	bne.n	8003d10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d111      	bne.n	8003c78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c54:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6892      	ldr	r2, [r2, #8]
 8003c64:	0211      	lsls	r1, r2, #8
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	0912      	lsrs	r2, r2, #4
 8003c6c:	0452      	lsls	r2, r2, #17
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	492a      	ldr	r1, [pc, #168]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	610b      	str	r3, [r1, #16]
 8003c76:	e027      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d112      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6892      	ldr	r2, [r2, #8]
 8003c8e:	0211      	lsls	r1, r2, #8
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6912      	ldr	r2, [r2, #16]
 8003c94:	0852      	lsrs	r2, r2, #1
 8003c96:	3a01      	subs	r2, #1
 8003c98:	0552      	lsls	r2, r2, #21
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	491f      	ldr	r1, [pc, #124]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	610b      	str	r3, [r1, #16]
 8003ca2:	e011      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	0211      	lsls	r1, r2, #8
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6952      	ldr	r2, [r2, #20]
 8003cba:	0852      	lsrs	r2, r2, #1
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	0652      	lsls	r2, r2, #25
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	4916      	ldr	r1, [pc, #88]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fe fa80 	bl	80021d8 <HAL_GetTick>
 8003cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cda:	e009      	b.n	8003cf0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cdc:	f7fe fa7c 	bl	80021d8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d902      	bls.n	8003cf0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	73fb      	strb	r3, [r7, #15]
          break;
 8003cee:	e005      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	4904      	ldr	r1, [pc, #16]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000

08003d20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d2e:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d3a:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0203 	and.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10d      	bne.n	8003d66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d52:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
       ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d047      	beq.n	8003df6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	e044      	b.n	8003df6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d018      	beq.n	8003da6 <RCCEx_PLLSAI2_Config+0x86>
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d825      	bhi.n	8003dc4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d002      	beq.n	8003d82 <RCCEx_PLLSAI2_Config+0x62>
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d009      	beq.n	8003d94 <RCCEx_PLLSAI2_Config+0x74>
 8003d80:	e020      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d82:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d11d      	bne.n	8003dca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e01a      	b.n	8003dca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d94:	4b50      	ldr	r3, [pc, #320]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d116      	bne.n	8003dce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e013      	b.n	8003dce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003da6:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003db2:	4b49      	ldr	r3, [pc, #292]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dc2:	e006      	b.n	8003dd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e004      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dda:	4b3f      	ldr	r3, [pc, #252]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	430b      	orrs	r3, r1
 8003df0:	4939      	ldr	r1, [pc, #228]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d167      	bne.n	8003ecc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a35      	ldr	r2, [pc, #212]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e08:	f7fe f9e6 	bl	80021d8 <HAL_GetTick>
 8003e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e0e:	e009      	b.n	8003e24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e10:	f7fe f9e2 	bl	80021d8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	73fb      	strb	r3, [r7, #15]
        break;
 8003e22:	e005      	b.n	8003e30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e24:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ef      	bne.n	8003e10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d14a      	bne.n	8003ecc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d111      	bne.n	8003e60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e3c:	4b26      	ldr	r3, [pc, #152]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	0211      	lsls	r1, r2, #8
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68d2      	ldr	r2, [r2, #12]
 8003e52:	0912      	lsrs	r2, r2, #4
 8003e54:	0452      	lsls	r2, r2, #17
 8003e56:	430a      	orrs	r2, r1
 8003e58:	491f      	ldr	r1, [pc, #124]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	614b      	str	r3, [r1, #20]
 8003e5e:	e011      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6892      	ldr	r2, [r2, #8]
 8003e70:	0211      	lsls	r1, r2, #8
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6912      	ldr	r2, [r2, #16]
 8003e76:	0852      	lsrs	r2, r2, #1
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0652      	lsls	r2, r2, #25
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	4916      	ldr	r1, [pc, #88]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e84:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fe f9a2 	bl	80021d8 <HAL_GetTick>
 8003e94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e96:	e009      	b.n	8003eac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e98:	f7fe f99e 	bl	80021d8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d902      	bls.n	8003eac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eaa:	e005      	b.n	8003eb8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ef      	beq.n	8003e98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4904      	ldr	r1, [pc, #16]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000

08003edc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d06c      	beq.n	8003fc8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd feec 	bl	8001ce0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	22ca      	movs	r2, #202	; 0xca
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2253      	movs	r2, #83	; 0x53
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fd1f 	bl	8004964 <RTC_EnterInitMode>
 8003f26:	4603      	mov	r3, r0
 8003f28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d14b      	bne.n	8003fc8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f42:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6899      	ldr	r1, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68d2      	ldr	r2, [r2, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6919      	ldr	r1, [r3, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	041a      	lsls	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fd23 	bl	80049cc <RTC_ExitInitMode>
 8003f86:	4603      	mov	r3, r0
 8003f88:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0203 	bic.w	r2, r2, #3
 8003f9e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fd2:	b590      	push	{r4, r7, lr}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_RTC_SetTime+0x1a>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e08b      	b.n	8004104 <HAL_RTC_SetTime+0x132>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	22ca      	movs	r2, #202	; 0xca
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2253      	movs	r2, #83	; 0x53
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fca9 	bl	8004964 <RTC_EnterInitMode>
 8004012:	4603      	mov	r3, r0
 8004014:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d163      	bne.n	80040e4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d126      	bne.n	8004070 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fd04 	bl	8004a48 <RTC_ByteToBcd2>
 8004040:	4603      	mov	r3, r0
 8004042:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fcfd 	bl	8004a48 <RTC_ByteToBcd2>
 800404e:	4603      	mov	r3, r0
 8004050:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004052:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	789b      	ldrb	r3, [r3, #2]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fcf5 	bl	8004a48 <RTC_ByteToBcd2>
 800405e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004060:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	78db      	ldrb	r3, [r3, #3]
 8004068:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e018      	b.n	80040a2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004090:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004096:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	78db      	ldrb	r3, [r3, #3]
 800409c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80040ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fc76 	bl	80049cc <RTC_ExitInitMode>
 80040e0:	4603      	mov	r3, r0
 80040e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	22ff      	movs	r2, #255	; 0xff
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004102:	7cfb      	ldrb	r3, [r7, #19]
}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}

0800410c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800413a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800413e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	0d9b      	lsrs	r3, r3, #22
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11a      	bne.n	80041ba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fc7d 	bl	8004a88 <RTC_Bcd2ToByte>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fc74 	bl	8004a88 <RTC_Bcd2ToByte>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	789b      	ldrb	r3, [r3, #2]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fc6b 	bl	8004a88 <RTC_Bcd2ToByte>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_RTC_SetDate+0x1a>
 80041da:	2302      	movs	r3, #2
 80041dc:	e075      	b.n	80042ca <HAL_RTC_SetDate+0x106>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10e      	bne.n	8004212 <HAL_RTC_SetDate+0x4e>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	f023 0310 	bic.w	r3, r3, #16
 8004208:	b2db      	uxtb	r3, r3
 800420a:	330a      	adds	r3, #10
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11c      	bne.n	8004252 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	78db      	ldrb	r3, [r3, #3]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fc13 	bl	8004a48 <RTC_ByteToBcd2>
 8004222:	4603      	mov	r3, r0
 8004224:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fc0c 	bl	8004a48 <RTC_ByteToBcd2>
 8004230:	4603      	mov	r3, r0
 8004232:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004234:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	789b      	ldrb	r3, [r3, #2]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fc04 	bl	8004a48 <RTC_ByteToBcd2>
 8004240:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004242:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e00e      	b.n	8004270 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	78db      	ldrb	r3, [r3, #3]
 8004256:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800425e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004264:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	22ca      	movs	r2, #202	; 0xca
 8004276:	625a      	str	r2, [r3, #36]	; 0x24
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2253      	movs	r2, #83	; 0x53
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fb6f 	bl	8004964 <RTC_EnterInitMode>
 8004286:	4603      	mov	r3, r0
 8004288:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800428a:	7cfb      	ldrb	r3, [r7, #19]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10c      	bne.n	80042aa <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800429a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800429e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fb93 	bl	80049cc <RTC_ExitInitMode>
 80042a6:	4603      	mov	r3, r0
 80042a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	22ff      	movs	r2, #255	; 0xff
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d103      	bne.n	80042c0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd90      	pop	{r4, r7, pc}

080042d2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	0b5b      	lsrs	r3, r3, #13
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11a      	bne.n	8004362 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	78db      	ldrb	r3, [r3, #3]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fba9 	bl	8004a88 <RTC_Bcd2ToByte>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fba0 	bl	8004a88 <RTC_Bcd2ToByte>
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	789b      	ldrb	r3, [r3, #2]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fb97 	bl	8004a88 <RTC_Bcd2ToByte>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_RTC_SetAlarm_IT+0x1a>
 8004382:	2302      	movs	r3, #2
 8004384:	e127      	b.n	80045d6 <HAL_RTC_SetAlarm_IT+0x26a>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d137      	bne.n	800440c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fb47 	bl	8004a48 <RTC_ByteToBcd2>
 80043ba:	4603      	mov	r3, r0
 80043bc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fb40 	bl	8004a48 <RTC_ByteToBcd2>
 80043c8:	4603      	mov	r3, r0
 80043ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80043cc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	789b      	ldrb	r3, [r3, #2]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fb38 	bl	8004a48 <RTC_ByteToBcd2>
 80043d8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80043da:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	78db      	ldrb	r3, [r3, #3]
 80043e2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80043e4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fb2a 	bl	8004a48 <RTC_ByteToBcd2>
 80043f4:	4603      	mov	r3, r0
 80043f6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80043f8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004400:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004406:	4313      	orrs	r3, r2
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	e023      	b.n	8004454 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2200      	movs	r2, #0
 800441e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800442c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004432:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	78db      	ldrb	r3, [r3, #3]
 8004438:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800443a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004442:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004444:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800444a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004450:	4313      	orrs	r3, r2
 8004452:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	22ca      	movs	r2, #202	; 0xca
 8004466:	625a      	str	r2, [r3, #36]	; 0x24
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2253      	movs	r2, #83	; 0x53
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004478:	d14a      	bne.n	8004510 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004488:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800449a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800449c:	f7fd fe9c 	bl	80021d8 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80044a2:	e015      	b.n	80044d0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044a4:	f7fd fe98 	bl	80021d8 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044b2:	d90d      	bls.n	80044d0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	22ff      	movs	r2, #255	; 0xff
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2203      	movs	r2, #3
 80044c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e082      	b.n	80045d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0e2      	beq.n	80044a4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044fc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	e049      	b.n	80045a4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800451e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004530:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004532:	f7fd fe51 	bl	80021d8 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004538:	e015      	b.n	8004566 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800453a:	f7fd fe4d 	bl	80021d8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004548:	d90d      	bls.n	8004566 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	22ff      	movs	r2, #255	; 0xff
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2203      	movs	r2, #3
 8004556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e037      	b.n	80045d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0e2      	beq.n	800453a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004592:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <HAL_RTC_SetAlarm_IT+0x274>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <HAL_RTC_SetAlarm_IT+0x274>)
 80045aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ae:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <HAL_RTC_SetAlarm_IT+0x274>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <HAL_RTC_SetAlarm_IT+0x274>)
 80045b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ba:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	22ff      	movs	r2, #255	; 0xff
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd90      	pop	{r4, r7, pc}
 80045de:	bf00      	nop
 80045e0:	40010400 	.word	0x40010400

080045e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_RTC_DeactivateAlarm+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e083      	b.n	8004704 <HAL_RTC_DeactivateAlarm+0x120>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	22ca      	movs	r2, #202	; 0xca
 8004612:	625a      	str	r2, [r3, #36]	; 0x24
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2253      	movs	r2, #83	; 0x53
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004622:	d131      	bne.n	8004688 <HAL_RTC_DeactivateAlarm+0xa4>
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004632:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004642:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004644:	f7fd fdc8 	bl	80021d8 <HAL_GetTick>
 8004648:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800464a:	e015      	b.n	8004678 <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800464c:	f7fd fdc4 	bl	80021d8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800465a:	d90d      	bls.n	8004678 <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	22ff      	movs	r2, #255	; 0xff
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2203      	movs	r2, #3
 8004668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e045      	b.n	8004704 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0e2      	beq.n	800464c <HAL_RTC_DeactivateAlarm+0x68>
 8004686:	e030      	b.n	80046ea <HAL_RTC_DeactivateAlarm+0x106>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004696:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a6:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80046a8:	f7fd fd96 	bl	80021d8 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80046ae:	e015      	b.n	80046dc <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046b0:	f7fd fd92 	bl	80021d8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046be:	d90d      	bls.n	80046dc <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	22ff      	movs	r2, #255	; 0xff
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2203      	movs	r2, #3
 80046cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e013      	b.n	8004704 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0e2      	beq.n	80046b0 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	22ff      	movs	r2, #255	; 0xff
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004720:	d143      	bne.n	80047aa <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004728:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800473c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	0a1b      	lsrs	r3, r3, #8
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	0d9b      	lsrs	r3, r3, #22
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	0e1b      	lsrs	r3, r3, #24
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	615a      	str	r2, [r3, #20]
 80047a8:	e042      	b.n	8004830 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80047c4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	0d9b      	lsrs	r3, r3, #22
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	0e1b      	lsrs	r3, r3, #24
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d125      	bne.n	8004882 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f924 	bl	8004a88 <RTC_Bcd2ToByte>
 8004840:	4603      	mov	r3, r0
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f91b 	bl	8004a88 <RTC_Bcd2ToByte>
 8004852:	4603      	mov	r3, r0
 8004854:	461a      	mov	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	789b      	ldrb	r3, [r3, #2]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f912 	bl	8004a88 <RTC_Bcd2ToByte>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f908 	bl	8004a88 <RTC_Bcd2ToByte>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004894:	4b1f      	ldr	r3, [pc, #124]	; (8004914 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004896:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800489a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d012      	beq.n	80048d0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80048c8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fb fe52 	bl	8000574 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d012      	beq.n	8004904 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80048fc:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8dc 	bl	8004abc <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40010400 	.word	0x40010400

08004918 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800492e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004930:	f7fd fc52 	bl	80021d8 <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004936:	e009      	b.n	800494c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004938:	f7fd fc4e 	bl	80021d8 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004946:	d901      	bls.n	800494c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e007      	b.n	800495c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0ee      	beq.n	8004938 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d120      	bne.n	80049c0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f04f 32ff 	mov.w	r2, #4294967295
 8004986:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004988:	f7fd fc26 	bl	80021d8 <HAL_GetTick>
 800498c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800498e:	e00d      	b.n	80049ac <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004990:	f7fd fc22 	bl	80021d8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800499e:	d905      	bls.n	80049ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2203      	movs	r2, #3
 80049a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <RTC_EnterInitMode+0x5c>
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d1e7      	bne.n	8004990 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80049d8:	4b1a      	ldr	r3, [pc, #104]	; (8004a44 <RTC_ExitInitMode+0x78>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <RTC_ExitInitMode+0x78>)
 80049de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049e4:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <RTC_ExitInitMode+0x78>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10c      	bne.n	8004a0a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff91 	bl	8004918 <HAL_RTC_WaitForSynchro>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01e      	beq.n	8004a3a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2203      	movs	r2, #3
 8004a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e017      	b.n	8004a3a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <RTC_ExitInitMode+0x78>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <RTC_ExitInitMode+0x78>)
 8004a10:	f023 0320 	bic.w	r3, r3, #32
 8004a14:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ff7e 	bl	8004918 <HAL_RTC_WaitForSynchro>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2203      	movs	r2, #3
 8004a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <RTC_ExitInitMode+0x78>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <RTC_ExitInitMode+0x78>)
 8004a34:	f043 0320 	orr.w	r3, r3, #32
 8004a38:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40002800 	.word	0x40002800

08004a48 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004a5a:	e005      	b.n	8004a68 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004a62:	7afb      	ldrb	r3, [r7, #11]
 8004a64:	3b0a      	subs	r3, #10
 8004a66:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004a68:	7afb      	ldrb	r3, [r7, #11]
 8004a6a:	2b09      	cmp	r3, #9
 8004a6c:	d8f6      	bhi.n	8004a5c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	7afb      	ldrb	r3, [r7, #11]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	b2db      	uxtb	r3, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	0092      	lsls	r2, r2, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	4413      	add	r3, r2
 8004aae:	b2db      	uxtb	r3, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e095      	b.n	8004c0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d108      	bne.n	8004afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af2:	d009      	beq.n	8004b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	61da      	str	r2, [r3, #28]
 8004afa:	e005      	b.n	8004b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd f8fe 	bl	8001d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b48:	d902      	bls.n	8004b50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e002      	b.n	8004b56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b5e:	d007      	beq.n	8004b70 <HAL_SPI_Init+0xa0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	ea42 0103 	orr.w	r1, r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	f003 0204 	and.w	r2, r3, #4
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bec:	ea42 0103 	orr.w	r1, r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b088      	sub	sp, #32
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	603b      	str	r3, [r7, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_SPI_Transmit+0x22>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e158      	b.n	8004eea <HAL_SPI_Transmit+0x2d4>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c40:	f7fd faca 	bl	80021d8 <HAL_GetTick>
 8004c44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c5a:	e13d      	b.n	8004ed8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_SPI_Transmit+0x52>
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c6c:	e134      	b.n	8004ed8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2203      	movs	r2, #3
 8004c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb8:	d10f      	bne.n	8004cda <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d007      	beq.n	8004cf8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d00:	d94b      	bls.n	8004d9a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_Transmit+0xfa>
 8004d0a:	8afb      	ldrh	r3, [r7, #22]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d13e      	bne.n	8004d8e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	881a      	ldrh	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	1c9a      	adds	r2, r3, #2
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d34:	e02b      	b.n	8004d8e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d112      	bne.n	8004d6a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	881a      	ldrh	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	1c9a      	adds	r2, r3, #2
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d68:	e011      	b.n	8004d8e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d6a:	f7fd fa35 	bl	80021d8 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d803      	bhi.n	8004d82 <HAL_SPI_Transmit+0x16c>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d102      	bne.n	8004d88 <HAL_SPI_Transmit+0x172>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d8c:	e0a4      	b.n	8004ed8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1ce      	bne.n	8004d36 <HAL_SPI_Transmit+0x120>
 8004d98:	e07c      	b.n	8004e94 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_SPI_Transmit+0x192>
 8004da2:	8afb      	ldrh	r3, [r7, #22]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d170      	bne.n	8004e8a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d912      	bls.n	8004dd8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	881a      	ldrh	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	1c9a      	adds	r2, r3, #2
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b02      	subs	r3, #2
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd6:	e058      	b.n	8004e8a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	7812      	ldrb	r2, [r2, #0]
 8004de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004dfe:	e044      	b.n	8004e8a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d12b      	bne.n	8004e66 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d912      	bls.n	8004e3e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	881a      	ldrh	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b02      	subs	r3, #2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3c:	e025      	b.n	8004e8a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e64:	e011      	b.n	8004e8a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e66:	f7fd f9b7 	bl	80021d8 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d803      	bhi.n	8004e7e <HAL_SPI_Transmit+0x268>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d102      	bne.n	8004e84 <HAL_SPI_Transmit+0x26e>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e88:	e026      	b.n	8004ed8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1b5      	bne.n	8004e00 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	6839      	ldr	r1, [r7, #0]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fa65 	bl	8005368 <SPI_EndRxTxTransaction>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e000      	b.n	8004ed8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ed6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ee8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	099b      	lsrs	r3, r3, #6
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10f      	bne.n	8004f38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	099b      	lsrs	r3, r3, #6
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
    return;
 8004f36:	e0d7      	b.n	80050e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	085b      	lsrs	r3, r3, #1
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <HAL_SPI_IRQHandler+0x66>
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	09db      	lsrs	r3, r3, #7
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
    return;
 8004f58:	e0c6      	b.n	80050e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10c      	bne.n	8004f80 <HAL_SPI_IRQHandler+0x8c>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	099b      	lsrs	r3, r3, #6
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80b4 	beq.w	80050e8 <HAL_SPI_IRQHandler+0x1f4>
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80ad 	beq.w	80050e8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	099b      	lsrs	r3, r3, #6
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d023      	beq.n	8004fe2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d011      	beq.n	8004fca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004faa:	f043 0204 	orr.w	r2, r3, #4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	e00b      	b.n	8004fe2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	693b      	ldr	r3, [r7, #16]
        return;
 8004fe0:	e082      	b.n	80050e8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d014      	beq.n	8005018 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	f043 0201 	orr.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00c      	beq.n	800503e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005028:	f043 0208 	orr.w	r2, r3, #8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005030:	2300      	movs	r3, #0
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04f      	beq.n	80050e6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005054:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_SPI_IRQHandler+0x17e>
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d034      	beq.n	80050dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0203 	bic.w	r2, r2, #3
 8005080:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	2b00      	cmp	r3, #0
 8005088:	d011      	beq.n	80050ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <HAL_SPI_IRQHandler+0x1fc>)
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	4618      	mov	r0, r3
 8005098:	f7fd f9df 	bl	800245a <HAL_DMA_Abort_IT>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <HAL_SPI_IRQHandler+0x1fc>)
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fd f9c9 	bl	800245a <HAL_DMA_Abort_IT>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80050da:	e003      	b.n	80050e4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f809 	bl	80050f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050e2:	e000      	b.n	80050e6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80050e4:	bf00      	nop
    return;
 80050e6:	bf00      	nop
  }
}
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	08005109 	.word	0x08005109

080050f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ffe5 	bl	80050f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005144:	f7fd f848 	bl	80021d8 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	4413      	add	r3, r2
 8005152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005154:	f7fd f840 	bl	80021d8 <HAL_GetTick>
 8005158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	015b      	lsls	r3, r3, #5
 8005160:	0d1b      	lsrs	r3, r3, #20
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516a:	e054      	b.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d050      	beq.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005174:	f7fd f830 	bl	80021d8 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	429a      	cmp	r2, r3
 8005182:	d902      	bls.n	800518a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d13d      	bne.n	8005206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d111      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ac:	d004      	beq.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b6:	d107      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d0:	d10f      	bne.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e017      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3b01      	subs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4013      	ands	r3, r2
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	429a      	cmp	r2, r3
 8005232:	d19b      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000018 	.word	0x20000018

08005244 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005252:	f7fc ffc1 	bl	80021d8 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	4413      	add	r3, r2
 8005260:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005262:	f7fc ffb9 	bl	80021d8 <HAL_GetTick>
 8005266:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005268:	4b3e      	ldr	r3, [pc, #248]	; (8005364 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	00da      	lsls	r2, r3, #3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	0d1b      	lsrs	r3, r3, #20
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005280:	e062      	b.n	8005348 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005288:	d109      	bne.n	800529e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800529c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d050      	beq.n	8005348 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052a6:	f7fc ff97 	bl	80021d8 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d902      	bls.n	80052bc <SPI_WaitFifoStateUntilTimeout+0x78>
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d13d      	bne.n	8005338 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d4:	d111      	bne.n	80052fa <SPI_WaitFifoStateUntilTimeout+0xb6>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052de:	d004      	beq.n	80052ea <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d107      	bne.n	80052fa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	d10f      	bne.n	8005324 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005322:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e010      	b.n	800535a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3b01      	subs	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d194      	bne.n	8005282 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000018 	.word	0x20000018

08005368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2200      	movs	r2, #0
 800537c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ff5f 	bl	8005244 <SPI_WaitFifoStateUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e027      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	2180      	movs	r1, #128	; 0x80
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fec4 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e014      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff ff38 	bl	8005244 <SPI_WaitFifoStateUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e000      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e040      	b.n	8005488 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fc fcee 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	; 0x24
 8005420:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f82c 	bl	8005490 <UART_SetConfig>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e022      	b.n	8005488 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 faaa 	bl	80059a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800545e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800546e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb31 	bl	8005ae8 <UART_CheckIdleState>
 8005486:	4603      	mov	r3, r0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005490:	b5b0      	push	{r4, r5, r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4bad      	ldr	r3, [pc, #692]	; (8005770 <UART_SetConfig+0x2e0>)
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	69f9      	ldr	r1, [r7, #28]
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4aa2      	ldr	r2, [pc, #648]	; (8005774 <UART_SetConfig+0x2e4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a99      	ldr	r2, [pc, #612]	; (8005778 <UART_SetConfig+0x2e8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d121      	bne.n	800555a <UART_SetConfig+0xca>
 8005516:	4b99      	ldr	r3, [pc, #612]	; (800577c <UART_SetConfig+0x2ec>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	2b03      	cmp	r3, #3
 8005522:	d817      	bhi.n	8005554 <UART_SetConfig+0xc4>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <UART_SetConfig+0x9c>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	0800553d 	.word	0x0800553d
 8005530:	08005549 	.word	0x08005549
 8005534:	08005543 	.word	0x08005543
 8005538:	0800554f 	.word	0x0800554f
 800553c:	2301      	movs	r3, #1
 800553e:	76fb      	strb	r3, [r7, #27]
 8005540:	e0e7      	b.n	8005712 <UART_SetConfig+0x282>
 8005542:	2302      	movs	r3, #2
 8005544:	76fb      	strb	r3, [r7, #27]
 8005546:	e0e4      	b.n	8005712 <UART_SetConfig+0x282>
 8005548:	2304      	movs	r3, #4
 800554a:	76fb      	strb	r3, [r7, #27]
 800554c:	e0e1      	b.n	8005712 <UART_SetConfig+0x282>
 800554e:	2308      	movs	r3, #8
 8005550:	76fb      	strb	r3, [r7, #27]
 8005552:	e0de      	b.n	8005712 <UART_SetConfig+0x282>
 8005554:	2310      	movs	r3, #16
 8005556:	76fb      	strb	r3, [r7, #27]
 8005558:	e0db      	b.n	8005712 <UART_SetConfig+0x282>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a88      	ldr	r2, [pc, #544]	; (8005780 <UART_SetConfig+0x2f0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d132      	bne.n	80055ca <UART_SetConfig+0x13a>
 8005564:	4b85      	ldr	r3, [pc, #532]	; (800577c <UART_SetConfig+0x2ec>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d828      	bhi.n	80055c4 <UART_SetConfig+0x134>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0xe8>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	080055ad 	.word	0x080055ad
 800557c:	080055c5 	.word	0x080055c5
 8005580:	080055c5 	.word	0x080055c5
 8005584:	080055c5 	.word	0x080055c5
 8005588:	080055b9 	.word	0x080055b9
 800558c:	080055c5 	.word	0x080055c5
 8005590:	080055c5 	.word	0x080055c5
 8005594:	080055c5 	.word	0x080055c5
 8005598:	080055b3 	.word	0x080055b3
 800559c:	080055c5 	.word	0x080055c5
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055c5 	.word	0x080055c5
 80055a8:	080055bf 	.word	0x080055bf
 80055ac:	2300      	movs	r3, #0
 80055ae:	76fb      	strb	r3, [r7, #27]
 80055b0:	e0af      	b.n	8005712 <UART_SetConfig+0x282>
 80055b2:	2302      	movs	r3, #2
 80055b4:	76fb      	strb	r3, [r7, #27]
 80055b6:	e0ac      	b.n	8005712 <UART_SetConfig+0x282>
 80055b8:	2304      	movs	r3, #4
 80055ba:	76fb      	strb	r3, [r7, #27]
 80055bc:	e0a9      	b.n	8005712 <UART_SetConfig+0x282>
 80055be:	2308      	movs	r3, #8
 80055c0:	76fb      	strb	r3, [r7, #27]
 80055c2:	e0a6      	b.n	8005712 <UART_SetConfig+0x282>
 80055c4:	2310      	movs	r3, #16
 80055c6:	76fb      	strb	r3, [r7, #27]
 80055c8:	e0a3      	b.n	8005712 <UART_SetConfig+0x282>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a6d      	ldr	r2, [pc, #436]	; (8005784 <UART_SetConfig+0x2f4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d120      	bne.n	8005616 <UART_SetConfig+0x186>
 80055d4:	4b69      	ldr	r3, [pc, #420]	; (800577c <UART_SetConfig+0x2ec>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055de:	2b30      	cmp	r3, #48	; 0x30
 80055e0:	d013      	beq.n	800560a <UART_SetConfig+0x17a>
 80055e2:	2b30      	cmp	r3, #48	; 0x30
 80055e4:	d814      	bhi.n	8005610 <UART_SetConfig+0x180>
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d009      	beq.n	80055fe <UART_SetConfig+0x16e>
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d810      	bhi.n	8005610 <UART_SetConfig+0x180>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <UART_SetConfig+0x168>
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d006      	beq.n	8005604 <UART_SetConfig+0x174>
 80055f6:	e00b      	b.n	8005610 <UART_SetConfig+0x180>
 80055f8:	2300      	movs	r3, #0
 80055fa:	76fb      	strb	r3, [r7, #27]
 80055fc:	e089      	b.n	8005712 <UART_SetConfig+0x282>
 80055fe:	2302      	movs	r3, #2
 8005600:	76fb      	strb	r3, [r7, #27]
 8005602:	e086      	b.n	8005712 <UART_SetConfig+0x282>
 8005604:	2304      	movs	r3, #4
 8005606:	76fb      	strb	r3, [r7, #27]
 8005608:	e083      	b.n	8005712 <UART_SetConfig+0x282>
 800560a:	2308      	movs	r3, #8
 800560c:	76fb      	strb	r3, [r7, #27]
 800560e:	e080      	b.n	8005712 <UART_SetConfig+0x282>
 8005610:	2310      	movs	r3, #16
 8005612:	76fb      	strb	r3, [r7, #27]
 8005614:	e07d      	b.n	8005712 <UART_SetConfig+0x282>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a5b      	ldr	r2, [pc, #364]	; (8005788 <UART_SetConfig+0x2f8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d120      	bne.n	8005662 <UART_SetConfig+0x1d2>
 8005620:	4b56      	ldr	r3, [pc, #344]	; (800577c <UART_SetConfig+0x2ec>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800562a:	2bc0      	cmp	r3, #192	; 0xc0
 800562c:	d013      	beq.n	8005656 <UART_SetConfig+0x1c6>
 800562e:	2bc0      	cmp	r3, #192	; 0xc0
 8005630:	d814      	bhi.n	800565c <UART_SetConfig+0x1cc>
 8005632:	2b80      	cmp	r3, #128	; 0x80
 8005634:	d009      	beq.n	800564a <UART_SetConfig+0x1ba>
 8005636:	2b80      	cmp	r3, #128	; 0x80
 8005638:	d810      	bhi.n	800565c <UART_SetConfig+0x1cc>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <UART_SetConfig+0x1b4>
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d006      	beq.n	8005650 <UART_SetConfig+0x1c0>
 8005642:	e00b      	b.n	800565c <UART_SetConfig+0x1cc>
 8005644:	2300      	movs	r3, #0
 8005646:	76fb      	strb	r3, [r7, #27]
 8005648:	e063      	b.n	8005712 <UART_SetConfig+0x282>
 800564a:	2302      	movs	r3, #2
 800564c:	76fb      	strb	r3, [r7, #27]
 800564e:	e060      	b.n	8005712 <UART_SetConfig+0x282>
 8005650:	2304      	movs	r3, #4
 8005652:	76fb      	strb	r3, [r7, #27]
 8005654:	e05d      	b.n	8005712 <UART_SetConfig+0x282>
 8005656:	2308      	movs	r3, #8
 8005658:	76fb      	strb	r3, [r7, #27]
 800565a:	e05a      	b.n	8005712 <UART_SetConfig+0x282>
 800565c:	2310      	movs	r3, #16
 800565e:	76fb      	strb	r3, [r7, #27]
 8005660:	e057      	b.n	8005712 <UART_SetConfig+0x282>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a49      	ldr	r2, [pc, #292]	; (800578c <UART_SetConfig+0x2fc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d125      	bne.n	80056b8 <UART_SetConfig+0x228>
 800566c:	4b43      	ldr	r3, [pc, #268]	; (800577c <UART_SetConfig+0x2ec>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567a:	d017      	beq.n	80056ac <UART_SetConfig+0x21c>
 800567c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005680:	d817      	bhi.n	80056b2 <UART_SetConfig+0x222>
 8005682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005686:	d00b      	beq.n	80056a0 <UART_SetConfig+0x210>
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d811      	bhi.n	80056b2 <UART_SetConfig+0x222>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <UART_SetConfig+0x20a>
 8005692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005696:	d006      	beq.n	80056a6 <UART_SetConfig+0x216>
 8005698:	e00b      	b.n	80056b2 <UART_SetConfig+0x222>
 800569a:	2300      	movs	r3, #0
 800569c:	76fb      	strb	r3, [r7, #27]
 800569e:	e038      	b.n	8005712 <UART_SetConfig+0x282>
 80056a0:	2302      	movs	r3, #2
 80056a2:	76fb      	strb	r3, [r7, #27]
 80056a4:	e035      	b.n	8005712 <UART_SetConfig+0x282>
 80056a6:	2304      	movs	r3, #4
 80056a8:	76fb      	strb	r3, [r7, #27]
 80056aa:	e032      	b.n	8005712 <UART_SetConfig+0x282>
 80056ac:	2308      	movs	r3, #8
 80056ae:	76fb      	strb	r3, [r7, #27]
 80056b0:	e02f      	b.n	8005712 <UART_SetConfig+0x282>
 80056b2:	2310      	movs	r3, #16
 80056b4:	76fb      	strb	r3, [r7, #27]
 80056b6:	e02c      	b.n	8005712 <UART_SetConfig+0x282>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2d      	ldr	r2, [pc, #180]	; (8005774 <UART_SetConfig+0x2e4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d125      	bne.n	800570e <UART_SetConfig+0x27e>
 80056c2:	4b2e      	ldr	r3, [pc, #184]	; (800577c <UART_SetConfig+0x2ec>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056d0:	d017      	beq.n	8005702 <UART_SetConfig+0x272>
 80056d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056d6:	d817      	bhi.n	8005708 <UART_SetConfig+0x278>
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056dc:	d00b      	beq.n	80056f6 <UART_SetConfig+0x266>
 80056de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e2:	d811      	bhi.n	8005708 <UART_SetConfig+0x278>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <UART_SetConfig+0x260>
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ec:	d006      	beq.n	80056fc <UART_SetConfig+0x26c>
 80056ee:	e00b      	b.n	8005708 <UART_SetConfig+0x278>
 80056f0:	2300      	movs	r3, #0
 80056f2:	76fb      	strb	r3, [r7, #27]
 80056f4:	e00d      	b.n	8005712 <UART_SetConfig+0x282>
 80056f6:	2302      	movs	r3, #2
 80056f8:	76fb      	strb	r3, [r7, #27]
 80056fa:	e00a      	b.n	8005712 <UART_SetConfig+0x282>
 80056fc:	2304      	movs	r3, #4
 80056fe:	76fb      	strb	r3, [r7, #27]
 8005700:	e007      	b.n	8005712 <UART_SetConfig+0x282>
 8005702:	2308      	movs	r3, #8
 8005704:	76fb      	strb	r3, [r7, #27]
 8005706:	e004      	b.n	8005712 <UART_SetConfig+0x282>
 8005708:	2310      	movs	r3, #16
 800570a:	76fb      	strb	r3, [r7, #27]
 800570c:	e001      	b.n	8005712 <UART_SetConfig+0x282>
 800570e:	2310      	movs	r3, #16
 8005710:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a17      	ldr	r2, [pc, #92]	; (8005774 <UART_SetConfig+0x2e4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	f040 8087 	bne.w	800582c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800571e:	7efb      	ldrb	r3, [r7, #27]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d837      	bhi.n	8005794 <UART_SetConfig+0x304>
 8005724:	a201      	add	r2, pc, #4	; (adr r2, 800572c <UART_SetConfig+0x29c>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005751 	.word	0x08005751
 8005730:	08005795 	.word	0x08005795
 8005734:	08005759 	.word	0x08005759
 8005738:	08005795 	.word	0x08005795
 800573c:	0800575f 	.word	0x0800575f
 8005740:	08005795 	.word	0x08005795
 8005744:	08005795 	.word	0x08005795
 8005748:	08005795 	.word	0x08005795
 800574c:	08005767 	.word	0x08005767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005750:	f7fd fe7c 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8005754:	6178      	str	r0, [r7, #20]
        break;
 8005756:	e022      	b.n	800579e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <UART_SetConfig+0x300>)
 800575a:	617b      	str	r3, [r7, #20]
        break;
 800575c:	e01f      	b.n	800579e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575e:	f7fd fddd 	bl	800331c <HAL_RCC_GetSysClockFreq>
 8005762:	6178      	str	r0, [r7, #20]
        break;
 8005764:	e01b      	b.n	800579e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576a:	617b      	str	r3, [r7, #20]
        break;
 800576c:	e017      	b.n	800579e <UART_SetConfig+0x30e>
 800576e:	bf00      	nop
 8005770:	efff69f3 	.word	0xefff69f3
 8005774:	40008000 	.word	0x40008000
 8005778:	40013800 	.word	0x40013800
 800577c:	40021000 	.word	0x40021000
 8005780:	40004400 	.word	0x40004400
 8005784:	40004800 	.word	0x40004800
 8005788:	40004c00 	.word	0x40004c00
 800578c:	40005000 	.word	0x40005000
 8005790:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	76bb      	strb	r3, [r7, #26]
        break;
 800579c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80f1 	beq.w	8005988 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d305      	bcc.n	80057c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d902      	bls.n	80057c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	76bb      	strb	r3, [r7, #26]
 80057c6:	e0df      	b.n	8005988 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f04f 0100 	mov.w	r1, #0
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	020b      	lsls	r3, r1, #8
 80057da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057de:	0202      	lsls	r2, r0, #8
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	6849      	ldr	r1, [r1, #4]
 80057e4:	0849      	lsrs	r1, r1, #1
 80057e6:	4608      	mov	r0, r1
 80057e8:	f04f 0100 	mov.w	r1, #0
 80057ec:	1814      	adds	r4, r2, r0
 80057ee:	eb43 0501 	adc.w	r5, r3, r1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	4620      	mov	r0, r4
 80057fe:	4629      	mov	r1, r5
 8005800:	f7fa fd36 	bl	8000270 <__aeabi_uldivmod>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4613      	mov	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005812:	d308      	bcc.n	8005826 <UART_SetConfig+0x396>
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581a:	d204      	bcs.n	8005826 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	60da      	str	r2, [r3, #12]
 8005824:	e0b0      	b.n	8005988 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	76bb      	strb	r3, [r7, #26]
 800582a:	e0ad      	b.n	8005988 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005834:	d15c      	bne.n	80058f0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005836:	7efb      	ldrb	r3, [r7, #27]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d828      	bhi.n	800588e <UART_SetConfig+0x3fe>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <UART_SetConfig+0x3b4>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005869 	.word	0x08005869
 8005848:	08005871 	.word	0x08005871
 800584c:	08005879 	.word	0x08005879
 8005850:	0800588f 	.word	0x0800588f
 8005854:	0800587f 	.word	0x0800587f
 8005858:	0800588f 	.word	0x0800588f
 800585c:	0800588f 	.word	0x0800588f
 8005860:	0800588f 	.word	0x0800588f
 8005864:	08005887 	.word	0x08005887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005868:	f7fd fdf0 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 800586c:	6178      	str	r0, [r7, #20]
        break;
 800586e:	e013      	b.n	8005898 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005870:	f7fd fe02 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8005874:	6178      	str	r0, [r7, #20]
        break;
 8005876:	e00f      	b.n	8005898 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005878:	4b49      	ldr	r3, [pc, #292]	; (80059a0 <UART_SetConfig+0x510>)
 800587a:	617b      	str	r3, [r7, #20]
        break;
 800587c:	e00c      	b.n	8005898 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587e:	f7fd fd4d 	bl	800331c <HAL_RCC_GetSysClockFreq>
 8005882:	6178      	str	r0, [r7, #20]
        break;
 8005884:	e008      	b.n	8005898 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	617b      	str	r3, [r7, #20]
        break;
 800588c:	e004      	b.n	8005898 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	76bb      	strb	r3, [r7, #26]
        break;
 8005896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d074      	beq.n	8005988 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	005a      	lsls	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	441a      	add	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b0f      	cmp	r3, #15
 80058ba:	d916      	bls.n	80058ea <UART_SetConfig+0x45a>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c2:	d212      	bcs.n	80058ea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f023 030f 	bic.w	r3, r3, #15
 80058cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	b29a      	uxth	r2, r3
 80058da:	89fb      	ldrh	r3, [r7, #14]
 80058dc:	4313      	orrs	r3, r2
 80058de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	89fa      	ldrh	r2, [r7, #14]
 80058e6:	60da      	str	r2, [r3, #12]
 80058e8:	e04e      	b.n	8005988 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	76bb      	strb	r3, [r7, #26]
 80058ee:	e04b      	b.n	8005988 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058f0:	7efb      	ldrb	r3, [r7, #27]
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d827      	bhi.n	8005946 <UART_SetConfig+0x4b6>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0x46c>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005921 	.word	0x08005921
 8005900:	08005929 	.word	0x08005929
 8005904:	08005931 	.word	0x08005931
 8005908:	08005947 	.word	0x08005947
 800590c:	08005937 	.word	0x08005937
 8005910:	08005947 	.word	0x08005947
 8005914:	08005947 	.word	0x08005947
 8005918:	08005947 	.word	0x08005947
 800591c:	0800593f 	.word	0x0800593f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fd fd94 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8005924:	6178      	str	r0, [r7, #20]
        break;
 8005926:	e013      	b.n	8005950 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fd fda6 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 800592c:	6178      	str	r0, [r7, #20]
        break;
 800592e:	e00f      	b.n	8005950 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005930:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <UART_SetConfig+0x510>)
 8005932:	617b      	str	r3, [r7, #20]
        break;
 8005934:	e00c      	b.n	8005950 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005936:	f7fd fcf1 	bl	800331c <HAL_RCC_GetSysClockFreq>
 800593a:	6178      	str	r0, [r7, #20]
        break;
 800593c:	e008      	b.n	8005950 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005942:	617b      	str	r3, [r7, #20]
        break;
 8005944:	e004      	b.n	8005950 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	76bb      	strb	r3, [r7, #26]
        break;
 800594e:	bf00      	nop
    }

    if (pclk != 0U)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d018      	beq.n	8005988 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	085a      	lsrs	r2, r3, #1
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	441a      	add	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	b29b      	uxth	r3, r3
 800596a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b0f      	cmp	r3, #15
 8005970:	d908      	bls.n	8005984 <UART_SetConfig+0x4f4>
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d204      	bcs.n	8005984 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e001      	b.n	8005988 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005994:	7ebb      	ldrb	r3, [r7, #26]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bdb0      	pop	{r4, r5, r7, pc}
 800599e:	bf00      	nop
 80059a0:	00f42400 	.word	0x00f42400

080059a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01a      	beq.n	8005aba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa2:	d10a      	bne.n	8005aba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005af8:	f7fc fb6e 	bl	80021d8 <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d10e      	bne.n	8005b2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f82d 	bl	8005b7a <UART_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e023      	b.n	8005b72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d10e      	bne.n	8005b56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f817 	bl	8005b7a <UART_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e00d      	b.n	8005b72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	603b      	str	r3, [r7, #0]
 8005b86:	4613      	mov	r3, r2
 8005b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8a:	e05e      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	d05a      	beq.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b94:	f7fc fb20 	bl	80021d8 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d11b      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bb8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0201 	bic.w	r2, r2, #1
 8005bc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e043      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d02c      	beq.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfe:	d124      	bne.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c08:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0201 	bic.w	r2, r2, #1
 8005c28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e00f      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d091      	beq.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	; (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000024 	.word	0x20000024

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4d0d      	ldr	r5, [pc, #52]	; (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4d0b      	ldr	r5, [pc, #44]	; (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	; (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f001 f9c6 	bl	8007024 <_init>
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	0800aec8 	.word	0x0800aec8
 8005cbc:	0800aec8 	.word	0x0800aec8
 8005cc0:	0800aec8 	.word	0x0800aec8
 8005cc4:	0800aecc 	.word	0x0800aecc

08005cc8 <malloc>:
 8005cc8:	4b02      	ldr	r3, [pc, #8]	; (8005cd4 <malloc+0xc>)
 8005cca:	4601      	mov	r1, r0
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	f000 b85b 	b.w	8005d88 <_malloc_r>
 8005cd2:	bf00      	nop
 8005cd4:	20000024 	.word	0x20000024

08005cd8 <memset>:
 8005cd8:	4402      	add	r2, r0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <memset+0xa>
 8005ce0:	4770      	bx	lr
 8005ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce6:	e7f9      	b.n	8005cdc <memset+0x4>

08005ce8 <_free_r>:
 8005ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cea:	2900      	cmp	r1, #0
 8005cec:	d048      	beq.n	8005d80 <_free_r+0x98>
 8005cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf2:	9001      	str	r0, [sp, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8005cfa:	bfb8      	it	lt
 8005cfc:	18e4      	addlt	r4, r4, r3
 8005cfe:	f000 fc39 	bl	8006574 <__malloc_lock>
 8005d02:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <_free_r+0x9c>)
 8005d04:	9801      	ldr	r0, [sp, #4]
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	4615      	mov	r5, r2
 8005d0a:	b933      	cbnz	r3, 8005d1a <_free_r+0x32>
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	6014      	str	r4, [r2, #0]
 8005d10:	b003      	add	sp, #12
 8005d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d16:	f000 bc33 	b.w	8006580 <__malloc_unlock>
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	d90b      	bls.n	8005d36 <_free_r+0x4e>
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	1862      	adds	r2, r4, r1
 8005d22:	4293      	cmp	r3, r2
 8005d24:	bf04      	itt	eq
 8005d26:	681a      	ldreq	r2, [r3, #0]
 8005d28:	685b      	ldreq	r3, [r3, #4]
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	bf04      	itt	eq
 8005d2e:	1852      	addeq	r2, r2, r1
 8005d30:	6022      	streq	r2, [r4, #0]
 8005d32:	602c      	str	r4, [r5, #0]
 8005d34:	e7ec      	b.n	8005d10 <_free_r+0x28>
 8005d36:	461a      	mov	r2, r3
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b10b      	cbz	r3, 8005d40 <_free_r+0x58>
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d9fa      	bls.n	8005d36 <_free_r+0x4e>
 8005d40:	6811      	ldr	r1, [r2, #0]
 8005d42:	1855      	adds	r5, r2, r1
 8005d44:	42a5      	cmp	r5, r4
 8005d46:	d10b      	bne.n	8005d60 <_free_r+0x78>
 8005d48:	6824      	ldr	r4, [r4, #0]
 8005d4a:	4421      	add	r1, r4
 8005d4c:	1854      	adds	r4, r2, r1
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	d1dd      	bne.n	8005d10 <_free_r+0x28>
 8005d54:	681c      	ldr	r4, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	6053      	str	r3, [r2, #4]
 8005d5a:	4421      	add	r1, r4
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	e7d7      	b.n	8005d10 <_free_r+0x28>
 8005d60:	d902      	bls.n	8005d68 <_free_r+0x80>
 8005d62:	230c      	movs	r3, #12
 8005d64:	6003      	str	r3, [r0, #0]
 8005d66:	e7d3      	b.n	8005d10 <_free_r+0x28>
 8005d68:	6825      	ldr	r5, [r4, #0]
 8005d6a:	1961      	adds	r1, r4, r5
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	bf04      	itt	eq
 8005d70:	6819      	ldreq	r1, [r3, #0]
 8005d72:	685b      	ldreq	r3, [r3, #4]
 8005d74:	6063      	str	r3, [r4, #4]
 8005d76:	bf04      	itt	eq
 8005d78:	1949      	addeq	r1, r1, r5
 8005d7a:	6021      	streq	r1, [r4, #0]
 8005d7c:	6054      	str	r4, [r2, #4]
 8005d7e:	e7c7      	b.n	8005d10 <_free_r+0x28>
 8005d80:	b003      	add	sp, #12
 8005d82:	bd30      	pop	{r4, r5, pc}
 8005d84:	200000a8 	.word	0x200000a8

08005d88 <_malloc_r>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	1ccd      	adds	r5, r1, #3
 8005d8c:	f025 0503 	bic.w	r5, r5, #3
 8005d90:	3508      	adds	r5, #8
 8005d92:	2d0c      	cmp	r5, #12
 8005d94:	bf38      	it	cc
 8005d96:	250c      	movcc	r5, #12
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	db01      	blt.n	8005da2 <_malloc_r+0x1a>
 8005d9e:	42a9      	cmp	r1, r5
 8005da0:	d903      	bls.n	8005daa <_malloc_r+0x22>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	2000      	movs	r0, #0
 8005da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005daa:	f000 fbe3 	bl	8006574 <__malloc_lock>
 8005dae:	4921      	ldr	r1, [pc, #132]	; (8005e34 <_malloc_r+0xac>)
 8005db0:	680a      	ldr	r2, [r1, #0]
 8005db2:	4614      	mov	r4, r2
 8005db4:	b99c      	cbnz	r4, 8005dde <_malloc_r+0x56>
 8005db6:	4f20      	ldr	r7, [pc, #128]	; (8005e38 <_malloc_r+0xb0>)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	b923      	cbnz	r3, 8005dc6 <_malloc_r+0x3e>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 f8ca 	bl	8005f58 <_sbrk_r>
 8005dc4:	6038      	str	r0, [r7, #0]
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f000 f8c5 	bl	8005f58 <_sbrk_r>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d123      	bne.n	8005e1a <_malloc_r+0x92>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f000 fbd2 	bl	8006580 <__malloc_unlock>
 8005ddc:	e7e3      	b.n	8005da6 <_malloc_r+0x1e>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	1b5b      	subs	r3, r3, r5
 8005de2:	d417      	bmi.n	8005e14 <_malloc_r+0x8c>
 8005de4:	2b0b      	cmp	r3, #11
 8005de6:	d903      	bls.n	8005df0 <_malloc_r+0x68>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	441c      	add	r4, r3
 8005dec:	6025      	str	r5, [r4, #0]
 8005dee:	e004      	b.n	8005dfa <_malloc_r+0x72>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	42a2      	cmp	r2, r4
 8005df4:	bf0c      	ite	eq
 8005df6:	600b      	streq	r3, [r1, #0]
 8005df8:	6053      	strne	r3, [r2, #4]
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f000 fbc0 	bl	8006580 <__malloc_unlock>
 8005e00:	f104 000b 	add.w	r0, r4, #11
 8005e04:	1d23      	adds	r3, r4, #4
 8005e06:	f020 0007 	bic.w	r0, r0, #7
 8005e0a:	1ac2      	subs	r2, r0, r3
 8005e0c:	d0cc      	beq.n	8005da8 <_malloc_r+0x20>
 8005e0e:	1a1b      	subs	r3, r3, r0
 8005e10:	50a3      	str	r3, [r4, r2]
 8005e12:	e7c9      	b.n	8005da8 <_malloc_r+0x20>
 8005e14:	4622      	mov	r2, r4
 8005e16:	6864      	ldr	r4, [r4, #4]
 8005e18:	e7cc      	b.n	8005db4 <_malloc_r+0x2c>
 8005e1a:	1cc4      	adds	r4, r0, #3
 8005e1c:	f024 0403 	bic.w	r4, r4, #3
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d0e3      	beq.n	8005dec <_malloc_r+0x64>
 8005e24:	1a21      	subs	r1, r4, r0
 8005e26:	4630      	mov	r0, r6
 8005e28:	f000 f896 	bl	8005f58 <_sbrk_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d1dd      	bne.n	8005dec <_malloc_r+0x64>
 8005e30:	e7cf      	b.n	8005dd2 <_malloc_r+0x4a>
 8005e32:	bf00      	nop
 8005e34:	200000a8 	.word	0x200000a8
 8005e38:	200000ac 	.word	0x200000ac

08005e3c <iprintf>:
 8005e3c:	b40f      	push	{r0, r1, r2, r3}
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <iprintf+0x2c>)
 8005e40:	b513      	push	{r0, r1, r4, lr}
 8005e42:	681c      	ldr	r4, [r3, #0]
 8005e44:	b124      	cbz	r4, 8005e50 <iprintf+0x14>
 8005e46:	69a3      	ldr	r3, [r4, #24]
 8005e48:	b913      	cbnz	r3, 8005e50 <iprintf+0x14>
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 fa8e 	bl	800636c <__sinit>
 8005e50:	ab05      	add	r3, sp, #20
 8005e52:	9a04      	ldr	r2, [sp, #16]
 8005e54:	68a1      	ldr	r1, [r4, #8]
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 fd1d 	bl	8006898 <_vfiprintf_r>
 8005e5e:	b002      	add	sp, #8
 8005e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e64:	b004      	add	sp, #16
 8005e66:	4770      	bx	lr
 8005e68:	20000024 	.word	0x20000024

08005e6c <_puts_r>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	460e      	mov	r6, r1
 8005e70:	4605      	mov	r5, r0
 8005e72:	b118      	cbz	r0, 8005e7c <_puts_r+0x10>
 8005e74:	6983      	ldr	r3, [r0, #24]
 8005e76:	b90b      	cbnz	r3, 8005e7c <_puts_r+0x10>
 8005e78:	f000 fa78 	bl	800636c <__sinit>
 8005e7c:	69ab      	ldr	r3, [r5, #24]
 8005e7e:	68ac      	ldr	r4, [r5, #8]
 8005e80:	b913      	cbnz	r3, 8005e88 <_puts_r+0x1c>
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fa72 	bl	800636c <__sinit>
 8005e88:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <_puts_r+0xd0>)
 8005e8a:	429c      	cmp	r4, r3
 8005e8c:	d120      	bne.n	8005ed0 <_puts_r+0x64>
 8005e8e:	686c      	ldr	r4, [r5, #4]
 8005e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e92:	07db      	lsls	r3, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_puts_r+0x36>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	0598      	lsls	r0, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_puts_r+0x36>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9e:	f000 fb03 	bl	80064a8 <__retarget_lock_acquire_recursive>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	0719      	lsls	r1, r3, #28
 8005ea6:	d51d      	bpl.n	8005ee4 <_puts_r+0x78>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	b1db      	cbz	r3, 8005ee4 <_puts_r+0x78>
 8005eac:	3e01      	subs	r6, #1
 8005eae:	68a3      	ldr	r3, [r4, #8]
 8005eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	60a3      	str	r3, [r4, #8]
 8005eb8:	bb39      	cbnz	r1, 8005f0a <_puts_r+0x9e>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da38      	bge.n	8005f30 <_puts_r+0xc4>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	210a      	movs	r1, #10
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f000 f878 	bl	8005fb8 <__swbuf_r>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d011      	beq.n	8005ef0 <_puts_r+0x84>
 8005ecc:	250a      	movs	r5, #10
 8005ece:	e011      	b.n	8005ef4 <_puts_r+0x88>
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <_puts_r+0xd4>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d101      	bne.n	8005eda <_puts_r+0x6e>
 8005ed6:	68ac      	ldr	r4, [r5, #8]
 8005ed8:	e7da      	b.n	8005e90 <_puts_r+0x24>
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <_puts_r+0xd8>)
 8005edc:	429c      	cmp	r4, r3
 8005ede:	bf08      	it	eq
 8005ee0:	68ec      	ldreq	r4, [r5, #12]
 8005ee2:	e7d5      	b.n	8005e90 <_puts_r+0x24>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f8b8 	bl	800605c <__swsetup_r>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d0dd      	beq.n	8005eac <_puts_r+0x40>
 8005ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef6:	07da      	lsls	r2, r3, #31
 8005ef8:	d405      	bmi.n	8005f06 <_puts_r+0x9a>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	059b      	lsls	r3, r3, #22
 8005efe:	d402      	bmi.n	8005f06 <_puts_r+0x9a>
 8005f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f02:	f000 fad2 	bl	80064aa <__retarget_lock_release_recursive>
 8005f06:	4628      	mov	r0, r5
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da04      	bge.n	8005f18 <_puts_r+0xac>
 8005f0e:	69a2      	ldr	r2, [r4, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	dc06      	bgt.n	8005f22 <_puts_r+0xb6>
 8005f14:	290a      	cmp	r1, #10
 8005f16:	d004      	beq.n	8005f22 <_puts_r+0xb6>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	6022      	str	r2, [r4, #0]
 8005f1e:	7019      	strb	r1, [r3, #0]
 8005f20:	e7c5      	b.n	8005eae <_puts_r+0x42>
 8005f22:	4622      	mov	r2, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	f000 f847 	bl	8005fb8 <__swbuf_r>
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d1bf      	bne.n	8005eae <_puts_r+0x42>
 8005f2e:	e7df      	b.n	8005ef0 <_puts_r+0x84>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	250a      	movs	r5, #10
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	6022      	str	r2, [r4, #0]
 8005f38:	701d      	strb	r5, [r3, #0]
 8005f3a:	e7db      	b.n	8005ef4 <_puts_r+0x88>
 8005f3c:	0800ae4c 	.word	0x0800ae4c
 8005f40:	0800ae6c 	.word	0x0800ae6c
 8005f44:	0800ae2c 	.word	0x0800ae2c

08005f48 <puts>:
 8005f48:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <puts+0xc>)
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	f7ff bf8d 	b.w	8005e6c <_puts_r>
 8005f52:	bf00      	nop
 8005f54:	20000024 	.word	0x20000024

08005f58 <_sbrk_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d06      	ldr	r5, [pc, #24]	; (8005f74 <_sbrk_r+0x1c>)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	f7fc f836 	bl	8001fd4 <_sbrk>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d102      	bne.n	8005f72 <_sbrk_r+0x1a>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	b103      	cbz	r3, 8005f72 <_sbrk_r+0x1a>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	2000022c 	.word	0x2000022c

08005f78 <siprintf>:
 8005f78:	b40e      	push	{r1, r2, r3}
 8005f7a:	b500      	push	{lr}
 8005f7c:	b09c      	sub	sp, #112	; 0x70
 8005f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f80:	9002      	str	r0, [sp, #8]
 8005f82:	9006      	str	r0, [sp, #24]
 8005f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f88:	4809      	ldr	r0, [pc, #36]	; (8005fb0 <siprintf+0x38>)
 8005f8a:	9107      	str	r1, [sp, #28]
 8005f8c:	9104      	str	r1, [sp, #16]
 8005f8e:	4909      	ldr	r1, [pc, #36]	; (8005fb4 <siprintf+0x3c>)
 8005f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f94:	9105      	str	r1, [sp, #20]
 8005f96:	6800      	ldr	r0, [r0, #0]
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	a902      	add	r1, sp, #8
 8005f9c:	f000 fb52 	bl	8006644 <_svfiprintf_r>
 8005fa0:	9b02      	ldr	r3, [sp, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	b01c      	add	sp, #112	; 0x70
 8005fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fac:	b003      	add	sp, #12
 8005fae:	4770      	bx	lr
 8005fb0:	20000024 	.word	0x20000024
 8005fb4:	ffff0208 	.word	0xffff0208

08005fb8 <__swbuf_r>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	460e      	mov	r6, r1
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	b118      	cbz	r0, 8005fca <__swbuf_r+0x12>
 8005fc2:	6983      	ldr	r3, [r0, #24]
 8005fc4:	b90b      	cbnz	r3, 8005fca <__swbuf_r+0x12>
 8005fc6:	f000 f9d1 	bl	800636c <__sinit>
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <__swbuf_r+0x98>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d12b      	bne.n	8006028 <__swbuf_r+0x70>
 8005fd0:	686c      	ldr	r4, [r5, #4]
 8005fd2:	69a3      	ldr	r3, [r4, #24]
 8005fd4:	60a3      	str	r3, [r4, #8]
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	071a      	lsls	r2, r3, #28
 8005fda:	d52f      	bpl.n	800603c <__swbuf_r+0x84>
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	b36b      	cbz	r3, 800603c <__swbuf_r+0x84>
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	6820      	ldr	r0, [r4, #0]
 8005fe4:	1ac0      	subs	r0, r0, r3
 8005fe6:	6963      	ldr	r3, [r4, #20]
 8005fe8:	b2f6      	uxtb	r6, r6
 8005fea:	4283      	cmp	r3, r0
 8005fec:	4637      	mov	r7, r6
 8005fee:	dc04      	bgt.n	8005ffa <__swbuf_r+0x42>
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 f926 	bl	8006244 <_fflush_r>
 8005ff8:	bb30      	cbnz	r0, 8006048 <__swbuf_r+0x90>
 8005ffa:	68a3      	ldr	r3, [r4, #8]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	60a3      	str	r3, [r4, #8]
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	6022      	str	r2, [r4, #0]
 8006006:	701e      	strb	r6, [r3, #0]
 8006008:	6963      	ldr	r3, [r4, #20]
 800600a:	3001      	adds	r0, #1
 800600c:	4283      	cmp	r3, r0
 800600e:	d004      	beq.n	800601a <__swbuf_r+0x62>
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	07db      	lsls	r3, r3, #31
 8006014:	d506      	bpl.n	8006024 <__swbuf_r+0x6c>
 8006016:	2e0a      	cmp	r6, #10
 8006018:	d104      	bne.n	8006024 <__swbuf_r+0x6c>
 800601a:	4621      	mov	r1, r4
 800601c:	4628      	mov	r0, r5
 800601e:	f000 f911 	bl	8006244 <_fflush_r>
 8006022:	b988      	cbnz	r0, 8006048 <__swbuf_r+0x90>
 8006024:	4638      	mov	r0, r7
 8006026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <__swbuf_r+0x9c>)
 800602a:	429c      	cmp	r4, r3
 800602c:	d101      	bne.n	8006032 <__swbuf_r+0x7a>
 800602e:	68ac      	ldr	r4, [r5, #8]
 8006030:	e7cf      	b.n	8005fd2 <__swbuf_r+0x1a>
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <__swbuf_r+0xa0>)
 8006034:	429c      	cmp	r4, r3
 8006036:	bf08      	it	eq
 8006038:	68ec      	ldreq	r4, [r5, #12]
 800603a:	e7ca      	b.n	8005fd2 <__swbuf_r+0x1a>
 800603c:	4621      	mov	r1, r4
 800603e:	4628      	mov	r0, r5
 8006040:	f000 f80c 	bl	800605c <__swsetup_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	d0cb      	beq.n	8005fe0 <__swbuf_r+0x28>
 8006048:	f04f 37ff 	mov.w	r7, #4294967295
 800604c:	e7ea      	b.n	8006024 <__swbuf_r+0x6c>
 800604e:	bf00      	nop
 8006050:	0800ae4c 	.word	0x0800ae4c
 8006054:	0800ae6c 	.word	0x0800ae6c
 8006058:	0800ae2c 	.word	0x0800ae2c

0800605c <__swsetup_r>:
 800605c:	4b32      	ldr	r3, [pc, #200]	; (8006128 <__swsetup_r+0xcc>)
 800605e:	b570      	push	{r4, r5, r6, lr}
 8006060:	681d      	ldr	r5, [r3, #0]
 8006062:	4606      	mov	r6, r0
 8006064:	460c      	mov	r4, r1
 8006066:	b125      	cbz	r5, 8006072 <__swsetup_r+0x16>
 8006068:	69ab      	ldr	r3, [r5, #24]
 800606a:	b913      	cbnz	r3, 8006072 <__swsetup_r+0x16>
 800606c:	4628      	mov	r0, r5
 800606e:	f000 f97d 	bl	800636c <__sinit>
 8006072:	4b2e      	ldr	r3, [pc, #184]	; (800612c <__swsetup_r+0xd0>)
 8006074:	429c      	cmp	r4, r3
 8006076:	d10f      	bne.n	8006098 <__swsetup_r+0x3c>
 8006078:	686c      	ldr	r4, [r5, #4]
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006080:	0719      	lsls	r1, r3, #28
 8006082:	d42c      	bmi.n	80060de <__swsetup_r+0x82>
 8006084:	06dd      	lsls	r5, r3, #27
 8006086:	d411      	bmi.n	80060ac <__swsetup_r+0x50>
 8006088:	2309      	movs	r3, #9
 800608a:	6033      	str	r3, [r6, #0]
 800608c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006090:	81a3      	strh	r3, [r4, #12]
 8006092:	f04f 30ff 	mov.w	r0, #4294967295
 8006096:	e03e      	b.n	8006116 <__swsetup_r+0xba>
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <__swsetup_r+0xd4>)
 800609a:	429c      	cmp	r4, r3
 800609c:	d101      	bne.n	80060a2 <__swsetup_r+0x46>
 800609e:	68ac      	ldr	r4, [r5, #8]
 80060a0:	e7eb      	b.n	800607a <__swsetup_r+0x1e>
 80060a2:	4b24      	ldr	r3, [pc, #144]	; (8006134 <__swsetup_r+0xd8>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	bf08      	it	eq
 80060a8:	68ec      	ldreq	r4, [r5, #12]
 80060aa:	e7e6      	b.n	800607a <__swsetup_r+0x1e>
 80060ac:	0758      	lsls	r0, r3, #29
 80060ae:	d512      	bpl.n	80060d6 <__swsetup_r+0x7a>
 80060b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b2:	b141      	cbz	r1, 80060c6 <__swsetup_r+0x6a>
 80060b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <__swsetup_r+0x66>
 80060bc:	4630      	mov	r0, r6
 80060be:	f7ff fe13 	bl	8005ce8 <_free_r>
 80060c2:	2300      	movs	r3, #0
 80060c4:	6363      	str	r3, [r4, #52]	; 0x34
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060cc:	81a3      	strh	r3, [r4, #12]
 80060ce:	2300      	movs	r3, #0
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	f043 0308 	orr.w	r3, r3, #8
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	b94b      	cbnz	r3, 80060f6 <__swsetup_r+0x9a>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ec:	d003      	beq.n	80060f6 <__swsetup_r+0x9a>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4630      	mov	r0, r6
 80060f2:	f000 f9ff 	bl	80064f4 <__smakebuf_r>
 80060f6:	89a0      	ldrh	r0, [r4, #12]
 80060f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060fc:	f010 0301 	ands.w	r3, r0, #1
 8006100:	d00a      	beq.n	8006118 <__swsetup_r+0xbc>
 8006102:	2300      	movs	r3, #0
 8006104:	60a3      	str	r3, [r4, #8]
 8006106:	6963      	ldr	r3, [r4, #20]
 8006108:	425b      	negs	r3, r3
 800610a:	61a3      	str	r3, [r4, #24]
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	b943      	cbnz	r3, 8006122 <__swsetup_r+0xc6>
 8006110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006114:	d1ba      	bne.n	800608c <__swsetup_r+0x30>
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	0781      	lsls	r1, r0, #30
 800611a:	bf58      	it	pl
 800611c:	6963      	ldrpl	r3, [r4, #20]
 800611e:	60a3      	str	r3, [r4, #8]
 8006120:	e7f4      	b.n	800610c <__swsetup_r+0xb0>
 8006122:	2000      	movs	r0, #0
 8006124:	e7f7      	b.n	8006116 <__swsetup_r+0xba>
 8006126:	bf00      	nop
 8006128:	20000024 	.word	0x20000024
 800612c:	0800ae4c 	.word	0x0800ae4c
 8006130:	0800ae6c 	.word	0x0800ae6c
 8006134:	0800ae2c 	.word	0x0800ae2c

08006138 <__sflush_r>:
 8006138:	898a      	ldrh	r2, [r1, #12]
 800613a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800613e:	4605      	mov	r5, r0
 8006140:	0710      	lsls	r0, r2, #28
 8006142:	460c      	mov	r4, r1
 8006144:	d458      	bmi.n	80061f8 <__sflush_r+0xc0>
 8006146:	684b      	ldr	r3, [r1, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	dc05      	bgt.n	8006158 <__sflush_r+0x20>
 800614c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	dc02      	bgt.n	8006158 <__sflush_r+0x20>
 8006152:	2000      	movs	r0, #0
 8006154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800615a:	2e00      	cmp	r6, #0
 800615c:	d0f9      	beq.n	8006152 <__sflush_r+0x1a>
 800615e:	2300      	movs	r3, #0
 8006160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006164:	682f      	ldr	r7, [r5, #0]
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	d032      	beq.n	80061d0 <__sflush_r+0x98>
 800616a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	075a      	lsls	r2, r3, #29
 8006170:	d505      	bpl.n	800617e <__sflush_r+0x46>
 8006172:	6863      	ldr	r3, [r4, #4]
 8006174:	1ac0      	subs	r0, r0, r3
 8006176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006178:	b10b      	cbz	r3, 800617e <__sflush_r+0x46>
 800617a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800617c:	1ac0      	subs	r0, r0, r3
 800617e:	2300      	movs	r3, #0
 8006180:	4602      	mov	r2, r0
 8006182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006184:	6a21      	ldr	r1, [r4, #32]
 8006186:	4628      	mov	r0, r5
 8006188:	47b0      	blx	r6
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	d106      	bne.n	800619e <__sflush_r+0x66>
 8006190:	6829      	ldr	r1, [r5, #0]
 8006192:	291d      	cmp	r1, #29
 8006194:	d82c      	bhi.n	80061f0 <__sflush_r+0xb8>
 8006196:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <__sflush_r+0x108>)
 8006198:	40ca      	lsrs	r2, r1
 800619a:	07d6      	lsls	r6, r2, #31
 800619c:	d528      	bpl.n	80061f0 <__sflush_r+0xb8>
 800619e:	2200      	movs	r2, #0
 80061a0:	6062      	str	r2, [r4, #4]
 80061a2:	04d9      	lsls	r1, r3, #19
 80061a4:	6922      	ldr	r2, [r4, #16]
 80061a6:	6022      	str	r2, [r4, #0]
 80061a8:	d504      	bpl.n	80061b4 <__sflush_r+0x7c>
 80061aa:	1c42      	adds	r2, r0, #1
 80061ac:	d101      	bne.n	80061b2 <__sflush_r+0x7a>
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	b903      	cbnz	r3, 80061b4 <__sflush_r+0x7c>
 80061b2:	6560      	str	r0, [r4, #84]	; 0x54
 80061b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061b6:	602f      	str	r7, [r5, #0]
 80061b8:	2900      	cmp	r1, #0
 80061ba:	d0ca      	beq.n	8006152 <__sflush_r+0x1a>
 80061bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061c0:	4299      	cmp	r1, r3
 80061c2:	d002      	beq.n	80061ca <__sflush_r+0x92>
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7ff fd8f 	bl	8005ce8 <_free_r>
 80061ca:	2000      	movs	r0, #0
 80061cc:	6360      	str	r0, [r4, #52]	; 0x34
 80061ce:	e7c1      	b.n	8006154 <__sflush_r+0x1c>
 80061d0:	6a21      	ldr	r1, [r4, #32]
 80061d2:	2301      	movs	r3, #1
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b0      	blx	r6
 80061d8:	1c41      	adds	r1, r0, #1
 80061da:	d1c7      	bne.n	800616c <__sflush_r+0x34>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0c4      	beq.n	800616c <__sflush_r+0x34>
 80061e2:	2b1d      	cmp	r3, #29
 80061e4:	d001      	beq.n	80061ea <__sflush_r+0xb2>
 80061e6:	2b16      	cmp	r3, #22
 80061e8:	d101      	bne.n	80061ee <__sflush_r+0xb6>
 80061ea:	602f      	str	r7, [r5, #0]
 80061ec:	e7b1      	b.n	8006152 <__sflush_r+0x1a>
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	e7ad      	b.n	8006154 <__sflush_r+0x1c>
 80061f8:	690f      	ldr	r7, [r1, #16]
 80061fa:	2f00      	cmp	r7, #0
 80061fc:	d0a9      	beq.n	8006152 <__sflush_r+0x1a>
 80061fe:	0793      	lsls	r3, r2, #30
 8006200:	680e      	ldr	r6, [r1, #0]
 8006202:	bf08      	it	eq
 8006204:	694b      	ldreq	r3, [r1, #20]
 8006206:	600f      	str	r7, [r1, #0]
 8006208:	bf18      	it	ne
 800620a:	2300      	movne	r3, #0
 800620c:	eba6 0807 	sub.w	r8, r6, r7
 8006210:	608b      	str	r3, [r1, #8]
 8006212:	f1b8 0f00 	cmp.w	r8, #0
 8006216:	dd9c      	ble.n	8006152 <__sflush_r+0x1a>
 8006218:	6a21      	ldr	r1, [r4, #32]
 800621a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800621c:	4643      	mov	r3, r8
 800621e:	463a      	mov	r2, r7
 8006220:	4628      	mov	r0, r5
 8006222:	47b0      	blx	r6
 8006224:	2800      	cmp	r0, #0
 8006226:	dc06      	bgt.n	8006236 <__sflush_r+0xfe>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	e78e      	b.n	8006154 <__sflush_r+0x1c>
 8006236:	4407      	add	r7, r0
 8006238:	eba8 0800 	sub.w	r8, r8, r0
 800623c:	e7e9      	b.n	8006212 <__sflush_r+0xda>
 800623e:	bf00      	nop
 8006240:	20400001 	.word	0x20400001

08006244 <_fflush_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	690b      	ldr	r3, [r1, #16]
 8006248:	4605      	mov	r5, r0
 800624a:	460c      	mov	r4, r1
 800624c:	b913      	cbnz	r3, 8006254 <_fflush_r+0x10>
 800624e:	2500      	movs	r5, #0
 8006250:	4628      	mov	r0, r5
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	b118      	cbz	r0, 800625e <_fflush_r+0x1a>
 8006256:	6983      	ldr	r3, [r0, #24]
 8006258:	b90b      	cbnz	r3, 800625e <_fflush_r+0x1a>
 800625a:	f000 f887 	bl	800636c <__sinit>
 800625e:	4b14      	ldr	r3, [pc, #80]	; (80062b0 <_fflush_r+0x6c>)
 8006260:	429c      	cmp	r4, r3
 8006262:	d11b      	bne.n	800629c <_fflush_r+0x58>
 8006264:	686c      	ldr	r4, [r5, #4]
 8006266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0ef      	beq.n	800624e <_fflush_r+0xa>
 800626e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006270:	07d0      	lsls	r0, r2, #31
 8006272:	d404      	bmi.n	800627e <_fflush_r+0x3a>
 8006274:	0599      	lsls	r1, r3, #22
 8006276:	d402      	bmi.n	800627e <_fflush_r+0x3a>
 8006278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800627a:	f000 f915 	bl	80064a8 <__retarget_lock_acquire_recursive>
 800627e:	4628      	mov	r0, r5
 8006280:	4621      	mov	r1, r4
 8006282:	f7ff ff59 	bl	8006138 <__sflush_r>
 8006286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006288:	07da      	lsls	r2, r3, #31
 800628a:	4605      	mov	r5, r0
 800628c:	d4e0      	bmi.n	8006250 <_fflush_r+0xc>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	059b      	lsls	r3, r3, #22
 8006292:	d4dd      	bmi.n	8006250 <_fflush_r+0xc>
 8006294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006296:	f000 f908 	bl	80064aa <__retarget_lock_release_recursive>
 800629a:	e7d9      	b.n	8006250 <_fflush_r+0xc>
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <_fflush_r+0x70>)
 800629e:	429c      	cmp	r4, r3
 80062a0:	d101      	bne.n	80062a6 <_fflush_r+0x62>
 80062a2:	68ac      	ldr	r4, [r5, #8]
 80062a4:	e7df      	b.n	8006266 <_fflush_r+0x22>
 80062a6:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <_fflush_r+0x74>)
 80062a8:	429c      	cmp	r4, r3
 80062aa:	bf08      	it	eq
 80062ac:	68ec      	ldreq	r4, [r5, #12]
 80062ae:	e7da      	b.n	8006266 <_fflush_r+0x22>
 80062b0:	0800ae4c 	.word	0x0800ae4c
 80062b4:	0800ae6c 	.word	0x0800ae6c
 80062b8:	0800ae2c 	.word	0x0800ae2c

080062bc <std>:
 80062bc:	2300      	movs	r3, #0
 80062be:	b510      	push	{r4, lr}
 80062c0:	4604      	mov	r4, r0
 80062c2:	e9c0 3300 	strd	r3, r3, [r0]
 80062c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062ca:	6083      	str	r3, [r0, #8]
 80062cc:	8181      	strh	r1, [r0, #12]
 80062ce:	6643      	str	r3, [r0, #100]	; 0x64
 80062d0:	81c2      	strh	r2, [r0, #14]
 80062d2:	6183      	str	r3, [r0, #24]
 80062d4:	4619      	mov	r1, r3
 80062d6:	2208      	movs	r2, #8
 80062d8:	305c      	adds	r0, #92	; 0x5c
 80062da:	f7ff fcfd 	bl	8005cd8 <memset>
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <std+0x38>)
 80062e0:	6263      	str	r3, [r4, #36]	; 0x24
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <std+0x3c>)
 80062e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <std+0x40>)
 80062e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <std+0x44>)
 80062ec:	6224      	str	r4, [r4, #32]
 80062ee:	6323      	str	r3, [r4, #48]	; 0x30
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	bf00      	nop
 80062f4:	08006e21 	.word	0x08006e21
 80062f8:	08006e43 	.word	0x08006e43
 80062fc:	08006e7b 	.word	0x08006e7b
 8006300:	08006e9f 	.word	0x08006e9f

08006304 <_cleanup_r>:
 8006304:	4901      	ldr	r1, [pc, #4]	; (800630c <_cleanup_r+0x8>)
 8006306:	f000 b8af 	b.w	8006468 <_fwalk_reent>
 800630a:	bf00      	nop
 800630c:	08006245 	.word	0x08006245

08006310 <__sfmoreglue>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	1e4a      	subs	r2, r1, #1
 8006314:	2568      	movs	r5, #104	; 0x68
 8006316:	4355      	muls	r5, r2
 8006318:	460e      	mov	r6, r1
 800631a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800631e:	f7ff fd33 	bl	8005d88 <_malloc_r>
 8006322:	4604      	mov	r4, r0
 8006324:	b140      	cbz	r0, 8006338 <__sfmoreglue+0x28>
 8006326:	2100      	movs	r1, #0
 8006328:	e9c0 1600 	strd	r1, r6, [r0]
 800632c:	300c      	adds	r0, #12
 800632e:	60a0      	str	r0, [r4, #8]
 8006330:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006334:	f7ff fcd0 	bl	8005cd8 <memset>
 8006338:	4620      	mov	r0, r4
 800633a:	bd70      	pop	{r4, r5, r6, pc}

0800633c <__sfp_lock_acquire>:
 800633c:	4801      	ldr	r0, [pc, #4]	; (8006344 <__sfp_lock_acquire+0x8>)
 800633e:	f000 b8b3 	b.w	80064a8 <__retarget_lock_acquire_recursive>
 8006342:	bf00      	nop
 8006344:	20000228 	.word	0x20000228

08006348 <__sfp_lock_release>:
 8006348:	4801      	ldr	r0, [pc, #4]	; (8006350 <__sfp_lock_release+0x8>)
 800634a:	f000 b8ae 	b.w	80064aa <__retarget_lock_release_recursive>
 800634e:	bf00      	nop
 8006350:	20000228 	.word	0x20000228

08006354 <__sinit_lock_acquire>:
 8006354:	4801      	ldr	r0, [pc, #4]	; (800635c <__sinit_lock_acquire+0x8>)
 8006356:	f000 b8a7 	b.w	80064a8 <__retarget_lock_acquire_recursive>
 800635a:	bf00      	nop
 800635c:	20000223 	.word	0x20000223

08006360 <__sinit_lock_release>:
 8006360:	4801      	ldr	r0, [pc, #4]	; (8006368 <__sinit_lock_release+0x8>)
 8006362:	f000 b8a2 	b.w	80064aa <__retarget_lock_release_recursive>
 8006366:	bf00      	nop
 8006368:	20000223 	.word	0x20000223

0800636c <__sinit>:
 800636c:	b510      	push	{r4, lr}
 800636e:	4604      	mov	r4, r0
 8006370:	f7ff fff0 	bl	8006354 <__sinit_lock_acquire>
 8006374:	69a3      	ldr	r3, [r4, #24]
 8006376:	b11b      	cbz	r3, 8006380 <__sinit+0x14>
 8006378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800637c:	f7ff bff0 	b.w	8006360 <__sinit_lock_release>
 8006380:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006384:	6523      	str	r3, [r4, #80]	; 0x50
 8006386:	4b13      	ldr	r3, [pc, #76]	; (80063d4 <__sinit+0x68>)
 8006388:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <__sinit+0x6c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	62a2      	str	r2, [r4, #40]	; 0x28
 800638e:	42a3      	cmp	r3, r4
 8006390:	bf04      	itt	eq
 8006392:	2301      	moveq	r3, #1
 8006394:	61a3      	streq	r3, [r4, #24]
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f820 	bl	80063dc <__sfp>
 800639c:	6060      	str	r0, [r4, #4]
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 f81c 	bl	80063dc <__sfp>
 80063a4:	60a0      	str	r0, [r4, #8]
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 f818 	bl	80063dc <__sfp>
 80063ac:	2200      	movs	r2, #0
 80063ae:	60e0      	str	r0, [r4, #12]
 80063b0:	2104      	movs	r1, #4
 80063b2:	6860      	ldr	r0, [r4, #4]
 80063b4:	f7ff ff82 	bl	80062bc <std>
 80063b8:	68a0      	ldr	r0, [r4, #8]
 80063ba:	2201      	movs	r2, #1
 80063bc:	2109      	movs	r1, #9
 80063be:	f7ff ff7d 	bl	80062bc <std>
 80063c2:	68e0      	ldr	r0, [r4, #12]
 80063c4:	2202      	movs	r2, #2
 80063c6:	2112      	movs	r1, #18
 80063c8:	f7ff ff78 	bl	80062bc <std>
 80063cc:	2301      	movs	r3, #1
 80063ce:	61a3      	str	r3, [r4, #24]
 80063d0:	e7d2      	b.n	8006378 <__sinit+0xc>
 80063d2:	bf00      	nop
 80063d4:	0800ae28 	.word	0x0800ae28
 80063d8:	08006305 	.word	0x08006305

080063dc <__sfp>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	4607      	mov	r7, r0
 80063e0:	f7ff ffac 	bl	800633c <__sfp_lock_acquire>
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <__sfp+0x84>)
 80063e6:	681e      	ldr	r6, [r3, #0]
 80063e8:	69b3      	ldr	r3, [r6, #24]
 80063ea:	b913      	cbnz	r3, 80063f2 <__sfp+0x16>
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff ffbd 	bl	800636c <__sinit>
 80063f2:	3648      	adds	r6, #72	; 0x48
 80063f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	d503      	bpl.n	8006404 <__sfp+0x28>
 80063fc:	6833      	ldr	r3, [r6, #0]
 80063fe:	b30b      	cbz	r3, 8006444 <__sfp+0x68>
 8006400:	6836      	ldr	r6, [r6, #0]
 8006402:	e7f7      	b.n	80063f4 <__sfp+0x18>
 8006404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006408:	b9d5      	cbnz	r5, 8006440 <__sfp+0x64>
 800640a:	4b16      	ldr	r3, [pc, #88]	; (8006464 <__sfp+0x88>)
 800640c:	60e3      	str	r3, [r4, #12]
 800640e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006412:	6665      	str	r5, [r4, #100]	; 0x64
 8006414:	f000 f847 	bl	80064a6 <__retarget_lock_init_recursive>
 8006418:	f7ff ff96 	bl	8006348 <__sfp_lock_release>
 800641c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006420:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006424:	6025      	str	r5, [r4, #0]
 8006426:	61a5      	str	r5, [r4, #24]
 8006428:	2208      	movs	r2, #8
 800642a:	4629      	mov	r1, r5
 800642c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006430:	f7ff fc52 	bl	8005cd8 <memset>
 8006434:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006438:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800643c:	4620      	mov	r0, r4
 800643e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006440:	3468      	adds	r4, #104	; 0x68
 8006442:	e7d9      	b.n	80063f8 <__sfp+0x1c>
 8006444:	2104      	movs	r1, #4
 8006446:	4638      	mov	r0, r7
 8006448:	f7ff ff62 	bl	8006310 <__sfmoreglue>
 800644c:	4604      	mov	r4, r0
 800644e:	6030      	str	r0, [r6, #0]
 8006450:	2800      	cmp	r0, #0
 8006452:	d1d5      	bne.n	8006400 <__sfp+0x24>
 8006454:	f7ff ff78 	bl	8006348 <__sfp_lock_release>
 8006458:	230c      	movs	r3, #12
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	e7ee      	b.n	800643c <__sfp+0x60>
 800645e:	bf00      	nop
 8006460:	0800ae28 	.word	0x0800ae28
 8006464:	ffff0001 	.word	0xffff0001

08006468 <_fwalk_reent>:
 8006468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800646c:	4606      	mov	r6, r0
 800646e:	4688      	mov	r8, r1
 8006470:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006474:	2700      	movs	r7, #0
 8006476:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800647a:	f1b9 0901 	subs.w	r9, r9, #1
 800647e:	d505      	bpl.n	800648c <_fwalk_reent+0x24>
 8006480:	6824      	ldr	r4, [r4, #0]
 8006482:	2c00      	cmp	r4, #0
 8006484:	d1f7      	bne.n	8006476 <_fwalk_reent+0xe>
 8006486:	4638      	mov	r0, r7
 8006488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800648c:	89ab      	ldrh	r3, [r5, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d907      	bls.n	80064a2 <_fwalk_reent+0x3a>
 8006492:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006496:	3301      	adds	r3, #1
 8006498:	d003      	beq.n	80064a2 <_fwalk_reent+0x3a>
 800649a:	4629      	mov	r1, r5
 800649c:	4630      	mov	r0, r6
 800649e:	47c0      	blx	r8
 80064a0:	4307      	orrs	r7, r0
 80064a2:	3568      	adds	r5, #104	; 0x68
 80064a4:	e7e9      	b.n	800647a <_fwalk_reent+0x12>

080064a6 <__retarget_lock_init_recursive>:
 80064a6:	4770      	bx	lr

080064a8 <__retarget_lock_acquire_recursive>:
 80064a8:	4770      	bx	lr

080064aa <__retarget_lock_release_recursive>:
 80064aa:	4770      	bx	lr

080064ac <__swhatbuf_r>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	460e      	mov	r6, r1
 80064b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b4:	2900      	cmp	r1, #0
 80064b6:	b096      	sub	sp, #88	; 0x58
 80064b8:	4614      	mov	r4, r2
 80064ba:	461d      	mov	r5, r3
 80064bc:	da07      	bge.n	80064ce <__swhatbuf_r+0x22>
 80064be:	2300      	movs	r3, #0
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	89b3      	ldrh	r3, [r6, #12]
 80064c4:	061a      	lsls	r2, r3, #24
 80064c6:	d410      	bmi.n	80064ea <__swhatbuf_r+0x3e>
 80064c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064cc:	e00e      	b.n	80064ec <__swhatbuf_r+0x40>
 80064ce:	466a      	mov	r2, sp
 80064d0:	f000 fd0c 	bl	8006eec <_fstat_r>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	dbf2      	blt.n	80064be <__swhatbuf_r+0x12>
 80064d8:	9a01      	ldr	r2, [sp, #4]
 80064da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064e2:	425a      	negs	r2, r3
 80064e4:	415a      	adcs	r2, r3
 80064e6:	602a      	str	r2, [r5, #0]
 80064e8:	e7ee      	b.n	80064c8 <__swhatbuf_r+0x1c>
 80064ea:	2340      	movs	r3, #64	; 0x40
 80064ec:	2000      	movs	r0, #0
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	b016      	add	sp, #88	; 0x58
 80064f2:	bd70      	pop	{r4, r5, r6, pc}

080064f4 <__smakebuf_r>:
 80064f4:	898b      	ldrh	r3, [r1, #12]
 80064f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064f8:	079d      	lsls	r5, r3, #30
 80064fa:	4606      	mov	r6, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	d507      	bpl.n	8006510 <__smakebuf_r+0x1c>
 8006500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	2301      	movs	r3, #1
 800650a:	6163      	str	r3, [r4, #20]
 800650c:	b002      	add	sp, #8
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	ab01      	add	r3, sp, #4
 8006512:	466a      	mov	r2, sp
 8006514:	f7ff ffca 	bl	80064ac <__swhatbuf_r>
 8006518:	9900      	ldr	r1, [sp, #0]
 800651a:	4605      	mov	r5, r0
 800651c:	4630      	mov	r0, r6
 800651e:	f7ff fc33 	bl	8005d88 <_malloc_r>
 8006522:	b948      	cbnz	r0, 8006538 <__smakebuf_r+0x44>
 8006524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006528:	059a      	lsls	r2, r3, #22
 800652a:	d4ef      	bmi.n	800650c <__smakebuf_r+0x18>
 800652c:	f023 0303 	bic.w	r3, r3, #3
 8006530:	f043 0302 	orr.w	r3, r3, #2
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	e7e3      	b.n	8006500 <__smakebuf_r+0xc>
 8006538:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <__smakebuf_r+0x7c>)
 800653a:	62b3      	str	r3, [r6, #40]	; 0x28
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	6020      	str	r0, [r4, #0]
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	6163      	str	r3, [r4, #20]
 800654a:	9b01      	ldr	r3, [sp, #4]
 800654c:	6120      	str	r0, [r4, #16]
 800654e:	b15b      	cbz	r3, 8006568 <__smakebuf_r+0x74>
 8006550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006554:	4630      	mov	r0, r6
 8006556:	f000 fcdb 	bl	8006f10 <_isatty_r>
 800655a:	b128      	cbz	r0, 8006568 <__smakebuf_r+0x74>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	89a0      	ldrh	r0, [r4, #12]
 800656a:	4305      	orrs	r5, r0
 800656c:	81a5      	strh	r5, [r4, #12]
 800656e:	e7cd      	b.n	800650c <__smakebuf_r+0x18>
 8006570:	08006305 	.word	0x08006305

08006574 <__malloc_lock>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__malloc_lock+0x8>)
 8006576:	f7ff bf97 	b.w	80064a8 <__retarget_lock_acquire_recursive>
 800657a:	bf00      	nop
 800657c:	20000224 	.word	0x20000224

08006580 <__malloc_unlock>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__malloc_unlock+0x8>)
 8006582:	f7ff bf92 	b.w	80064aa <__retarget_lock_release_recursive>
 8006586:	bf00      	nop
 8006588:	20000224 	.word	0x20000224

0800658c <__ssputs_r>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	688e      	ldr	r6, [r1, #8]
 8006592:	429e      	cmp	r6, r3
 8006594:	4682      	mov	sl, r0
 8006596:	460c      	mov	r4, r1
 8006598:	4690      	mov	r8, r2
 800659a:	461f      	mov	r7, r3
 800659c:	d838      	bhi.n	8006610 <__ssputs_r+0x84>
 800659e:	898a      	ldrh	r2, [r1, #12]
 80065a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065a4:	d032      	beq.n	800660c <__ssputs_r+0x80>
 80065a6:	6825      	ldr	r5, [r4, #0]
 80065a8:	6909      	ldr	r1, [r1, #16]
 80065aa:	eba5 0901 	sub.w	r9, r5, r1
 80065ae:	6965      	ldr	r5, [r4, #20]
 80065b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065b8:	3301      	adds	r3, #1
 80065ba:	444b      	add	r3, r9
 80065bc:	106d      	asrs	r5, r5, #1
 80065be:	429d      	cmp	r5, r3
 80065c0:	bf38      	it	cc
 80065c2:	461d      	movcc	r5, r3
 80065c4:	0553      	lsls	r3, r2, #21
 80065c6:	d531      	bpl.n	800662c <__ssputs_r+0xa0>
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7ff fbdd 	bl	8005d88 <_malloc_r>
 80065ce:	4606      	mov	r6, r0
 80065d0:	b950      	cbnz	r0, 80065e8 <__ssputs_r+0x5c>
 80065d2:	230c      	movs	r3, #12
 80065d4:	f8ca 3000 	str.w	r3, [sl]
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e8:	6921      	ldr	r1, [r4, #16]
 80065ea:	464a      	mov	r2, r9
 80065ec:	f000 fcb2 	bl	8006f54 <memcpy>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	6126      	str	r6, [r4, #16]
 80065fe:	6165      	str	r5, [r4, #20]
 8006600:	444e      	add	r6, r9
 8006602:	eba5 0509 	sub.w	r5, r5, r9
 8006606:	6026      	str	r6, [r4, #0]
 8006608:	60a5      	str	r5, [r4, #8]
 800660a:	463e      	mov	r6, r7
 800660c:	42be      	cmp	r6, r7
 800660e:	d900      	bls.n	8006612 <__ssputs_r+0x86>
 8006610:	463e      	mov	r6, r7
 8006612:	4632      	mov	r2, r6
 8006614:	6820      	ldr	r0, [r4, #0]
 8006616:	4641      	mov	r1, r8
 8006618:	f000 fcaa 	bl	8006f70 <memmove>
 800661c:	68a3      	ldr	r3, [r4, #8]
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	1b9b      	subs	r3, r3, r6
 8006622:	4432      	add	r2, r6
 8006624:	60a3      	str	r3, [r4, #8]
 8006626:	6022      	str	r2, [r4, #0]
 8006628:	2000      	movs	r0, #0
 800662a:	e7db      	b.n	80065e4 <__ssputs_r+0x58>
 800662c:	462a      	mov	r2, r5
 800662e:	f000 fcb9 	bl	8006fa4 <_realloc_r>
 8006632:	4606      	mov	r6, r0
 8006634:	2800      	cmp	r0, #0
 8006636:	d1e1      	bne.n	80065fc <__ssputs_r+0x70>
 8006638:	6921      	ldr	r1, [r4, #16]
 800663a:	4650      	mov	r0, sl
 800663c:	f7ff fb54 	bl	8005ce8 <_free_r>
 8006640:	e7c7      	b.n	80065d2 <__ssputs_r+0x46>
	...

08006644 <_svfiprintf_r>:
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006648:	4698      	mov	r8, r3
 800664a:	898b      	ldrh	r3, [r1, #12]
 800664c:	061b      	lsls	r3, r3, #24
 800664e:	b09d      	sub	sp, #116	; 0x74
 8006650:	4607      	mov	r7, r0
 8006652:	460d      	mov	r5, r1
 8006654:	4614      	mov	r4, r2
 8006656:	d50e      	bpl.n	8006676 <_svfiprintf_r+0x32>
 8006658:	690b      	ldr	r3, [r1, #16]
 800665a:	b963      	cbnz	r3, 8006676 <_svfiprintf_r+0x32>
 800665c:	2140      	movs	r1, #64	; 0x40
 800665e:	f7ff fb93 	bl	8005d88 <_malloc_r>
 8006662:	6028      	str	r0, [r5, #0]
 8006664:	6128      	str	r0, [r5, #16]
 8006666:	b920      	cbnz	r0, 8006672 <_svfiprintf_r+0x2e>
 8006668:	230c      	movs	r3, #12
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	e0d1      	b.n	8006816 <_svfiprintf_r+0x1d2>
 8006672:	2340      	movs	r3, #64	; 0x40
 8006674:	616b      	str	r3, [r5, #20]
 8006676:	2300      	movs	r3, #0
 8006678:	9309      	str	r3, [sp, #36]	; 0x24
 800667a:	2320      	movs	r3, #32
 800667c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006680:	f8cd 800c 	str.w	r8, [sp, #12]
 8006684:	2330      	movs	r3, #48	; 0x30
 8006686:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006830 <_svfiprintf_r+0x1ec>
 800668a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800668e:	f04f 0901 	mov.w	r9, #1
 8006692:	4623      	mov	r3, r4
 8006694:	469a      	mov	sl, r3
 8006696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800669a:	b10a      	cbz	r2, 80066a0 <_svfiprintf_r+0x5c>
 800669c:	2a25      	cmp	r2, #37	; 0x25
 800669e:	d1f9      	bne.n	8006694 <_svfiprintf_r+0x50>
 80066a0:	ebba 0b04 	subs.w	fp, sl, r4
 80066a4:	d00b      	beq.n	80066be <_svfiprintf_r+0x7a>
 80066a6:	465b      	mov	r3, fp
 80066a8:	4622      	mov	r2, r4
 80066aa:	4629      	mov	r1, r5
 80066ac:	4638      	mov	r0, r7
 80066ae:	f7ff ff6d 	bl	800658c <__ssputs_r>
 80066b2:	3001      	adds	r0, #1
 80066b4:	f000 80aa 	beq.w	800680c <_svfiprintf_r+0x1c8>
 80066b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ba:	445a      	add	r2, fp
 80066bc:	9209      	str	r2, [sp, #36]	; 0x24
 80066be:	f89a 3000 	ldrb.w	r3, [sl]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80a2 	beq.w	800680c <_svfiprintf_r+0x1c8>
 80066c8:	2300      	movs	r3, #0
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066d2:	f10a 0a01 	add.w	sl, sl, #1
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066de:	931a      	str	r3, [sp, #104]	; 0x68
 80066e0:	4654      	mov	r4, sl
 80066e2:	2205      	movs	r2, #5
 80066e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e8:	4851      	ldr	r0, [pc, #324]	; (8006830 <_svfiprintf_r+0x1ec>)
 80066ea:	f7f9 fd71 	bl	80001d0 <memchr>
 80066ee:	9a04      	ldr	r2, [sp, #16]
 80066f0:	b9d8      	cbnz	r0, 800672a <_svfiprintf_r+0xe6>
 80066f2:	06d0      	lsls	r0, r2, #27
 80066f4:	bf44      	itt	mi
 80066f6:	2320      	movmi	r3, #32
 80066f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066fc:	0711      	lsls	r1, r2, #28
 80066fe:	bf44      	itt	mi
 8006700:	232b      	movmi	r3, #43	; 0x2b
 8006702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006706:	f89a 3000 	ldrb.w	r3, [sl]
 800670a:	2b2a      	cmp	r3, #42	; 0x2a
 800670c:	d015      	beq.n	800673a <_svfiprintf_r+0xf6>
 800670e:	9a07      	ldr	r2, [sp, #28]
 8006710:	4654      	mov	r4, sl
 8006712:	2000      	movs	r0, #0
 8006714:	f04f 0c0a 	mov.w	ip, #10
 8006718:	4621      	mov	r1, r4
 800671a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800671e:	3b30      	subs	r3, #48	; 0x30
 8006720:	2b09      	cmp	r3, #9
 8006722:	d94e      	bls.n	80067c2 <_svfiprintf_r+0x17e>
 8006724:	b1b0      	cbz	r0, 8006754 <_svfiprintf_r+0x110>
 8006726:	9207      	str	r2, [sp, #28]
 8006728:	e014      	b.n	8006754 <_svfiprintf_r+0x110>
 800672a:	eba0 0308 	sub.w	r3, r0, r8
 800672e:	fa09 f303 	lsl.w	r3, r9, r3
 8006732:	4313      	orrs	r3, r2
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	46a2      	mov	sl, r4
 8006738:	e7d2      	b.n	80066e0 <_svfiprintf_r+0x9c>
 800673a:	9b03      	ldr	r3, [sp, #12]
 800673c:	1d19      	adds	r1, r3, #4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	9103      	str	r1, [sp, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	bfbb      	ittet	lt
 8006746:	425b      	neglt	r3, r3
 8006748:	f042 0202 	orrlt.w	r2, r2, #2
 800674c:	9307      	strge	r3, [sp, #28]
 800674e:	9307      	strlt	r3, [sp, #28]
 8006750:	bfb8      	it	lt
 8006752:	9204      	strlt	r2, [sp, #16]
 8006754:	7823      	ldrb	r3, [r4, #0]
 8006756:	2b2e      	cmp	r3, #46	; 0x2e
 8006758:	d10c      	bne.n	8006774 <_svfiprintf_r+0x130>
 800675a:	7863      	ldrb	r3, [r4, #1]
 800675c:	2b2a      	cmp	r3, #42	; 0x2a
 800675e:	d135      	bne.n	80067cc <_svfiprintf_r+0x188>
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	1d1a      	adds	r2, r3, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	9203      	str	r2, [sp, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfb8      	it	lt
 800676c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006770:	3402      	adds	r4, #2
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006840 <_svfiprintf_r+0x1fc>
 8006778:	7821      	ldrb	r1, [r4, #0]
 800677a:	2203      	movs	r2, #3
 800677c:	4650      	mov	r0, sl
 800677e:	f7f9 fd27 	bl	80001d0 <memchr>
 8006782:	b140      	cbz	r0, 8006796 <_svfiprintf_r+0x152>
 8006784:	2340      	movs	r3, #64	; 0x40
 8006786:	eba0 000a 	sub.w	r0, r0, sl
 800678a:	fa03 f000 	lsl.w	r0, r3, r0
 800678e:	9b04      	ldr	r3, [sp, #16]
 8006790:	4303      	orrs	r3, r0
 8006792:	3401      	adds	r4, #1
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679a:	4826      	ldr	r0, [pc, #152]	; (8006834 <_svfiprintf_r+0x1f0>)
 800679c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067a0:	2206      	movs	r2, #6
 80067a2:	f7f9 fd15 	bl	80001d0 <memchr>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d038      	beq.n	800681c <_svfiprintf_r+0x1d8>
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <_svfiprintf_r+0x1f4>)
 80067ac:	bb1b      	cbnz	r3, 80067f6 <_svfiprintf_r+0x1b2>
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	3307      	adds	r3, #7
 80067b2:	f023 0307 	bic.w	r3, r3, #7
 80067b6:	3308      	adds	r3, #8
 80067b8:	9303      	str	r3, [sp, #12]
 80067ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067bc:	4433      	add	r3, r6
 80067be:	9309      	str	r3, [sp, #36]	; 0x24
 80067c0:	e767      	b.n	8006692 <_svfiprintf_r+0x4e>
 80067c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067c6:	460c      	mov	r4, r1
 80067c8:	2001      	movs	r0, #1
 80067ca:	e7a5      	b.n	8006718 <_svfiprintf_r+0xd4>
 80067cc:	2300      	movs	r3, #0
 80067ce:	3401      	adds	r4, #1
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	4619      	mov	r1, r3
 80067d4:	f04f 0c0a 	mov.w	ip, #10
 80067d8:	4620      	mov	r0, r4
 80067da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067de:	3a30      	subs	r2, #48	; 0x30
 80067e0:	2a09      	cmp	r2, #9
 80067e2:	d903      	bls.n	80067ec <_svfiprintf_r+0x1a8>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0c5      	beq.n	8006774 <_svfiprintf_r+0x130>
 80067e8:	9105      	str	r1, [sp, #20]
 80067ea:	e7c3      	b.n	8006774 <_svfiprintf_r+0x130>
 80067ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80067f0:	4604      	mov	r4, r0
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7f0      	b.n	80067d8 <_svfiprintf_r+0x194>
 80067f6:	ab03      	add	r3, sp, #12
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	462a      	mov	r2, r5
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <_svfiprintf_r+0x1f8>)
 80067fe:	a904      	add	r1, sp, #16
 8006800:	4638      	mov	r0, r7
 8006802:	f3af 8000 	nop.w
 8006806:	1c42      	adds	r2, r0, #1
 8006808:	4606      	mov	r6, r0
 800680a:	d1d6      	bne.n	80067ba <_svfiprintf_r+0x176>
 800680c:	89ab      	ldrh	r3, [r5, #12]
 800680e:	065b      	lsls	r3, r3, #25
 8006810:	f53f af2c 	bmi.w	800666c <_svfiprintf_r+0x28>
 8006814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006816:	b01d      	add	sp, #116	; 0x74
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	ab03      	add	r3, sp, #12
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	462a      	mov	r2, r5
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <_svfiprintf_r+0x1f8>)
 8006824:	a904      	add	r1, sp, #16
 8006826:	4638      	mov	r0, r7
 8006828:	f000 f9d4 	bl	8006bd4 <_printf_i>
 800682c:	e7eb      	b.n	8006806 <_svfiprintf_r+0x1c2>
 800682e:	bf00      	nop
 8006830:	0800ae8c 	.word	0x0800ae8c
 8006834:	0800ae96 	.word	0x0800ae96
 8006838:	00000000 	.word	0x00000000
 800683c:	0800658d 	.word	0x0800658d
 8006840:	0800ae92 	.word	0x0800ae92

08006844 <__sfputc_r>:
 8006844:	6893      	ldr	r3, [r2, #8]
 8006846:	3b01      	subs	r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	b410      	push	{r4}
 800684c:	6093      	str	r3, [r2, #8]
 800684e:	da08      	bge.n	8006862 <__sfputc_r+0x1e>
 8006850:	6994      	ldr	r4, [r2, #24]
 8006852:	42a3      	cmp	r3, r4
 8006854:	db01      	blt.n	800685a <__sfputc_r+0x16>
 8006856:	290a      	cmp	r1, #10
 8006858:	d103      	bne.n	8006862 <__sfputc_r+0x1e>
 800685a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800685e:	f7ff bbab 	b.w	8005fb8 <__swbuf_r>
 8006862:	6813      	ldr	r3, [r2, #0]
 8006864:	1c58      	adds	r0, r3, #1
 8006866:	6010      	str	r0, [r2, #0]
 8006868:	7019      	strb	r1, [r3, #0]
 800686a:	4608      	mov	r0, r1
 800686c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006870:	4770      	bx	lr

08006872 <__sfputs_r>:
 8006872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006874:	4606      	mov	r6, r0
 8006876:	460f      	mov	r7, r1
 8006878:	4614      	mov	r4, r2
 800687a:	18d5      	adds	r5, r2, r3
 800687c:	42ac      	cmp	r4, r5
 800687e:	d101      	bne.n	8006884 <__sfputs_r+0x12>
 8006880:	2000      	movs	r0, #0
 8006882:	e007      	b.n	8006894 <__sfputs_r+0x22>
 8006884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006888:	463a      	mov	r2, r7
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff ffda 	bl	8006844 <__sfputc_r>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d1f3      	bne.n	800687c <__sfputs_r+0xa>
 8006894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006898 <_vfiprintf_r>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	460d      	mov	r5, r1
 800689e:	b09d      	sub	sp, #116	; 0x74
 80068a0:	4614      	mov	r4, r2
 80068a2:	4698      	mov	r8, r3
 80068a4:	4606      	mov	r6, r0
 80068a6:	b118      	cbz	r0, 80068b0 <_vfiprintf_r+0x18>
 80068a8:	6983      	ldr	r3, [r0, #24]
 80068aa:	b90b      	cbnz	r3, 80068b0 <_vfiprintf_r+0x18>
 80068ac:	f7ff fd5e 	bl	800636c <__sinit>
 80068b0:	4b89      	ldr	r3, [pc, #548]	; (8006ad8 <_vfiprintf_r+0x240>)
 80068b2:	429d      	cmp	r5, r3
 80068b4:	d11b      	bne.n	80068ee <_vfiprintf_r+0x56>
 80068b6:	6875      	ldr	r5, [r6, #4]
 80068b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068ba:	07d9      	lsls	r1, r3, #31
 80068bc:	d405      	bmi.n	80068ca <_vfiprintf_r+0x32>
 80068be:	89ab      	ldrh	r3, [r5, #12]
 80068c0:	059a      	lsls	r2, r3, #22
 80068c2:	d402      	bmi.n	80068ca <_vfiprintf_r+0x32>
 80068c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068c6:	f7ff fdef 	bl	80064a8 <__retarget_lock_acquire_recursive>
 80068ca:	89ab      	ldrh	r3, [r5, #12]
 80068cc:	071b      	lsls	r3, r3, #28
 80068ce:	d501      	bpl.n	80068d4 <_vfiprintf_r+0x3c>
 80068d0:	692b      	ldr	r3, [r5, #16]
 80068d2:	b9eb      	cbnz	r3, 8006910 <_vfiprintf_r+0x78>
 80068d4:	4629      	mov	r1, r5
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7ff fbc0 	bl	800605c <__swsetup_r>
 80068dc:	b1c0      	cbz	r0, 8006910 <_vfiprintf_r+0x78>
 80068de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068e0:	07dc      	lsls	r4, r3, #31
 80068e2:	d50e      	bpl.n	8006902 <_vfiprintf_r+0x6a>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b01d      	add	sp, #116	; 0x74
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	4b7b      	ldr	r3, [pc, #492]	; (8006adc <_vfiprintf_r+0x244>)
 80068f0:	429d      	cmp	r5, r3
 80068f2:	d101      	bne.n	80068f8 <_vfiprintf_r+0x60>
 80068f4:	68b5      	ldr	r5, [r6, #8]
 80068f6:	e7df      	b.n	80068b8 <_vfiprintf_r+0x20>
 80068f8:	4b79      	ldr	r3, [pc, #484]	; (8006ae0 <_vfiprintf_r+0x248>)
 80068fa:	429d      	cmp	r5, r3
 80068fc:	bf08      	it	eq
 80068fe:	68f5      	ldreq	r5, [r6, #12]
 8006900:	e7da      	b.n	80068b8 <_vfiprintf_r+0x20>
 8006902:	89ab      	ldrh	r3, [r5, #12]
 8006904:	0598      	lsls	r0, r3, #22
 8006906:	d4ed      	bmi.n	80068e4 <_vfiprintf_r+0x4c>
 8006908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800690a:	f7ff fdce 	bl	80064aa <__retarget_lock_release_recursive>
 800690e:	e7e9      	b.n	80068e4 <_vfiprintf_r+0x4c>
 8006910:	2300      	movs	r3, #0
 8006912:	9309      	str	r3, [sp, #36]	; 0x24
 8006914:	2320      	movs	r3, #32
 8006916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800691a:	f8cd 800c 	str.w	r8, [sp, #12]
 800691e:	2330      	movs	r3, #48	; 0x30
 8006920:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ae4 <_vfiprintf_r+0x24c>
 8006924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006928:	f04f 0901 	mov.w	r9, #1
 800692c:	4623      	mov	r3, r4
 800692e:	469a      	mov	sl, r3
 8006930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006934:	b10a      	cbz	r2, 800693a <_vfiprintf_r+0xa2>
 8006936:	2a25      	cmp	r2, #37	; 0x25
 8006938:	d1f9      	bne.n	800692e <_vfiprintf_r+0x96>
 800693a:	ebba 0b04 	subs.w	fp, sl, r4
 800693e:	d00b      	beq.n	8006958 <_vfiprintf_r+0xc0>
 8006940:	465b      	mov	r3, fp
 8006942:	4622      	mov	r2, r4
 8006944:	4629      	mov	r1, r5
 8006946:	4630      	mov	r0, r6
 8006948:	f7ff ff93 	bl	8006872 <__sfputs_r>
 800694c:	3001      	adds	r0, #1
 800694e:	f000 80aa 	beq.w	8006aa6 <_vfiprintf_r+0x20e>
 8006952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006954:	445a      	add	r2, fp
 8006956:	9209      	str	r2, [sp, #36]	; 0x24
 8006958:	f89a 3000 	ldrb.w	r3, [sl]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80a2 	beq.w	8006aa6 <_vfiprintf_r+0x20e>
 8006962:	2300      	movs	r3, #0
 8006964:	f04f 32ff 	mov.w	r2, #4294967295
 8006968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800696c:	f10a 0a01 	add.w	sl, sl, #1
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	9307      	str	r3, [sp, #28]
 8006974:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006978:	931a      	str	r3, [sp, #104]	; 0x68
 800697a:	4654      	mov	r4, sl
 800697c:	2205      	movs	r2, #5
 800697e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006982:	4858      	ldr	r0, [pc, #352]	; (8006ae4 <_vfiprintf_r+0x24c>)
 8006984:	f7f9 fc24 	bl	80001d0 <memchr>
 8006988:	9a04      	ldr	r2, [sp, #16]
 800698a:	b9d8      	cbnz	r0, 80069c4 <_vfiprintf_r+0x12c>
 800698c:	06d1      	lsls	r1, r2, #27
 800698e:	bf44      	itt	mi
 8006990:	2320      	movmi	r3, #32
 8006992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006996:	0713      	lsls	r3, r2, #28
 8006998:	bf44      	itt	mi
 800699a:	232b      	movmi	r3, #43	; 0x2b
 800699c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a0:	f89a 3000 	ldrb.w	r3, [sl]
 80069a4:	2b2a      	cmp	r3, #42	; 0x2a
 80069a6:	d015      	beq.n	80069d4 <_vfiprintf_r+0x13c>
 80069a8:	9a07      	ldr	r2, [sp, #28]
 80069aa:	4654      	mov	r4, sl
 80069ac:	2000      	movs	r0, #0
 80069ae:	f04f 0c0a 	mov.w	ip, #10
 80069b2:	4621      	mov	r1, r4
 80069b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069b8:	3b30      	subs	r3, #48	; 0x30
 80069ba:	2b09      	cmp	r3, #9
 80069bc:	d94e      	bls.n	8006a5c <_vfiprintf_r+0x1c4>
 80069be:	b1b0      	cbz	r0, 80069ee <_vfiprintf_r+0x156>
 80069c0:	9207      	str	r2, [sp, #28]
 80069c2:	e014      	b.n	80069ee <_vfiprintf_r+0x156>
 80069c4:	eba0 0308 	sub.w	r3, r0, r8
 80069c8:	fa09 f303 	lsl.w	r3, r9, r3
 80069cc:	4313      	orrs	r3, r2
 80069ce:	9304      	str	r3, [sp, #16]
 80069d0:	46a2      	mov	sl, r4
 80069d2:	e7d2      	b.n	800697a <_vfiprintf_r+0xe2>
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	1d19      	adds	r1, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	9103      	str	r1, [sp, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bfbb      	ittet	lt
 80069e0:	425b      	neglt	r3, r3
 80069e2:	f042 0202 	orrlt.w	r2, r2, #2
 80069e6:	9307      	strge	r3, [sp, #28]
 80069e8:	9307      	strlt	r3, [sp, #28]
 80069ea:	bfb8      	it	lt
 80069ec:	9204      	strlt	r2, [sp, #16]
 80069ee:	7823      	ldrb	r3, [r4, #0]
 80069f0:	2b2e      	cmp	r3, #46	; 0x2e
 80069f2:	d10c      	bne.n	8006a0e <_vfiprintf_r+0x176>
 80069f4:	7863      	ldrb	r3, [r4, #1]
 80069f6:	2b2a      	cmp	r3, #42	; 0x2a
 80069f8:	d135      	bne.n	8006a66 <_vfiprintf_r+0x1ce>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	1d1a      	adds	r2, r3, #4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	9203      	str	r2, [sp, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bfb8      	it	lt
 8006a06:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a0a:	3402      	adds	r4, #2
 8006a0c:	9305      	str	r3, [sp, #20]
 8006a0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006af4 <_vfiprintf_r+0x25c>
 8006a12:	7821      	ldrb	r1, [r4, #0]
 8006a14:	2203      	movs	r2, #3
 8006a16:	4650      	mov	r0, sl
 8006a18:	f7f9 fbda 	bl	80001d0 <memchr>
 8006a1c:	b140      	cbz	r0, 8006a30 <_vfiprintf_r+0x198>
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	eba0 000a 	sub.w	r0, r0, sl
 8006a24:	fa03 f000 	lsl.w	r0, r3, r0
 8006a28:	9b04      	ldr	r3, [sp, #16]
 8006a2a:	4303      	orrs	r3, r0
 8006a2c:	3401      	adds	r4, #1
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a34:	482c      	ldr	r0, [pc, #176]	; (8006ae8 <_vfiprintf_r+0x250>)
 8006a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a3a:	2206      	movs	r2, #6
 8006a3c:	f7f9 fbc8 	bl	80001d0 <memchr>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d03f      	beq.n	8006ac4 <_vfiprintf_r+0x22c>
 8006a44:	4b29      	ldr	r3, [pc, #164]	; (8006aec <_vfiprintf_r+0x254>)
 8006a46:	bb1b      	cbnz	r3, 8006a90 <_vfiprintf_r+0x1f8>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	3307      	adds	r3, #7
 8006a4c:	f023 0307 	bic.w	r3, r3, #7
 8006a50:	3308      	adds	r3, #8
 8006a52:	9303      	str	r3, [sp, #12]
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	443b      	add	r3, r7
 8006a58:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5a:	e767      	b.n	800692c <_vfiprintf_r+0x94>
 8006a5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a60:	460c      	mov	r4, r1
 8006a62:	2001      	movs	r0, #1
 8006a64:	e7a5      	b.n	80069b2 <_vfiprintf_r+0x11a>
 8006a66:	2300      	movs	r3, #0
 8006a68:	3401      	adds	r4, #1
 8006a6a:	9305      	str	r3, [sp, #20]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f04f 0c0a 	mov.w	ip, #10
 8006a72:	4620      	mov	r0, r4
 8006a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a78:	3a30      	subs	r2, #48	; 0x30
 8006a7a:	2a09      	cmp	r2, #9
 8006a7c:	d903      	bls.n	8006a86 <_vfiprintf_r+0x1ee>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0c5      	beq.n	8006a0e <_vfiprintf_r+0x176>
 8006a82:	9105      	str	r1, [sp, #20]
 8006a84:	e7c3      	b.n	8006a0e <_vfiprintf_r+0x176>
 8006a86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e7f0      	b.n	8006a72 <_vfiprintf_r+0x1da>
 8006a90:	ab03      	add	r3, sp, #12
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	462a      	mov	r2, r5
 8006a96:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <_vfiprintf_r+0x258>)
 8006a98:	a904      	add	r1, sp, #16
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f3af 8000 	nop.w
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	1c78      	adds	r0, r7, #1
 8006aa4:	d1d6      	bne.n	8006a54 <_vfiprintf_r+0x1bc>
 8006aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aa8:	07d9      	lsls	r1, r3, #31
 8006aaa:	d405      	bmi.n	8006ab8 <_vfiprintf_r+0x220>
 8006aac:	89ab      	ldrh	r3, [r5, #12]
 8006aae:	059a      	lsls	r2, r3, #22
 8006ab0:	d402      	bmi.n	8006ab8 <_vfiprintf_r+0x220>
 8006ab2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ab4:	f7ff fcf9 	bl	80064aa <__retarget_lock_release_recursive>
 8006ab8:	89ab      	ldrh	r3, [r5, #12]
 8006aba:	065b      	lsls	r3, r3, #25
 8006abc:	f53f af12 	bmi.w	80068e4 <_vfiprintf_r+0x4c>
 8006ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac2:	e711      	b.n	80068e8 <_vfiprintf_r+0x50>
 8006ac4:	ab03      	add	r3, sp, #12
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <_vfiprintf_r+0x258>)
 8006acc:	a904      	add	r1, sp, #16
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f000 f880 	bl	8006bd4 <_printf_i>
 8006ad4:	e7e4      	b.n	8006aa0 <_vfiprintf_r+0x208>
 8006ad6:	bf00      	nop
 8006ad8:	0800ae4c 	.word	0x0800ae4c
 8006adc:	0800ae6c 	.word	0x0800ae6c
 8006ae0:	0800ae2c 	.word	0x0800ae2c
 8006ae4:	0800ae8c 	.word	0x0800ae8c
 8006ae8:	0800ae96 	.word	0x0800ae96
 8006aec:	00000000 	.word	0x00000000
 8006af0:	08006873 	.word	0x08006873
 8006af4:	0800ae92 	.word	0x0800ae92

08006af8 <_printf_common>:
 8006af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006afc:	4616      	mov	r6, r2
 8006afe:	4699      	mov	r9, r3
 8006b00:	688a      	ldr	r2, [r1, #8]
 8006b02:	690b      	ldr	r3, [r1, #16]
 8006b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	bfb8      	it	lt
 8006b0c:	4613      	movlt	r3, r2
 8006b0e:	6033      	str	r3, [r6, #0]
 8006b10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b14:	4607      	mov	r7, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	b10a      	cbz	r2, 8006b1e <_printf_common+0x26>
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	6033      	str	r3, [r6, #0]
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	0699      	lsls	r1, r3, #26
 8006b22:	bf42      	ittt	mi
 8006b24:	6833      	ldrmi	r3, [r6, #0]
 8006b26:	3302      	addmi	r3, #2
 8006b28:	6033      	strmi	r3, [r6, #0]
 8006b2a:	6825      	ldr	r5, [r4, #0]
 8006b2c:	f015 0506 	ands.w	r5, r5, #6
 8006b30:	d106      	bne.n	8006b40 <_printf_common+0x48>
 8006b32:	f104 0a19 	add.w	sl, r4, #25
 8006b36:	68e3      	ldr	r3, [r4, #12]
 8006b38:	6832      	ldr	r2, [r6, #0]
 8006b3a:	1a9b      	subs	r3, r3, r2
 8006b3c:	42ab      	cmp	r3, r5
 8006b3e:	dc26      	bgt.n	8006b8e <_printf_common+0x96>
 8006b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b44:	1e13      	subs	r3, r2, #0
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	bf18      	it	ne
 8006b4a:	2301      	movne	r3, #1
 8006b4c:	0692      	lsls	r2, r2, #26
 8006b4e:	d42b      	bmi.n	8006ba8 <_printf_common+0xb0>
 8006b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b54:	4649      	mov	r1, r9
 8006b56:	4638      	mov	r0, r7
 8006b58:	47c0      	blx	r8
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d01e      	beq.n	8006b9c <_printf_common+0xa4>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	68e5      	ldr	r5, [r4, #12]
 8006b62:	6832      	ldr	r2, [r6, #0]
 8006b64:	f003 0306 	and.w	r3, r3, #6
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	bf08      	it	eq
 8006b6c:	1aad      	subeq	r5, r5, r2
 8006b6e:	68a3      	ldr	r3, [r4, #8]
 8006b70:	6922      	ldr	r2, [r4, #16]
 8006b72:	bf0c      	ite	eq
 8006b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b78:	2500      	movne	r5, #0
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	bfc4      	itt	gt
 8006b7e:	1a9b      	subgt	r3, r3, r2
 8006b80:	18ed      	addgt	r5, r5, r3
 8006b82:	2600      	movs	r6, #0
 8006b84:	341a      	adds	r4, #26
 8006b86:	42b5      	cmp	r5, r6
 8006b88:	d11a      	bne.n	8006bc0 <_printf_common+0xc8>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e008      	b.n	8006ba0 <_printf_common+0xa8>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4652      	mov	r2, sl
 8006b92:	4649      	mov	r1, r9
 8006b94:	4638      	mov	r0, r7
 8006b96:	47c0      	blx	r8
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d103      	bne.n	8006ba4 <_printf_common+0xac>
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	e7c6      	b.n	8006b36 <_printf_common+0x3e>
 8006ba8:	18e1      	adds	r1, r4, r3
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	2030      	movs	r0, #48	; 0x30
 8006bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bb2:	4422      	add	r2, r4
 8006bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bbc:	3302      	adds	r3, #2
 8006bbe:	e7c7      	b.n	8006b50 <_printf_common+0x58>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	47c0      	blx	r8
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d0e6      	beq.n	8006b9c <_printf_common+0xa4>
 8006bce:	3601      	adds	r6, #1
 8006bd0:	e7d9      	b.n	8006b86 <_printf_common+0x8e>
	...

08006bd4 <_printf_i>:
 8006bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd8:	460c      	mov	r4, r1
 8006bda:	4691      	mov	r9, r2
 8006bdc:	7e27      	ldrb	r7, [r4, #24]
 8006bde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006be0:	2f78      	cmp	r7, #120	; 0x78
 8006be2:	4680      	mov	r8, r0
 8006be4:	469a      	mov	sl, r3
 8006be6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bea:	d807      	bhi.n	8006bfc <_printf_i+0x28>
 8006bec:	2f62      	cmp	r7, #98	; 0x62
 8006bee:	d80a      	bhi.n	8006c06 <_printf_i+0x32>
 8006bf0:	2f00      	cmp	r7, #0
 8006bf2:	f000 80d8 	beq.w	8006da6 <_printf_i+0x1d2>
 8006bf6:	2f58      	cmp	r7, #88	; 0x58
 8006bf8:	f000 80a3 	beq.w	8006d42 <_printf_i+0x16e>
 8006bfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c04:	e03a      	b.n	8006c7c <_printf_i+0xa8>
 8006c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c0a:	2b15      	cmp	r3, #21
 8006c0c:	d8f6      	bhi.n	8006bfc <_printf_i+0x28>
 8006c0e:	a001      	add	r0, pc, #4	; (adr r0, 8006c14 <_printf_i+0x40>)
 8006c10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c14:	08006c6d 	.word	0x08006c6d
 8006c18:	08006c81 	.word	0x08006c81
 8006c1c:	08006bfd 	.word	0x08006bfd
 8006c20:	08006bfd 	.word	0x08006bfd
 8006c24:	08006bfd 	.word	0x08006bfd
 8006c28:	08006bfd 	.word	0x08006bfd
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006bfd 	.word	0x08006bfd
 8006c34:	08006bfd 	.word	0x08006bfd
 8006c38:	08006bfd 	.word	0x08006bfd
 8006c3c:	08006bfd 	.word	0x08006bfd
 8006c40:	08006d8d 	.word	0x08006d8d
 8006c44:	08006cb1 	.word	0x08006cb1
 8006c48:	08006d6f 	.word	0x08006d6f
 8006c4c:	08006bfd 	.word	0x08006bfd
 8006c50:	08006bfd 	.word	0x08006bfd
 8006c54:	08006daf 	.word	0x08006daf
 8006c58:	08006bfd 	.word	0x08006bfd
 8006c5c:	08006cb1 	.word	0x08006cb1
 8006c60:	08006bfd 	.word	0x08006bfd
 8006c64:	08006bfd 	.word	0x08006bfd
 8006c68:	08006d77 	.word	0x08006d77
 8006c6c:	680b      	ldr	r3, [r1, #0]
 8006c6e:	1d1a      	adds	r2, r3, #4
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	600a      	str	r2, [r1, #0]
 8006c74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e0a3      	b.n	8006dc8 <_printf_i+0x1f4>
 8006c80:	6825      	ldr	r5, [r4, #0]
 8006c82:	6808      	ldr	r0, [r1, #0]
 8006c84:	062e      	lsls	r6, r5, #24
 8006c86:	f100 0304 	add.w	r3, r0, #4
 8006c8a:	d50a      	bpl.n	8006ca2 <_printf_i+0xce>
 8006c8c:	6805      	ldr	r5, [r0, #0]
 8006c8e:	600b      	str	r3, [r1, #0]
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	da03      	bge.n	8006c9c <_printf_i+0xc8>
 8006c94:	232d      	movs	r3, #45	; 0x2d
 8006c96:	426d      	negs	r5, r5
 8006c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c9c:	485e      	ldr	r0, [pc, #376]	; (8006e18 <_printf_i+0x244>)
 8006c9e:	230a      	movs	r3, #10
 8006ca0:	e019      	b.n	8006cd6 <_printf_i+0x102>
 8006ca2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ca6:	6805      	ldr	r5, [r0, #0]
 8006ca8:	600b      	str	r3, [r1, #0]
 8006caa:	bf18      	it	ne
 8006cac:	b22d      	sxthne	r5, r5
 8006cae:	e7ef      	b.n	8006c90 <_printf_i+0xbc>
 8006cb0:	680b      	ldr	r3, [r1, #0]
 8006cb2:	6825      	ldr	r5, [r4, #0]
 8006cb4:	1d18      	adds	r0, r3, #4
 8006cb6:	6008      	str	r0, [r1, #0]
 8006cb8:	0628      	lsls	r0, r5, #24
 8006cba:	d501      	bpl.n	8006cc0 <_printf_i+0xec>
 8006cbc:	681d      	ldr	r5, [r3, #0]
 8006cbe:	e002      	b.n	8006cc6 <_printf_i+0xf2>
 8006cc0:	0669      	lsls	r1, r5, #25
 8006cc2:	d5fb      	bpl.n	8006cbc <_printf_i+0xe8>
 8006cc4:	881d      	ldrh	r5, [r3, #0]
 8006cc6:	4854      	ldr	r0, [pc, #336]	; (8006e18 <_printf_i+0x244>)
 8006cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8006cca:	bf0c      	ite	eq
 8006ccc:	2308      	moveq	r3, #8
 8006cce:	230a      	movne	r3, #10
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cd6:	6866      	ldr	r6, [r4, #4]
 8006cd8:	60a6      	str	r6, [r4, #8]
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	bfa2      	ittt	ge
 8006cde:	6821      	ldrge	r1, [r4, #0]
 8006ce0:	f021 0104 	bicge.w	r1, r1, #4
 8006ce4:	6021      	strge	r1, [r4, #0]
 8006ce6:	b90d      	cbnz	r5, 8006cec <_printf_i+0x118>
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	d04d      	beq.n	8006d88 <_printf_i+0x1b4>
 8006cec:	4616      	mov	r6, r2
 8006cee:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cf2:	fb03 5711 	mls	r7, r3, r1, r5
 8006cf6:	5dc7      	ldrb	r7, [r0, r7]
 8006cf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cfc:	462f      	mov	r7, r5
 8006cfe:	42bb      	cmp	r3, r7
 8006d00:	460d      	mov	r5, r1
 8006d02:	d9f4      	bls.n	8006cee <_printf_i+0x11a>
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d10b      	bne.n	8006d20 <_printf_i+0x14c>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	07df      	lsls	r7, r3, #31
 8006d0c:	d508      	bpl.n	8006d20 <_printf_i+0x14c>
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6861      	ldr	r1, [r4, #4]
 8006d12:	4299      	cmp	r1, r3
 8006d14:	bfde      	ittt	le
 8006d16:	2330      	movle	r3, #48	; 0x30
 8006d18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d20:	1b92      	subs	r2, r2, r6
 8006d22:	6122      	str	r2, [r4, #16]
 8006d24:	f8cd a000 	str.w	sl, [sp]
 8006d28:	464b      	mov	r3, r9
 8006d2a:	aa03      	add	r2, sp, #12
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7ff fee2 	bl	8006af8 <_printf_common>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d14c      	bne.n	8006dd2 <_printf_i+0x1fe>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	b004      	add	sp, #16
 8006d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d42:	4835      	ldr	r0, [pc, #212]	; (8006e18 <_printf_i+0x244>)
 8006d44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	680e      	ldr	r6, [r1, #0]
 8006d4c:	061f      	lsls	r7, r3, #24
 8006d4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d52:	600e      	str	r6, [r1, #0]
 8006d54:	d514      	bpl.n	8006d80 <_printf_i+0x1ac>
 8006d56:	07d9      	lsls	r1, r3, #31
 8006d58:	bf44      	itt	mi
 8006d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d5e:	6023      	strmi	r3, [r4, #0]
 8006d60:	b91d      	cbnz	r5, 8006d6a <_printf_i+0x196>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	f023 0320 	bic.w	r3, r3, #32
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	2310      	movs	r3, #16
 8006d6c:	e7b0      	b.n	8006cd0 <_printf_i+0xfc>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	f043 0320 	orr.w	r3, r3, #32
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	2378      	movs	r3, #120	; 0x78
 8006d78:	4828      	ldr	r0, [pc, #160]	; (8006e1c <_printf_i+0x248>)
 8006d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d7e:	e7e3      	b.n	8006d48 <_printf_i+0x174>
 8006d80:	065e      	lsls	r6, r3, #25
 8006d82:	bf48      	it	mi
 8006d84:	b2ad      	uxthmi	r5, r5
 8006d86:	e7e6      	b.n	8006d56 <_printf_i+0x182>
 8006d88:	4616      	mov	r6, r2
 8006d8a:	e7bb      	b.n	8006d04 <_printf_i+0x130>
 8006d8c:	680b      	ldr	r3, [r1, #0]
 8006d8e:	6826      	ldr	r6, [r4, #0]
 8006d90:	6960      	ldr	r0, [r4, #20]
 8006d92:	1d1d      	adds	r5, r3, #4
 8006d94:	600d      	str	r5, [r1, #0]
 8006d96:	0635      	lsls	r5, r6, #24
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	d501      	bpl.n	8006da0 <_printf_i+0x1cc>
 8006d9c:	6018      	str	r0, [r3, #0]
 8006d9e:	e002      	b.n	8006da6 <_printf_i+0x1d2>
 8006da0:	0671      	lsls	r1, r6, #25
 8006da2:	d5fb      	bpl.n	8006d9c <_printf_i+0x1c8>
 8006da4:	8018      	strh	r0, [r3, #0]
 8006da6:	2300      	movs	r3, #0
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	4616      	mov	r6, r2
 8006dac:	e7ba      	b.n	8006d24 <_printf_i+0x150>
 8006dae:	680b      	ldr	r3, [r1, #0]
 8006db0:	1d1a      	adds	r2, r3, #4
 8006db2:	600a      	str	r2, [r1, #0]
 8006db4:	681e      	ldr	r6, [r3, #0]
 8006db6:	6862      	ldr	r2, [r4, #4]
 8006db8:	2100      	movs	r1, #0
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7f9 fa08 	bl	80001d0 <memchr>
 8006dc0:	b108      	cbz	r0, 8006dc6 <_printf_i+0x1f2>
 8006dc2:	1b80      	subs	r0, r0, r6
 8006dc4:	6060      	str	r0, [r4, #4]
 8006dc6:	6863      	ldr	r3, [r4, #4]
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd0:	e7a8      	b.n	8006d24 <_printf_i+0x150>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	47d0      	blx	sl
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d0ab      	beq.n	8006d38 <_printf_i+0x164>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	079b      	lsls	r3, r3, #30
 8006de4:	d413      	bmi.n	8006e0e <_printf_i+0x23a>
 8006de6:	68e0      	ldr	r0, [r4, #12]
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	4298      	cmp	r0, r3
 8006dec:	bfb8      	it	lt
 8006dee:	4618      	movlt	r0, r3
 8006df0:	e7a4      	b.n	8006d3c <_printf_i+0x168>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4632      	mov	r2, r6
 8006df6:	4649      	mov	r1, r9
 8006df8:	4640      	mov	r0, r8
 8006dfa:	47d0      	blx	sl
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d09b      	beq.n	8006d38 <_printf_i+0x164>
 8006e00:	3501      	adds	r5, #1
 8006e02:	68e3      	ldr	r3, [r4, #12]
 8006e04:	9903      	ldr	r1, [sp, #12]
 8006e06:	1a5b      	subs	r3, r3, r1
 8006e08:	42ab      	cmp	r3, r5
 8006e0a:	dcf2      	bgt.n	8006df2 <_printf_i+0x21e>
 8006e0c:	e7eb      	b.n	8006de6 <_printf_i+0x212>
 8006e0e:	2500      	movs	r5, #0
 8006e10:	f104 0619 	add.w	r6, r4, #25
 8006e14:	e7f5      	b.n	8006e02 <_printf_i+0x22e>
 8006e16:	bf00      	nop
 8006e18:	0800ae9d 	.word	0x0800ae9d
 8006e1c:	0800aeae 	.word	0x0800aeae

08006e20 <__sread>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	460c      	mov	r4, r1
 8006e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e28:	f000 f8e2 	bl	8006ff0 <_read_r>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	bfab      	itete	ge
 8006e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e32:	89a3      	ldrhlt	r3, [r4, #12]
 8006e34:	181b      	addge	r3, r3, r0
 8006e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e3a:	bfac      	ite	ge
 8006e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e3e:	81a3      	strhlt	r3, [r4, #12]
 8006e40:	bd10      	pop	{r4, pc}

08006e42 <__swrite>:
 8006e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	461f      	mov	r7, r3
 8006e48:	898b      	ldrh	r3, [r1, #12]
 8006e4a:	05db      	lsls	r3, r3, #23
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	4616      	mov	r6, r2
 8006e52:	d505      	bpl.n	8006e60 <__swrite+0x1e>
 8006e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e58:	2302      	movs	r3, #2
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f000 f868 	bl	8006f30 <_lseek_r>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	463b      	mov	r3, r7
 8006e70:	4628      	mov	r0, r5
 8006e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e76:	f000 b817 	b.w	8006ea8 <_write_r>

08006e7a <__sseek>:
 8006e7a:	b510      	push	{r4, lr}
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e82:	f000 f855 	bl	8006f30 <_lseek_r>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	bf15      	itete	ne
 8006e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e96:	81a3      	strheq	r3, [r4, #12]
 8006e98:	bf18      	it	ne
 8006e9a:	81a3      	strhne	r3, [r4, #12]
 8006e9c:	bd10      	pop	{r4, pc}

08006e9e <__sclose>:
 8006e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea2:	f000 b813 	b.w	8006ecc <_close_r>
	...

08006ea8 <_write_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d07      	ldr	r5, [pc, #28]	; (8006ec8 <_write_r+0x20>)
 8006eac:	4604      	mov	r4, r0
 8006eae:	4608      	mov	r0, r1
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	602a      	str	r2, [r5, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f7fb f83b 	bl	8001f32 <_write>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_write_r+0x1e>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_write_r+0x1e>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	2000022c 	.word	0x2000022c

08006ecc <_close_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d06      	ldr	r5, [pc, #24]	; (8006ee8 <_close_r+0x1c>)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	f7fb f847 	bl	8001f6a <_close>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_close_r+0x1a>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_close_r+0x1a>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	2000022c 	.word	0x2000022c

08006eec <_fstat_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d07      	ldr	r5, [pc, #28]	; (8006f0c <_fstat_r+0x20>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	602b      	str	r3, [r5, #0]
 8006efa:	f7fb f842 	bl	8001f82 <_fstat>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	d102      	bne.n	8006f08 <_fstat_r+0x1c>
 8006f02:	682b      	ldr	r3, [r5, #0]
 8006f04:	b103      	cbz	r3, 8006f08 <_fstat_r+0x1c>
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	bd38      	pop	{r3, r4, r5, pc}
 8006f0a:	bf00      	nop
 8006f0c:	2000022c 	.word	0x2000022c

08006f10 <_isatty_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d06      	ldr	r5, [pc, #24]	; (8006f2c <_isatty_r+0x1c>)
 8006f14:	2300      	movs	r3, #0
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	602b      	str	r3, [r5, #0]
 8006f1c:	f7fb f841 	bl	8001fa2 <_isatty>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d102      	bne.n	8006f2a <_isatty_r+0x1a>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	b103      	cbz	r3, 8006f2a <_isatty_r+0x1a>
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	2000022c 	.word	0x2000022c

08006f30 <_lseek_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d07      	ldr	r5, [pc, #28]	; (8006f50 <_lseek_r+0x20>)
 8006f34:	4604      	mov	r4, r0
 8006f36:	4608      	mov	r0, r1
 8006f38:	4611      	mov	r1, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	602a      	str	r2, [r5, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f7fb f83a 	bl	8001fb8 <_lseek>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_lseek_r+0x1e>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_lseek_r+0x1e>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	2000022c 	.word	0x2000022c

08006f54 <memcpy>:
 8006f54:	440a      	add	r2, r1
 8006f56:	4291      	cmp	r1, r2
 8006f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f5c:	d100      	bne.n	8006f60 <memcpy+0xc>
 8006f5e:	4770      	bx	lr
 8006f60:	b510      	push	{r4, lr}
 8006f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f6a:	4291      	cmp	r1, r2
 8006f6c:	d1f9      	bne.n	8006f62 <memcpy+0xe>
 8006f6e:	bd10      	pop	{r4, pc}

08006f70 <memmove>:
 8006f70:	4288      	cmp	r0, r1
 8006f72:	b510      	push	{r4, lr}
 8006f74:	eb01 0402 	add.w	r4, r1, r2
 8006f78:	d902      	bls.n	8006f80 <memmove+0x10>
 8006f7a:	4284      	cmp	r4, r0
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	d807      	bhi.n	8006f90 <memmove+0x20>
 8006f80:	1e43      	subs	r3, r0, #1
 8006f82:	42a1      	cmp	r1, r4
 8006f84:	d008      	beq.n	8006f98 <memmove+0x28>
 8006f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f8e:	e7f8      	b.n	8006f82 <memmove+0x12>
 8006f90:	4402      	add	r2, r0
 8006f92:	4601      	mov	r1, r0
 8006f94:	428a      	cmp	r2, r1
 8006f96:	d100      	bne.n	8006f9a <memmove+0x2a>
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fa2:	e7f7      	b.n	8006f94 <memmove+0x24>

08006fa4 <_realloc_r>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	4614      	mov	r4, r2
 8006faa:	460e      	mov	r6, r1
 8006fac:	b921      	cbnz	r1, 8006fb8 <_realloc_r+0x14>
 8006fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	f7fe bee8 	b.w	8005d88 <_malloc_r>
 8006fb8:	b922      	cbnz	r2, 8006fc4 <_realloc_r+0x20>
 8006fba:	f7fe fe95 	bl	8005ce8 <_free_r>
 8006fbe:	4625      	mov	r5, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc4:	f000 f826 	bl	8007014 <_malloc_usable_size_r>
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d20f      	bcs.n	8006fec <_realloc_r+0x48>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7fe feda 	bl	8005d88 <_malloc_r>
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d0f2      	beq.n	8006fc0 <_realloc_r+0x1c>
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4622      	mov	r2, r4
 8006fde:	f7ff ffb9 	bl	8006f54 <memcpy>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7fe fe7f 	bl	8005ce8 <_free_r>
 8006fea:	e7e9      	b.n	8006fc0 <_realloc_r+0x1c>
 8006fec:	4635      	mov	r5, r6
 8006fee:	e7e7      	b.n	8006fc0 <_realloc_r+0x1c>

08006ff0 <_read_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	; (8007010 <_read_r+0x20>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7fa ff7a 	bl	8001ef8 <_read>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_read_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_read_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	2000022c 	.word	0x2000022c

08007014 <_malloc_usable_size_r>:
 8007014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007018:	1f18      	subs	r0, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfbc      	itt	lt
 800701e:	580b      	ldrlt	r3, [r1, r0]
 8007020:	18c0      	addlt	r0, r0, r3
 8007022:	4770      	bx	lr

08007024 <_init>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	bf00      	nop
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr

08007030 <_fini>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr

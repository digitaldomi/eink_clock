
eInkProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020cc  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c80  08008c80  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008c80  08008c80  00018c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c88  08008c88  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000078  08008d08  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08008d08  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001725f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003025  00000000  00000000  00037307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0003a330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  0003b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002934c  00000000  00000000  0003c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ef4  00000000  00000000  000654d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4a05  00000000  00000000  0007b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016fdcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004780  00000000  00000000  0016fe20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b9c 	.word	0x08006b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006b9c 	.word	0x08006b9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Time_Init>:

extern RTC_HandleTypeDef hrtc;
RTC_TimeTypeDef sTime;
RTC_AlarmTypeDef sAlarm;

void Time_Init(){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800056e:	2200      	movs	r2, #0
 8000570:	4923      	ldr	r1, [pc, #140]	; (8000600 <Time_Init+0x98>)
 8000572:	4824      	ldr	r0, [pc, #144]	; (8000604 <Time_Init+0x9c>)
 8000574:	f003 fde4 	bl	8004140 <HAL_RTC_GetTime>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000578:	2200      	movs	r2, #0
 800057a:	4921      	ldr	r1, [pc, #132]	; (8000600 <Time_Init+0x98>)
 800057c:	4821      	ldr	r0, [pc, #132]	; (8000604 <Time_Init+0x9c>)
 800057e:	f003 fddf 	bl	8004140 <HAL_RTC_GetTime>
	uint8_t next_second = sTime.Seconds+=10;
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <Time_Init+0x98>)
 8000584:	789b      	ldrb	r3, [r3, #2]
 8000586:	330a      	adds	r3, #10
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <Time_Init+0x98>)
 800058c:	709a      	strb	r2, [r3, #2]
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <Time_Init+0x98>)
 8000590:	789b      	ldrb	r3, [r3, #2]
 8000592:	71fb      	strb	r3, [r7, #7]
	if (next_second > 59) next_second = 0;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b3b      	cmp	r3, #59	; 0x3b
 8000598:	d901      	bls.n	800059e <Time_Init+0x36>
 800059a:	2300      	movs	r3, #0
 800059c:	71fb      	strb	r3, [r7, #7]

	sAlarm.AlarmTime.Hours = 0x0;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <Time_Init+0xa0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <Time_Init+0xa0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = next_second;
 80005aa:	4a17      	ldr	r2, [pc, #92]	; (8000608 <Time_Init+0xa0>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <Time_Init+0xa0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <Time_Init+0xa0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <Time_Init+0xa0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <Time_Init+0xa0>)
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <Time_Init+0xa0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <Time_Init+0xa0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <Time_Init+0xa0>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <Time_Init+0xa0>)
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80005e4:	2200      	movs	r2, #0
 80005e6:	4908      	ldr	r1, [pc, #32]	; (8000608 <Time_Init+0xa0>)
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <Time_Init+0x9c>)
 80005ea:	f003 fed9 	bl	80043a0 <HAL_RTC_SetAlarm_IT>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <Time_Init+0x90>
	{
	Error_Handler();
 80005f4:	f001 fb64 	bl	8001cc0 <Error_Handler>
	}
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000a0 	.word	0x200000a0
 8000604:	2000015c 	.word	0x2000015c
 8000608:	200000b4 	.word	0x200000b4

0800060c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	RTC_AlarmCallback();
 8000614:	f000 f804 	bl	8000620 <RTC_AlarmCallback>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <RTC_AlarmCallback>:


void RTC_AlarmCallback(){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000626:	2120      	movs	r1, #32
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f002 f94a 	bl	80028c4 <HAL_GPIO_TogglePin>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000630:	2200      	movs	r2, #0
 8000632:	4922      	ldr	r1, [pc, #136]	; (80006bc <RTC_AlarmCallback+0x9c>)
 8000634:	4822      	ldr	r0, [pc, #136]	; (80006c0 <RTC_AlarmCallback+0xa0>)
 8000636:	f003 fd83 	bl	8004140 <HAL_RTC_GetTime>
	uint8_t next_second = sTime.Seconds+=10;
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <RTC_AlarmCallback+0x9c>)
 800063c:	789b      	ldrb	r3, [r3, #2]
 800063e:	330a      	adds	r3, #10
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <RTC_AlarmCallback+0x9c>)
 8000644:	709a      	strb	r2, [r3, #2]
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <RTC_AlarmCallback+0x9c>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	71fb      	strb	r3, [r7, #7]
	if (next_second > 59) next_second = 0;
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b3b      	cmp	r3, #59	; 0x3b
 8000650:	d901      	bls.n	8000656 <RTC_AlarmCallback+0x36>
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]

	sAlarm.AlarmTime.Hours = sTime.Hours;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <RTC_AlarmCallback+0x9c>)
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 800065c:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = sTime.Minutes;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <RTC_AlarmCallback+0x9c>)
 8000660:	785a      	ldrb	r2, [r3, #1]
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 8000664:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = next_second;
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 8000692:	2201      	movs	r2, #1
 8000694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 800069a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80006a0:	2200      	movs	r2, #0
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <RTC_AlarmCallback+0xa4>)
 80006a4:	4806      	ldr	r0, [pc, #24]	; (80006c0 <RTC_AlarmCallback+0xa0>)
 80006a6:	f003 fe7b 	bl	80043a0 <HAL_RTC_SetAlarm_IT>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <RTC_AlarmCallback+0x94>
	{
	Error_Handler();
 80006b0:	f001 fb06 	bl	8001cc0 <Error_Handler>
	}
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000a0 	.word	0x200000a0
 80006c0:	2000015c 	.word	0x2000015c
 80006c4:	200000b4 	.word	0x200000b4

080006c8 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	4608      	mov	r0, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4603      	mov	r3, r0
 80006d8:	817b      	strh	r3, [r7, #10]
 80006da:	460b      	mov	r3, r1
 80006dc:	813b      	strh	r3, [r7, #8]
 80006de:	4613      	mov	r3, r2
 80006e0:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <Paint_NewImage+0xa8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <Paint_NewImage+0xa8>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <Paint_NewImage+0xa8>)
 80006f0:	897b      	ldrh	r3, [r7, #10]
 80006f2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <Paint_NewImage+0xa8>)
 80006f6:	893b      	ldrh	r3, [r7, #8]
 80006f8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <Paint_NewImage+0xa8>)
 80006fc:	8b3b      	ldrh	r3, [r7, #24]
 80006fe:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <Paint_NewImage+0xa8>)
 8000702:	2202      	movs	r2, #2
 8000704:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000706:	897b      	ldrh	r3, [r7, #10]
 8000708:	f003 0307 	and.w	r3, r3, #7
 800070c:	b29b      	uxth	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d103      	bne.n	800071a <Paint_NewImage+0x52>
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	b29b      	uxth	r3, r3
 8000718:	e004      	b.n	8000724 <Paint_NewImage+0x5c>
 800071a:	897b      	ldrh	r3, [r7, #10]
 800071c:	08db      	lsrs	r3, r3, #3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <Paint_NewImage+0xa8>)
 8000726:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <Paint_NewImage+0xa8>)
 800072a:	893b      	ldrh	r3, [r7, #8]
 800072c:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <Paint_NewImage+0xa8>)
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <Paint_NewImage+0xa8>)
 8000736:	2200      	movs	r2, #0
 8000738:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <Paint_NewImage+0x7e>
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	2bb4      	cmp	r3, #180	; 0xb4
 8000744:	d106      	bne.n	8000754 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <Paint_NewImage+0xa8>)
 8000748:	897b      	ldrh	r3, [r7, #10]
 800074a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800074c:	4a08      	ldr	r2, [pc, #32]	; (8000770 <Paint_NewImage+0xa8>)
 800074e:	893b      	ldrh	r3, [r7, #8]
 8000750:	80d3      	strh	r3, [r2, #6]
 8000752:	e006      	b.n	8000762 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <Paint_NewImage+0xa8>)
 8000756:	893b      	ldrh	r3, [r7, #8]
 8000758:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <Paint_NewImage+0xa8>)
 800075c:	897b      	ldrh	r3, [r7, #10]
 800075e:	80d3      	strh	r3, [r2, #6]
    }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200000e0 	.word	0x200000e0

08000774 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <Paint_SelectImage+0x1c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	200000e0 	.word	0x200000e0

08000794 <Paint_SetMirroring>:
function:	Select Image mirror
parameter:
    mirror   :Not mirror,Horizontal mirror,Vertical mirror,Origin mirror
******************************************************************************/
void Paint_SetMirroring(UBYTE mirror)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
    if(mirror == MIRROR_NONE || mirror == MIRROR_HORIZONTAL || 
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d008      	beq.n	80007b6 <Paint_SetMirroring+0x22>
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d005      	beq.n	80007b6 <Paint_SetMirroring+0x22>
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d002      	beq.n	80007b6 <Paint_SetMirroring+0x22>
        mirror == MIRROR_VERTICAL || mirror == MIRROR_ORIGIN) {
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d11a      	bne.n	80007ec <Paint_SetMirroring+0x58>
        Debug("mirror image x:%s, y:%s\r\n",(mirror & 0x01)? "mirror":"none", ((mirror >> 1) & 0x01)? "mirror":"none");
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <Paint_SetMirroring+0x30>
 80007c0:	490e      	ldr	r1, [pc, #56]	; (80007fc <Paint_SetMirroring+0x68>)
 80007c2:	e000      	b.n	80007c6 <Paint_SetMirroring+0x32>
 80007c4:	490e      	ldr	r1, [pc, #56]	; (8000800 <Paint_SetMirroring+0x6c>)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <Paint_SetMirroring+0x44>
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <Paint_SetMirroring+0x68>)
 80007d6:	e000      	b.n	80007da <Paint_SetMirroring+0x46>
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <Paint_SetMirroring+0x6c>)
 80007da:	461a      	mov	r2, r3
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <Paint_SetMirroring+0x70>)
 80007de:	f005 fabb 	bl	8005d58 <iprintf>
        Paint.Mirror = mirror;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <Paint_SetMirroring+0x74>)
 80007e8:	821a      	strh	r2, [r3, #16]
        mirror == MIRROR_VERTICAL || mirror == MIRROR_ORIGIN) {
 80007ea:	e003      	b.n	80007f4 <Paint_SetMirroring+0x60>
    } else {
        Debug("mirror should be MIRROR_NONE, MIRROR_HORIZONTAL, \
 80007ec:	4807      	ldr	r0, [pc, #28]	; (800080c <Paint_SetMirroring+0x78>)
 80007ee:	f005 fb39 	bl	8005e64 <puts>
        MIRROR_VERTICAL or MIRROR_ORIGIN\r\n");
    }    
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08006c44 	.word	0x08006c44
 8000800:	08006c4c 	.word	0x08006c4c
 8000804:	08006c54 	.word	0x08006c54
 8000808:	200000e0 	.word	0x200000e0
 800080c:	08006c78 	.word	0x08006c78

08000810 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
 800081a:	460b      	mov	r3, r1
 800081c:	80bb      	strh	r3, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000822:	4b9f      	ldr	r3, [pc, #636]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000824:	889b      	ldrh	r3, [r3, #4]
 8000826:	88fa      	ldrh	r2, [r7, #6]
 8000828:	429a      	cmp	r2, r3
 800082a:	d804      	bhi.n	8000836 <Paint_SetPixel+0x26>
 800082c:	4b9c      	ldr	r3, [pc, #624]	; (8000aa0 <Paint_SetPixel+0x290>)
 800082e:	88db      	ldrh	r3, [r3, #6]
 8000830:	88ba      	ldrh	r2, [r7, #4]
 8000832:	429a      	cmp	r2, r3
 8000834:	d903      	bls.n	800083e <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8000836:	489b      	ldr	r0, [pc, #620]	; (8000aa4 <Paint_SetPixel+0x294>)
 8000838:	f005 fb14 	bl	8005e64 <puts>
        return;
 800083c:	e12d      	b.n	8000a9a <Paint_SetPixel+0x28a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800083e:	4b98      	ldr	r3, [pc, #608]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000840:	89db      	ldrh	r3, [r3, #14]
 8000842:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000846:	d02b      	beq.n	80008a0 <Paint_SetPixel+0x90>
 8000848:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800084c:	f300 8122 	bgt.w	8000a94 <Paint_SetPixel+0x284>
 8000850:	2bb4      	cmp	r3, #180	; 0xb4
 8000852:	d016      	beq.n	8000882 <Paint_SetPixel+0x72>
 8000854:	2bb4      	cmp	r3, #180	; 0xb4
 8000856:	f300 811d 	bgt.w	8000a94 <Paint_SetPixel+0x284>
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <Paint_SetPixel+0x54>
 800085e:	2b5a      	cmp	r3, #90	; 0x5a
 8000860:	d005      	beq.n	800086e <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8000862:	e117      	b.n	8000a94 <Paint_SetPixel+0x284>
        X = Xpoint;
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8000868:	88bb      	ldrh	r3, [r7, #4]
 800086a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800086c:	e022      	b.n	80008b4 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800086e:	4b8c      	ldr	r3, [pc, #560]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000870:	891a      	ldrh	r2, [r3, #8]
 8000872:	88bb      	ldrh	r3, [r7, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b29b      	uxth	r3, r3
 8000878:	3b01      	subs	r3, #1
 800087a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000880:	e018      	b.n	80008b4 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8000882:	4b87      	ldr	r3, [pc, #540]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000884:	891a      	ldrh	r2, [r3, #8]
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8000890:	4b83      	ldr	r3, [pc, #524]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000892:	895a      	ldrh	r2, [r3, #10]
 8000894:	88bb      	ldrh	r3, [r7, #4]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	3b01      	subs	r3, #1
 800089c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800089e:	e009      	b.n	80008b4 <Paint_SetPixel+0xa4>
        X = Ypoint;
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 80008a4:	4b7e      	ldr	r3, [pc, #504]	; (8000aa0 <Paint_SetPixel+0x290>)
 80008a6:	895a      	ldrh	r2, [r3, #10]
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	3b01      	subs	r3, #1
 80008b0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80008b2:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80008b4:	4b7a      	ldr	r3, [pc, #488]	; (8000aa0 <Paint_SetPixel+0x290>)
 80008b6:	8a1b      	ldrh	r3, [r3, #16]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	f200 80ed 	bhi.w	8000a98 <Paint_SetPixel+0x288>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <Paint_SetPixel+0xb4>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	08000913 	.word	0x08000913
 80008c8:	080008d5 	.word	0x080008d5
 80008cc:	080008e5 	.word	0x080008e5
 80008d0:	080008f5 	.word	0x080008f5
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80008d4:	4b72      	ldr	r3, [pc, #456]	; (8000aa0 <Paint_SetPixel+0x290>)
 80008d6:	891a      	ldrh	r2, [r3, #8]
 80008d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29b      	uxth	r3, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 80008e2:	e017      	b.n	8000914 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80008e4:	4b6e      	ldr	r3, [pc, #440]	; (8000aa0 <Paint_SetPixel+0x290>)
 80008e6:	895a      	ldrh	r2, [r3, #10]
 80008e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	3b01      	subs	r3, #1
 80008f0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80008f2:	e00f      	b.n	8000914 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80008f4:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <Paint_SetPixel+0x290>)
 80008f6:	891a      	ldrh	r2, [r3, #8]
 80008f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	3b01      	subs	r3, #1
 8000900:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8000902:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000904:	895a      	ldrh	r2, [r3, #10]
 8000906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	b29b      	uxth	r3, r3
 800090c:	3b01      	subs	r3, #1
 800090e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000910:	e000      	b.n	8000914 <Paint_SetPixel+0x104>
        break;
 8000912:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000914:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000916:	891b      	ldrh	r3, [r3, #8]
 8000918:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800091a:	429a      	cmp	r2, r3
 800091c:	d804      	bhi.n	8000928 <Paint_SetPixel+0x118>
 800091e:	4b60      	ldr	r3, [pc, #384]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000920:	895b      	ldrh	r3, [r3, #10]
 8000922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000924:	429a      	cmp	r2, r3
 8000926:	d903      	bls.n	8000930 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8000928:	485e      	ldr	r0, [pc, #376]	; (8000aa4 <Paint_SetPixel+0x294>)
 800092a:	f005 fa9b 	bl	8005e64 <puts>
        return;
 800092e:	e0b4      	b.n	8000a9a <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 8000930:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000932:	8adb      	ldrh	r3, [r3, #22]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d139      	bne.n	80009ac <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8000938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	b29b      	uxth	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000942:	4a57      	ldr	r2, [pc, #348]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000944:	8a52      	ldrh	r2, [r2, #18]
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	440b      	add	r3, r1
 800094c:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800094e:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d113      	bne.n	8000988 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	fa42 f303 	asr.w	r3, r2, r3
 800096c:	b25b      	sxtb	r3, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	b25a      	sxtb	r2, r3
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4013      	ands	r3, r2
 8000978:	b259      	sxtb	r1, r3
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <Paint_SetPixel+0x290>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	4413      	add	r3, r2
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	e088      	b.n	8000a9a <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	fa42 f303 	asr.w	r3, r2, r3
 8000994:	b25a      	sxtb	r2, r3
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4313      	orrs	r3, r2
 800099c:	b259      	sxtb	r1, r3
 800099e:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <Paint_SetPixel+0x290>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4413      	add	r3, r2
 80009a6:	b2ca      	uxtb	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e076      	b.n	8000a9a <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 80009ac:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <Paint_SetPixel+0x290>)
 80009ae:	8adb      	ldrh	r3, [r3, #22]
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d137      	bne.n	8000a24 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 80009b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009be:	4a38      	ldr	r2, [pc, #224]	; (8000aa0 <Paint_SetPixel+0x290>)
 80009c0:	8a52      	ldrh	r2, [r2, #18]
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	440b      	add	r3, r1
 80009c8:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <Paint_SetPixel+0x290>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 80009de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	22c0      	movs	r2, #192	; 0xc0
 80009e8:	fa42 f303 	asr.w	r3, r2, r3
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	b25a      	sxtb	r2, r3
 80009f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009f6:	4013      	ands	r3, r2
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	019a      	lsls	r2, r3, #6
 8000a00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa42 f303 	asr.w	r3, r2, r3
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b259      	sxtb	r1, r3
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	b2ca      	uxtb	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e03a      	b.n	8000a9a <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000a26:	8adb      	ldrh	r3, [r3, #22]
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d136      	bne.n	8000a9a <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8000a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a2e:	085b      	lsrs	r3, r3, #1
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000a38:	8a52      	ldrh	r2, [r2, #18]
 8000a3a:	fb02 f303 	mul.w	r3, r2, r3
 8000a3e:	440b      	add	r3, r1
 8000a40:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8000a4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	22f0      	movs	r2, #240	; 0xf0
 8000a58:	fa42 f303 	asr.w	r3, r2, r3
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	b25a      	sxtb	r2, r3
 8000a62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a66:	4013      	ands	r3, r2
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	011a      	lsls	r2, r3, #4
 8000a70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	fa42 f303 	asr.w	r3, r2, r3
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b259      	sxtb	r1, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <Paint_SetPixel+0x290>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e002      	b.n	8000a9a <Paint_SetPixel+0x28a>
        return;
 8000a94:	bf00      	nop
 8000a96:	e000      	b.n	8000a9a <Paint_SetPixel+0x28a>
        return;
 8000a98:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000e0 	.word	0x200000e0
 8000aa4:	08006cdc 	.word	0x08006cdc

08000aa8 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 8000ab2:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <Paint_Clear+0xd4>)
 8000ab4:	8adb      	ldrh	r3, [r3, #22]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d003      	beq.n	8000ac2 <Paint_Clear+0x1a>
 8000aba:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <Paint_Clear+0xd4>)
 8000abc:	8adb      	ldrh	r3, [r3, #22]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d125      	bne.n	8000b0e <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	82fb      	strh	r3, [r7, #22]
 8000ac6:	e01c      	b.n	8000b02 <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000ac8:	2300      	movs	r3, #0
 8000aca:	82bb      	strh	r3, [r7, #20]
 8000acc:	e011      	b.n	8000af2 <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000ace:	8aba      	ldrh	r2, [r7, #20]
 8000ad0:	8afb      	ldrh	r3, [r7, #22]
 8000ad2:	492a      	ldr	r1, [pc, #168]	; (8000b7c <Paint_Clear+0xd4>)
 8000ad4:	8a49      	ldrh	r1, [r1, #18]
 8000ad6:	fb01 f303 	mul.w	r3, r1, r3
 8000ada:	4413      	add	r3, r2
 8000adc:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <Paint_Clear+0xd4>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000aec:	8abb      	ldrh	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	82bb      	strh	r3, [r7, #20]
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <Paint_Clear+0xd4>)
 8000af4:	8a5b      	ldrh	r3, [r3, #18]
 8000af6:	8aba      	ldrh	r2, [r7, #20]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d3e8      	bcc.n	8000ace <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000afc:	8afb      	ldrh	r3, [r7, #22]
 8000afe:	3301      	adds	r3, #1
 8000b00:	82fb      	strh	r3, [r7, #22]
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <Paint_Clear+0xd4>)
 8000b04:	8a9b      	ldrh	r3, [r3, #20]
 8000b06:	8afa      	ldrh	r2, [r7, #22]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d3dd      	bcc.n	8000ac8 <Paint_Clear+0x20>
 8000b0c:	e02f      	b.n	8000b6e <Paint_Clear+0xc6>
			}
		}		
	}else if(Paint.Scale == 7){
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <Paint_Clear+0xd4>)
 8000b10:	8adb      	ldrh	r3, [r3, #22]
 8000b12:	2b07      	cmp	r3, #7
 8000b14:	d12b      	bne.n	8000b6e <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	827b      	strh	r3, [r7, #18]
 8000b1a:	e022      	b.n	8000b62 <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	823b      	strh	r3, [r7, #16]
 8000b20:	e017      	b.n	8000b52 <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000b22:	8a3a      	ldrh	r2, [r7, #16]
 8000b24:	8a7b      	ldrh	r3, [r7, #18]
 8000b26:	4915      	ldr	r1, [pc, #84]	; (8000b7c <Paint_Clear+0xd4>)
 8000b28:	8a49      	ldrh	r1, [r1, #18]
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b259      	sxtb	r1, r3
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <Paint_Clear+0xd4>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2ca      	uxtb	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000b4c:	8a3b      	ldrh	r3, [r7, #16]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	823b      	strh	r3, [r7, #16]
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <Paint_Clear+0xd4>)
 8000b54:	8a5b      	ldrh	r3, [r3, #18]
 8000b56:	8a3a      	ldrh	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d3e2      	bcc.n	8000b22 <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000b5c:	8a7b      	ldrh	r3, [r7, #18]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	827b      	strh	r3, [r7, #18]
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <Paint_Clear+0xd4>)
 8000b64:	8a9b      	ldrh	r3, [r3, #20]
 8000b66:	8a7a      	ldrh	r2, [r7, #18]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3d7      	bcc.n	8000b1c <Paint_Clear+0x74>
			}
		}		
	}
}
 8000b6c:	e7ff      	b.n	8000b6e <Paint_Clear+0xc6>
 8000b6e:	bf00      	nop
 8000b70:	371c      	adds	r7, #28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200000e0 	.word	0x200000e0

08000b80 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4604      	mov	r4, r0
 8000b88:	4608      	mov	r0, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4623      	mov	r3, r4
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	4603      	mov	r3, r0
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	807b      	strh	r3, [r7, #2]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	81bb      	strh	r3, [r7, #12]
 8000ba2:	e012      	b.n	8000bca <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	81fb      	strh	r3, [r7, #14]
 8000ba8:	e008      	b.n	8000bbc <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 8000baa:	8c3a      	ldrh	r2, [r7, #32]
 8000bac:	89b9      	ldrh	r1, [r7, #12]
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe2d 	bl	8000810 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	81fb      	strh	r3, [r7, #14]
 8000bbc:	89fa      	ldrh	r2, [r7, #14]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d3f2      	bcc.n	8000baa <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8000bc4:	89bb      	ldrh	r3, [r7, #12]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	81bb      	strh	r3, [r7, #12]
 8000bca:	89ba      	ldrh	r2, [r7, #12]
 8000bcc:	883b      	ldrh	r3, [r7, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d3e8      	bcc.n	8000ba4 <Paint_ClearWindows+0x24>
        }
    }
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd90      	pop	{r4, r7, pc}

08000bdc <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4604      	mov	r4, r0
 8000be4:	4608      	mov	r0, r1
 8000be6:	4611      	mov	r1, r2
 8000be8:	461a      	mov	r2, r3
 8000bea:	4623      	mov	r3, r4
 8000bec:	80fb      	strh	r3, [r7, #6]
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80bb      	strh	r3, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <Paint_DrawPoint+0x148>)
 8000bfc:	889b      	ldrh	r3, [r3, #4]
 8000bfe:	88fa      	ldrh	r2, [r7, #6]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d804      	bhi.n	8000c0e <Paint_DrawPoint+0x32>
 8000c04:	4b47      	ldr	r3, [pc, #284]	; (8000d24 <Paint_DrawPoint+0x148>)
 8000c06:	88db      	ldrh	r3, [r3, #6]
 8000c08:	88ba      	ldrh	r2, [r7, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d911      	bls.n	8000c32 <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8000c0e:	4846      	ldr	r0, [pc, #280]	; (8000d28 <Paint_DrawPoint+0x14c>)
 8000c10:	f005 f928 	bl	8005e64 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	4a43      	ldr	r2, [pc, #268]	; (8000d24 <Paint_DrawPoint+0x148>)
 8000c18:	8892      	ldrh	r2, [r2, #4]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4843      	ldr	r0, [pc, #268]	; (8000d2c <Paint_DrawPoint+0x150>)
 8000c1e:	f005 f89b 	bl	8005d58 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <Paint_DrawPoint+0x148>)
 8000c26:	88d2      	ldrh	r2, [r2, #6]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4841      	ldr	r0, [pc, #260]	; (8000d30 <Paint_DrawPoint+0x154>)
 8000c2c:	f005 f894 	bl	8005d58 <iprintf>
        return;
 8000c30:	e074      	b.n	8000d1c <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8000c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d144      	bne.n	8000cc4 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	81fb      	strh	r3, [r7, #14]
 8000c3e:	e039      	b.n	8000cb4 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	81bb      	strh	r3, [r7, #12]
 8000c44:	e029      	b.n	8000c9a <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8000c46:	88fa      	ldrh	r2, [r7, #6]
 8000c48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c4c:	441a      	add	r2, r3
 8000c4e:	787b      	ldrb	r3, [r7, #1]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db28      	blt.n	8000ca8 <Paint_DrawPoint+0xcc>
 8000c56:	88ba      	ldrh	r2, [r7, #4]
 8000c58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c5c:	441a      	add	r2, r3
 8000c5e:	787b      	ldrb	r3, [r7, #1]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db20      	blt.n	8000ca8 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8000c66:	89fa      	ldrh	r2, [r7, #14]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	787b      	ldrb	r3, [r7, #1]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	b298      	uxth	r0, r3
 8000c76:	89ba      	ldrh	r2, [r7, #12]
 8000c78:	88bb      	ldrh	r3, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	787b      	ldrb	r3, [r7, #1]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f7ff fdc1 	bl	8000810 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000c8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	3301      	adds	r3, #1
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	81bb      	strh	r3, [r7, #12]
 8000c9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c9e:	787b      	ldrb	r3, [r7, #1]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbce      	blt.n	8000c46 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8000ca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	3301      	adds	r3, #1
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	81fb      	strh	r3, [r7, #14]
 8000cb4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dbbe      	blt.n	8000c40 <Paint_DrawPoint+0x64>
 8000cc2:	e02b      	b.n	8000d1c <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	81fb      	strh	r3, [r7, #14]
 8000cc8:	e023      	b.n	8000d12 <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	81bb      	strh	r3, [r7, #12]
 8000cce:	e015      	b.n	8000cfc <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8000cd0:	89fa      	ldrh	r2, [r7, #14]
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	b298      	uxth	r0, r3
 8000cdc:	89ba      	ldrh	r2, [r7, #12]
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	887a      	ldrh	r2, [r7, #2]
 8000cea:	4619      	mov	r1, r3
 8000cec:	f7ff fd90 	bl	8000810 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000cf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	81bb      	strh	r3, [r7, #12]
 8000cfc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d00:	787b      	ldrb	r3, [r7, #1]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbe4      	blt.n	8000cd0 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	81fb      	strh	r3, [r7, #14]
 8000d12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d16:	787b      	ldrb	r3, [r7, #1]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbd6      	blt.n	8000cca <Paint_DrawPoint+0xee>
            }
        }
    }
}
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000e0 	.word	0x200000e0
 8000d28:	08006d04 	.word	0x08006d04
 8000d2c:	08006d44 	.word	0x08006d44
 8000d30:	08006d68 	.word	0x08006d68

08000d34 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	81fb      	strh	r3, [r7, #14]
 8000d40:	460b      	mov	r3, r1
 8000d42:	81bb      	strh	r3, [r7, #12]
 8000d44:	4613      	mov	r3, r2
 8000d46:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000d48:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <Paint_DrawChar+0x148>)
 8000d4a:	889b      	ldrh	r3, [r3, #4]
 8000d4c:	89fa      	ldrh	r2, [r7, #14]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d804      	bhi.n	8000d5c <Paint_DrawChar+0x28>
 8000d52:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <Paint_DrawChar+0x148>)
 8000d54:	88db      	ldrh	r3, [r3, #6]
 8000d56:	89ba      	ldrh	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d903      	bls.n	8000d64 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8000d5c:	4848      	ldr	r0, [pc, #288]	; (8000e80 <Paint_DrawChar+0x14c>)
 8000d5e:	f005 f881 	bl	8005e64 <puts>
        return;
 8000d62:	e087      	b.n	8000e74 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000d64:	7afb      	ldrb	r3, [r7, #11]
 8000d66:	3b20      	subs	r3, #32
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	88d2      	ldrh	r2, [r2, #6]
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	8892      	ldrh	r2, [r2, #4]
 8000d74:	08d2      	lsrs	r2, r2, #3
 8000d76:	b292      	uxth	r2, r2
 8000d78:	4611      	mov	r1, r2
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	8892      	ldrh	r2, [r2, #4]
 8000d7e:	f002 0207 	and.w	r2, r2, #7
 8000d82:	b292      	uxth	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	bf14      	ite	ne
 8000d88:	2201      	movne	r2, #1
 8000d8a:	2200      	moveq	r2, #0
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440a      	add	r2, r1
 8000d90:	fb02 f303 	mul.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	83fb      	strh	r3, [r7, #30]
 8000da4:	e061      	b.n	8000e6a <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	83bb      	strh	r3, [r7, #28]
 8000daa:	e04c      	b.n	8000e46 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000dac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dae:	2bff      	cmp	r3, #255	; 0xff
 8000db0:	d118      	bne.n	8000de4 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4619      	mov	r1, r3
 8000db8:	8bbb      	ldrh	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	fa42 f303 	asr.w	r3, r2, r3
 8000dc4:	400b      	ands	r3, r1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d031      	beq.n	8000e2e <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000dca:	89fa      	ldrh	r2, [r7, #14]
 8000dcc:	8bbb      	ldrh	r3, [r7, #28]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b298      	uxth	r0, r3
 8000dd2:	89ba      	ldrh	r2, [r7, #12]
 8000dd4:	8bfb      	ldrh	r3, [r7, #30]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fd17 	bl	8000810 <Paint_SetPixel>
 8000de2:	e024      	b.n	8000e2e <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	8bbb      	ldrh	r3, [r7, #28]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	fa42 f303 	asr.w	r3, r2, r3
 8000df6:	400b      	ands	r3, r1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00c      	beq.n	8000e16 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000dfc:	89fa      	ldrh	r2, [r7, #14]
 8000dfe:	8bbb      	ldrh	r3, [r7, #28]
 8000e00:	4413      	add	r3, r2
 8000e02:	b298      	uxth	r0, r3
 8000e04:	89ba      	ldrh	r2, [r7, #12]
 8000e06:	8bfb      	ldrh	r3, [r7, #30]
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff fcfe 	bl	8000810 <Paint_SetPixel>
 8000e14:	e00b      	b.n	8000e2e <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000e16:	89fa      	ldrh	r2, [r7, #14]
 8000e18:	8bbb      	ldrh	r3, [r7, #28]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b298      	uxth	r0, r3
 8000e1e:	89ba      	ldrh	r2, [r7, #12]
 8000e20:	8bfb      	ldrh	r3, [r7, #30]
 8000e22:	4413      	add	r3, r2
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff fcf1 	bl	8000810 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000e2e:	8bbb      	ldrh	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	d102      	bne.n	8000e40 <Paint_DrawChar+0x10c>
                ptr++;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000e40:	8bbb      	ldrh	r3, [r7, #28]
 8000e42:	3301      	adds	r3, #1
 8000e44:	83bb      	strh	r3, [r7, #28]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	889b      	ldrh	r3, [r3, #4]
 8000e4a:	8bba      	ldrh	r2, [r7, #28]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d3ad      	bcc.n	8000dac <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	889b      	ldrh	r3, [r3, #4]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <Paint_DrawChar+0x130>
            ptr++;
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000e64:	8bfb      	ldrh	r3, [r7, #30]
 8000e66:	3301      	adds	r3, #1
 8000e68:	83fb      	strh	r3, [r7, #30]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	88db      	ldrh	r3, [r3, #6]
 8000e6e:	8bfa      	ldrh	r2, [r7, #30]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d398      	bcc.n	8000da6 <Paint_DrawChar+0x72>
    }// Write all
}
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000e0 	.word	0x200000e0
 8000e80:	08006e40 	.word	0x08006e40

08000e84 <Paint_DrawTime>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	60ba      	str	r2, [r7, #8]
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4603      	mov	r3, r0
 8000e90:	81fb      	strh	r3, [r7, #14]
 8000e92:	460b      	mov	r3, r1
 8000e94:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8000e96:	4a79      	ldr	r2, [pc, #484]	; (800107c <Paint_DrawTime+0x1f8>)
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e9e:	c303      	stmia	r3!, {r0, r1}
 8000ea0:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	889b      	ldrh	r3, [r3, #4]
 8000ea6:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	791b      	ldrb	r3, [r3, #4]
 8000eac:	4a74      	ldr	r2, [pc, #464]	; (8001080 <Paint_DrawTime+0x1fc>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f107 0220 	add.w	r2, r7, #32
 8000eba:	4413      	add	r3, r2
 8000ebc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000ec0:	89b9      	ldrh	r1, [r7, #12]
 8000ec2:	89f8      	ldrh	r0, [r7, #14]
 8000ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f7ff ff31 	bl	8000d34 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 8000ed2:	89fa      	ldrh	r2, [r7, #14]
 8000ed4:	8bfb      	ldrh	r3, [r7, #30]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b298      	uxth	r0, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	791a      	ldrb	r2, [r3, #4]
 8000ede:	4b68      	ldr	r3, [pc, #416]	; (8001080 <Paint_DrawTime+0x1fc>)
 8000ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ee4:	08d9      	lsrs	r1, r3, #3
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f107 0220 	add.w	r2, r7, #32
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000efc:	89b9      	ldrh	r1, [r7, #12]
 8000efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f7ff ff14 	bl	8000d34 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8000f0c:	89fa      	ldrh	r2, [r7, #14]
 8000f0e:	8bfb      	ldrh	r3, [r7, #30]
 8000f10:	4413      	add	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	8bfb      	ldrh	r3, [r7, #30]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	8bfb      	ldrh	r3, [r7, #30]
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	4413      	add	r3, r2
 8000f26:	b298      	uxth	r0, r3
 8000f28:	89b9      	ldrh	r1, [r7, #12]
 8000f2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	223a      	movs	r2, #58	; 0x3a
 8000f36:	f7ff fefd 	bl	8000d34 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 8000f3a:	8bfb      	ldrh	r3, [r7, #30]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	4413      	add	r3, r2
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	8bfb      	ldrh	r3, [r7, #30]
 8000f48:	085b      	lsrs	r3, r3, #1
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b298      	uxth	r0, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	795b      	ldrb	r3, [r3, #5]
 8000f54:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <Paint_DrawTime+0x1fc>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	f107 0220 	add.w	r2, r7, #32
 8000f62:	4413      	add	r3, r2
 8000f64:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000f68:	89b9      	ldrh	r1, [r7, #12]
 8000f6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f7ff fede 	bl	8000d34 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 8000f78:	8bfb      	ldrh	r3, [r7, #30]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	0052      	lsls	r2, r2, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	4413      	add	r3, r2
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	085b      	lsrs	r3, r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4413      	add	r3, r2
 8000f90:	b298      	uxth	r0, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	795a      	ldrb	r2, [r3, #5]
 8000f96:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <Paint_DrawTime+0x1fc>)
 8000f98:	fba3 1302 	umull	r1, r3, r3, r2
 8000f9c:	08d9      	lsrs	r1, r3, #3
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f107 0220 	add.w	r2, r7, #32
 8000fae:	4413      	add	r3, r2
 8000fb0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000fb4:	89b9      	ldrh	r1, [r7, #12]
 8000fb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f7ff feb8 	bl	8000d34 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8000fc4:	8bfb      	ldrh	r3, [r7, #30]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	8bfb      	ldrh	r3, [r7, #30]
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	8bfb      	ldrh	r3, [r7, #30]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b298      	uxth	r0, r3
 8000fe4:	89b9      	ldrh	r1, [r7, #12]
 8000fe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	223a      	movs	r2, #58	; 0x3a
 8000ff2:	f7ff fe9f 	bl	8000d34 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 8000ff6:	8bfb      	ldrh	r3, [r7, #30]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	4413      	add	r3, r2
 8001004:	b298      	uxth	r0, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	799b      	ldrb	r3, [r3, #6]
 800100a:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <Paint_DrawTime+0x1fc>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f107 0220 	add.w	r2, r7, #32
 8001018:	4413      	add	r3, r2
 800101a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800101e:	89b9      	ldrh	r1, [r7, #12]
 8001020:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f7ff fe83 	bl	8000d34 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 800102e:	8bfb      	ldrh	r3, [r7, #30]
 8001030:	461a      	mov	r2, r3
 8001032:	0052      	lsls	r2, r2, #1
 8001034:	4413      	add	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b29a      	uxth	r2, r3
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	4413      	add	r3, r2
 800103e:	b298      	uxth	r0, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	799a      	ldrb	r2, [r3, #6]
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <Paint_DrawTime+0x1fc>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	08d9      	lsrs	r1, r3, #3
 800104c:	460b      	mov	r3, r1
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f107 0220 	add.w	r2, r7, #32
 800105c:	4413      	add	r3, r2
 800105e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001062:	89b9      	ldrh	r1, [r7, #12]
 8001064:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f7ff fe61 	bl	8000d34 <Paint_DrawChar>
}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	08006f00 	.word	0x08006f00
 8001080:	cccccccd 	.word	0xcccccccd

08001084 <DEV_SPI_WriteByte>:
#include <eInk_config/DEV_Config.h>
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi2;
void DEV_SPI_WriteByte(UBYTE value)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 800108e:	1df9      	adds	r1, r7, #7
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	2201      	movs	r2, #1
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <DEV_SPI_WriteByte+0x20>)
 8001098:	f003 fd43 	bl	8004b22 <HAL_SPI_Transmit>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200000f8 	.word	0x200000f8

080010a8 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2101      	movs	r1, #1
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <DEV_Module_Init+0x28>)
 80010b2:	f001 fbef 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2102      	movs	r1, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <DEV_Module_Init+0x28>)
 80010bc:	f001 fbea 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2101      	movs	r1, #1
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <DEV_Module_Init+0x2c>)
 80010c6:	f001 fbe5 	bl	8002894 <HAL_GPIO_WritePin>
		return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000400 	.word	0x48000400

080010d8 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2101      	movs	r1, #1
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <DEV_Module_Exit+0x28>)
 80010e2:	f001 fbd7 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2102      	movs	r1, #2
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <DEV_Module_Exit+0x28>)
 80010ec:	f001 fbd2 	bl	8002894 <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2101      	movs	r1, #1
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <DEV_Module_Exit+0x2c>)
 80010f6:	f001 fbcd 	bl	8002894 <HAL_GPIO_WritePin>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	48000800 	.word	0x48000800
 8001104:	48000400 	.word	0x48000400

08001108 <EPD_2IN13_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN13_V2_Reset(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	2101      	movs	r1, #1
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <EPD_2IN13_V2_Reset+0x38>)
 8001112:	f001 fbbf 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8001116:	20c8      	movs	r0, #200	; 0xc8
 8001118:	f001 f884 	bl	8002224 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <EPD_2IN13_V2_Reset+0x38>)
 8001122:	f001 fbb7 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8001126:	2002      	movs	r0, #2
 8001128:	f001 f87c 	bl	8002224 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800112c:	2201      	movs	r2, #1
 800112e:	2101      	movs	r1, #1
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <EPD_2IN13_V2_Reset+0x38>)
 8001132:	f001 fbaf 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8001136:	20c8      	movs	r0, #200	; 0xc8
 8001138:	f001 f874 	bl	8002224 <HAL_Delay>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	48000400 	.word	0x48000400

08001144 <EPD_2IN13_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN13_V2_SendCommand(UBYTE Reg)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2101      	movs	r1, #1
 8001152:	480a      	ldr	r0, [pc, #40]	; (800117c <EPD_2IN13_V2_SendCommand+0x38>)
 8001154:	f001 fb9e 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2102      	movs	r1, #2
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <EPD_2IN13_V2_SendCommand+0x38>)
 800115e:	f001 fb99 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff8d 	bl	8001084 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800116a:	2201      	movs	r2, #1
 800116c:	2102      	movs	r1, #2
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <EPD_2IN13_V2_SendCommand+0x38>)
 8001170:	f001 fb90 	bl	8002894 <HAL_GPIO_WritePin>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	48000800 	.word	0x48000800

08001180 <EPD_2IN13_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN13_V2_SendData(UBYTE Data)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800118a:	2201      	movs	r2, #1
 800118c:	2101      	movs	r1, #1
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <EPD_2IN13_V2_SendData+0x38>)
 8001190:	f001 fb80 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2102      	movs	r1, #2
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <EPD_2IN13_V2_SendData+0x38>)
 800119a:	f001 fb7b 	bl	8002894 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff6f 	bl	8001084 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2102      	movs	r1, #2
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <EPD_2IN13_V2_SendData+0x38>)
 80011ac:	f001 fb72 	bl	8002894 <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	48000800 	.word	0x48000800

080011bc <EPD_2IN13_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN13_V2_ReadBusy(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <EPD_2IN13_V2_ReadBusy+0x2c>)
 80011c2:	f004 fe4f 	bl	8005e64 <puts>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 80011c6:	e002      	b.n	80011ce <EPD_2IN13_V2_ReadBusy+0x12>
        DEV_Delay_ms(100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	f001 f82b 	bl	8002224 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 80011ce:	2110      	movs	r1, #16
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f001 fb46 	bl	8002864 <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d0f4      	beq.n	80011c8 <EPD_2IN13_V2_ReadBusy+0xc>
    }
    Debug("e-Paper busy release\r\n");
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <EPD_2IN13_V2_ReadBusy+0x30>)
 80011e0:	f004 fe40 	bl	8005e64 <puts>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08006f0c 	.word	0x08006f0c
 80011ec:	08006f24 	.word	0x08006f24

080011f0 <EPD_2IN13_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN13_V2_TurnOnDisplay(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    EPD_2IN13_V2_SendCommand(0x22);
 80011f4:	2022      	movs	r0, #34	; 0x22
 80011f6:	f7ff ffa5 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0xC7);
 80011fa:	20c7      	movs	r0, #199	; 0xc7
 80011fc:	f7ff ffc0 	bl	8001180 <EPD_2IN13_V2_SendData>
    EPD_2IN13_V2_SendCommand(0x20);
 8001200:	2020      	movs	r0, #32
 8001202:	f7ff ff9f 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_ReadBusy();
 8001206:	f7ff ffd9 	bl	80011bc <EPD_2IN13_V2_ReadBusy>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}

0800120e <EPD_2IN13_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN13_V2_TurnOnDisplayPart(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
    EPD_2IN13_V2_SendCommand(0x22);
 8001212:	2022      	movs	r0, #34	; 0x22
 8001214:	f7ff ff96 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0x0C);
 8001218:	200c      	movs	r0, #12
 800121a:	f7ff ffb1 	bl	8001180 <EPD_2IN13_V2_SendData>
    EPD_2IN13_V2_SendCommand(0x20);
 800121e:	2020      	movs	r0, #32
 8001220:	f7ff ff90 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_ReadBusy();
 8001224:	f7ff ffca 	bl	80011bc <EPD_2IN13_V2_ReadBusy>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <EPD_2IN13_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN13_V2_Init(UBYTE Mode)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
    UBYTE count;
    EPD_2IN13_V2_Reset();
 8001236:	f7ff ff67 	bl	8001108 <EPD_2IN13_V2_Reset>

    if(Mode == EPD_2IN13_V2_FULL) {
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8091 	bne.w	8001364 <EPD_2IN13_V2_Init+0x138>
        EPD_2IN13_V2_ReadBusy();
 8001242:	f7ff ffbb 	bl	80011bc <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x12); // soft reset
 8001246:	2012      	movs	r0, #18
 8001248:	f7ff ff7c 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_ReadBusy();
 800124c:	f7ff ffb6 	bl	80011bc <EPD_2IN13_V2_ReadBusy>

        EPD_2IN13_V2_SendCommand(0x74); //set analog block control
 8001250:	2074      	movs	r0, #116	; 0x74
 8001252:	f7ff ff77 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x54);
 8001256:	2054      	movs	r0, #84	; 0x54
 8001258:	f7ff ff92 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x7E); //set digital block control
 800125c:	207e      	movs	r0, #126	; 0x7e
 800125e:	f7ff ff71 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x3B);
 8001262:	203b      	movs	r0, #59	; 0x3b
 8001264:	f7ff ff8c 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x01); //Driver output control
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff ff6b 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);
 800126e:	20f9      	movs	r0, #249	; 0xf9
 8001270:	f7ff ff86 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff ff83 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff ff80 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x11); //data entry mode
 8001280:	2011      	movs	r0, #17
 8001282:	f7ff ff5f 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x01);
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff ff7a 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x44); //set Ram-X address start/end position
 800128c:	2044      	movs	r0, #68	; 0x44
 800128e:	f7ff ff59 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff ff74 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x0F);    //0x0C-->(15+1)*8=128
 8001298:	200f      	movs	r0, #15
 800129a:	f7ff ff71 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x45); //set Ram-Y address start/end position
 800129e:	2045      	movs	r0, #69	; 0x45
 80012a0:	f7ff ff50 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);   //0xF9-->(249+1)=250
 80012a4:	20f9      	movs	r0, #249	; 0xf9
 80012a6:	f7ff ff6b 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff ff68 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff ff65 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff ff62 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
 80012bc:	203c      	movs	r0, #60	; 0x3c
 80012be:	f7ff ff41 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x03);
 80012c2:	2003      	movs	r0, #3
 80012c4:	f7ff ff5c 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x2C); //VCOM Voltage
 80012c8:	202c      	movs	r0, #44	; 0x2c
 80012ca:	f7ff ff3b 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x55); //
 80012ce:	2055      	movs	r0, #85	; 0x55
 80012d0:	f7ff ff56 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x03);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f7ff ff35 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[70]);
 80012da:	2315      	movs	r3, #21
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff4f 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x04); //
 80012e2:	2004      	movs	r0, #4
 80012e4:	f7ff ff2e 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[71]);
 80012e8:	2341      	movs	r3, #65	; 0x41
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff48 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[72]);
 80012f0:	23a8      	movs	r3, #168	; 0xa8
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff44 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[73]);
 80012f8:	2332      	movs	r3, #50	; 0x32
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff40 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x3A);     //Dummy Line
 8001300:	203a      	movs	r0, #58	; 0x3a
 8001302:	f7ff ff1f 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[74]);
 8001306:	2330      	movs	r3, #48	; 0x30
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff39 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x3B);     //Gate time
 800130e:	203b      	movs	r0, #59	; 0x3b
 8001310:	f7ff ff18 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[75]);
 8001314:	230a      	movs	r3, #10
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff32 	bl	8001180 <EPD_2IN13_V2_SendData>

        EPD_2IN13_V2_SendCommand(0x32);
 800131c:	2032      	movs	r0, #50	; 0x32
 800131e:	f7ff ff11 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        for(count = 0; count < 70; count++) {
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e008      	b.n	800133a <EPD_2IN13_V2_Init+0x10e>
            EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_full_update[count]);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	4a35      	ldr	r2, [pc, #212]	; (8001400 <EPD_2IN13_V2_Init+0x1d4>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff26 	bl	8001180 <EPD_2IN13_V2_SendData>
        for(count = 0; count < 70; count++) {
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3301      	adds	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b45      	cmp	r3, #69	; 0x45
 800133e:	d9f3      	bls.n	8001328 <EPD_2IN13_V2_Init+0xfc>
        }

        EPD_2IN13_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 8001340:	204e      	movs	r0, #78	; 0x4e
 8001342:	f7ff feff 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff ff1a 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x4F);   // set RAM y address count to 0X127;
 800134c:	204f      	movs	r0, #79	; 0x4f
 800134e:	f7ff fef9 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xF9);
 8001352:	20f9      	movs	r0, #249	; 0xf9
 8001354:	f7ff ff14 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff ff11 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_ReadBusy();
 800135e:	f7ff ff2d 	bl	80011bc <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
        EPD_2IN13_V2_SendData(0x01);
    } else {
        Debug("error, the Mode is EPD_2IN13_FULL or EPD_2IN13_PART");
    }
}
 8001362:	e049      	b.n	80013f8 <EPD_2IN13_V2_Init+0x1cc>
    } else if(Mode == EPD_2IN13_V2_PART) {
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d143      	bne.n	80013f2 <EPD_2IN13_V2_Init+0x1c6>
        EPD_2IN13_V2_SendCommand(0x2C);     //VCOM Voltage
 800136a:	202c      	movs	r0, #44	; 0x2c
 800136c:	f7ff feea 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x26);
 8001370:	2026      	movs	r0, #38	; 0x26
 8001372:	f7ff ff05 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_ReadBusy();
 8001376:	f7ff ff21 	bl	80011bc <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x32);
 800137a:	2032      	movs	r0, #50	; 0x32
 800137c:	f7ff fee2 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        for(count = 0; count < 70; count++) {
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e008      	b.n	8001398 <EPD_2IN13_V2_Init+0x16c>
            EPD_2IN13_V2_SendData(EPD_2IN13_V2_lut_partial_update[count]);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <EPD_2IN13_V2_Init+0x1d8>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fef7 	bl	8001180 <EPD_2IN13_V2_SendData>
        for(count = 0; count < 70; count++) {
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	3301      	adds	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b45      	cmp	r3, #69	; 0x45
 800139c:	d9f3      	bls.n	8001386 <EPD_2IN13_V2_Init+0x15a>
        EPD_2IN13_V2_SendCommand(0x37);
 800139e:	2037      	movs	r0, #55	; 0x37
 80013a0:	f7ff fed0 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff feeb 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fee8 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fee5 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff fee2 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x40);
 80013bc:	2040      	movs	r0, #64	; 0x40
 80013be:	f7ff fedf 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fedc 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendData(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fed9 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x22);
 80013ce:	2022      	movs	r0, #34	; 0x22
 80013d0:	f7ff feb8 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0xC0);
 80013d4:	20c0      	movs	r0, #192	; 0xc0
 80013d6:	f7ff fed3 	bl	8001180 <EPD_2IN13_V2_SendData>
        EPD_2IN13_V2_SendCommand(0x20);
 80013da:	2020      	movs	r0, #32
 80013dc:	f7ff feb2 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_ReadBusy();
 80013e0:	f7ff feec 	bl	80011bc <EPD_2IN13_V2_ReadBusy>
        EPD_2IN13_V2_SendCommand(0x3C); //BorderWavefrom
 80013e4:	203c      	movs	r0, #60	; 0x3c
 80013e6:	f7ff fead 	bl	8001144 <EPD_2IN13_V2_SendCommand>
        EPD_2IN13_V2_SendData(0x01);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff fec8 	bl	8001180 <EPD_2IN13_V2_SendData>
}
 80013f0:	e002      	b.n	80013f8 <EPD_2IN13_V2_Init+0x1cc>
        Debug("error, the Mode is EPD_2IN13_FULL or EPD_2IN13_PART");
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <EPD_2IN13_V2_Init+0x1dc>)
 80013f4:	f004 fcb0 	bl	8005d58 <iprintf>
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	08008b08 	.word	0x08008b08
 8001404:	08008b54 	.word	0x08008b54
 8001408:	08006f44 	.word	0x08006f44

0800140c <EPD_2IN13_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN13_V2_Clear(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 8001412:	2310      	movs	r3, #16
 8001414:	807b      	strh	r3, [r7, #2]
    Height = EPD_2IN13_V2_HEIGHT;
 8001416:	23fa      	movs	r3, #250	; 0xfa
 8001418:	803b      	strh	r3, [r7, #0]

    EPD_2IN13_V2_SendCommand(0x24);
 800141a:	2024      	movs	r0, #36	; 0x24
 800141c:	f7ff fe92 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001420:	2300      	movs	r3, #0
 8001422:	80fb      	strh	r3, [r7, #6]
 8001424:	e00f      	b.n	8001446 <EPD_2IN13_V2_Clear+0x3a>
        for (UWORD i = 0; i < Width; i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	80bb      	strh	r3, [r7, #4]
 800142a:	e005      	b.n	8001438 <EPD_2IN13_V2_Clear+0x2c>
            EPD_2IN13_V2_SendData(0XFF);
 800142c:	20ff      	movs	r0, #255	; 0xff
 800142e:	f7ff fea7 	bl	8001180 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001432:	88bb      	ldrh	r3, [r7, #4]
 8001434:	3301      	adds	r3, #1
 8001436:	80bb      	strh	r3, [r7, #4]
 8001438:	88ba      	ldrh	r2, [r7, #4]
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3f5      	bcc.n	800142c <EPD_2IN13_V2_Clear+0x20>
    for (UWORD j = 0; j < Height; j++) {
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	3301      	adds	r3, #1
 8001444:	80fb      	strh	r3, [r7, #6]
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	883b      	ldrh	r3, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3eb      	bcc.n	8001426 <EPD_2IN13_V2_Clear+0x1a>
        }
    }

    EPD_2IN13_V2_TurnOnDisplay();
 800144e:	f7ff fecf 	bl	80011f0 <EPD_2IN13_V2_TurnOnDisplay>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <EPD_2IN13_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_2IN13_V2_DisplayPartBaseImage(UBYTE *Image)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 8001462:	2310      	movs	r3, #16
 8001464:	81fb      	strh	r3, [r7, #14]
    Height = EPD_2IN13_V2_HEIGHT;
 8001466:	23fa      	movs	r3, #250	; 0xfa
 8001468:	81bb      	strh	r3, [r7, #12]

    UDOUBLE Addr = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
    EPD_2IN13_V2_SendCommand(0x24);
 800146e:	2024      	movs	r0, #36	; 0x24
 8001470:	f7ff fe68 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001474:	2300      	movs	r3, #0
 8001476:	82fb      	strh	r3, [r7, #22]
 8001478:	e01a      	b.n	80014b0 <EPD_2IN13_V2_DisplayPartBaseImage+0x56>
        for (UWORD i = 0; i < Width; i++) {
 800147a:	2300      	movs	r3, #0
 800147c:	82bb      	strh	r3, [r7, #20]
 800147e:	e010      	b.n	80014a2 <EPD_2IN13_V2_DisplayPartBaseImage+0x48>
            Addr = i + j * Width;
 8001480:	8aba      	ldrh	r2, [r7, #20]
 8001482:	8afb      	ldrh	r3, [r7, #22]
 8001484:	89f9      	ldrh	r1, [r7, #14]
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	60bb      	str	r3, [r7, #8]
            EPD_2IN13_V2_SendData(Image[Addr]);
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fe72 	bl	8001180 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	82bb      	strh	r3, [r7, #20]
 80014a2:	8aba      	ldrh	r2, [r7, #20]
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3ea      	bcc.n	8001480 <EPD_2IN13_V2_DisplayPartBaseImage+0x26>
    for (UWORD j = 0; j < Height; j++) {
 80014aa:	8afb      	ldrh	r3, [r7, #22]
 80014ac:	3301      	adds	r3, #1
 80014ae:	82fb      	strh	r3, [r7, #22]
 80014b0:	8afa      	ldrh	r2, [r7, #22]
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d3e0      	bcc.n	800147a <EPD_2IN13_V2_DisplayPartBaseImage+0x20>
        }
    }
    EPD_2IN13_V2_SendCommand(0x26);
 80014b8:	2026      	movs	r0, #38	; 0x26
 80014ba:	f7ff fe43 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	827b      	strh	r3, [r7, #18]
 80014c2:	e01a      	b.n	80014fa <EPD_2IN13_V2_DisplayPartBaseImage+0xa0>
        for (UWORD i = 0; i < Width; i++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	823b      	strh	r3, [r7, #16]
 80014c8:	e010      	b.n	80014ec <EPD_2IN13_V2_DisplayPartBaseImage+0x92>
            Addr = i + j * Width;
 80014ca:	8a3a      	ldrh	r2, [r7, #16]
 80014cc:	8a7b      	ldrh	r3, [r7, #18]
 80014ce:	89f9      	ldrh	r1, [r7, #14]
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
            EPD_2IN13_V2_SendData(Image[Addr]);
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe4d 	bl	8001180 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80014e6:	8a3b      	ldrh	r3, [r7, #16]
 80014e8:	3301      	adds	r3, #1
 80014ea:	823b      	strh	r3, [r7, #16]
 80014ec:	8a3a      	ldrh	r2, [r7, #16]
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3ea      	bcc.n	80014ca <EPD_2IN13_V2_DisplayPartBaseImage+0x70>
    for (UWORD j = 0; j < Height; j++) {
 80014f4:	8a7b      	ldrh	r3, [r7, #18]
 80014f6:	3301      	adds	r3, #1
 80014f8:	827b      	strh	r3, [r7, #18]
 80014fa:	8a7a      	ldrh	r2, [r7, #18]
 80014fc:	89bb      	ldrh	r3, [r7, #12]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3e0      	bcc.n	80014c4 <EPD_2IN13_V2_DisplayPartBaseImage+0x6a>
        }
    }
    EPD_2IN13_V2_TurnOnDisplay();
 8001502:	f7ff fe75 	bl	80011f0 <EPD_2IN13_V2_TurnOnDisplay>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <EPD_2IN13_V2_DisplayPart>:


void EPD_2IN13_V2_DisplayPart(UBYTE *Image)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1);
 8001516:	2310      	movs	r3, #16
 8001518:	817b      	strh	r3, [r7, #10]
    Height = EPD_2IN13_V2_HEIGHT;
 800151a:	23fa      	movs	r3, #250	; 0xfa
 800151c:	813b      	strh	r3, [r7, #8]
    EPD_2IN13_V2_SendCommand(0x24);
 800151e:	2024      	movs	r0, #36	; 0x24
 8001520:	f7ff fe10 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001524:	2300      	movs	r3, #0
 8001526:	81fb      	strh	r3, [r7, #14]
 8001528:	e019      	b.n	800155e <EPD_2IN13_V2_DisplayPart+0x50>
        for (UWORD i = 0; i < Width; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	81bb      	strh	r3, [r7, #12]
 800152e:	e00f      	b.n	8001550 <EPD_2IN13_V2_DisplayPart+0x42>
            EPD_2IN13_V2_SendData(Image[i + j * Width]);
 8001530:	89ba      	ldrh	r2, [r7, #12]
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	8979      	ldrh	r1, [r7, #10]
 8001536:	fb01 f303 	mul.w	r3, r1, r3
 800153a:	4413      	add	r3, r2
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe1b 	bl	8001180 <EPD_2IN13_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800154a:	89bb      	ldrh	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	81bb      	strh	r3, [r7, #12]
 8001550:	89ba      	ldrh	r2, [r7, #12]
 8001552:	897b      	ldrh	r3, [r7, #10]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3eb      	bcc.n	8001530 <EPD_2IN13_V2_DisplayPart+0x22>
    for (UWORD j = 0; j < Height; j++) {
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	3301      	adds	r3, #1
 800155c:	81fb      	strh	r3, [r7, #14]
 800155e:	89fa      	ldrh	r2, [r7, #14]
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	d3e1      	bcc.n	800152a <EPD_2IN13_V2_DisplayPart+0x1c>
        }
    }

    EPD_2IN13_V2_TurnOnDisplayPart();
 8001566:	f7ff fe52 	bl	800120e <EPD_2IN13_V2_TurnOnDisplayPart>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <EPD_2IN13_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN13_V2_Sleep(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
    EPD_2IN13_V2_SendCommand(0x22); //POWER OFF
 8001576:	2022      	movs	r0, #34	; 0x22
 8001578:	f7ff fde4 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0xC3);
 800157c:	20c3      	movs	r0, #195	; 0xc3
 800157e:	f7ff fdff 	bl	8001180 <EPD_2IN13_V2_SendData>
    EPD_2IN13_V2_SendCommand(0x20);
 8001582:	2020      	movs	r0, #32
 8001584:	f7ff fdde 	bl	8001144 <EPD_2IN13_V2_SendCommand>

    EPD_2IN13_V2_SendCommand(0x10); //enter deep sleep
 8001588:	2010      	movs	r0, #16
 800158a:	f7ff fddb 	bl	8001144 <EPD_2IN13_V2_SendCommand>
    EPD_2IN13_V2_SendData(0x01);
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff fdf6 	bl	8001180 <EPD_2IN13_V2_SendData>
    DEV_Delay_ms(100);
 8001594:	2064      	movs	r0, #100	; 0x64
 8001596:	f000 fe45 	bl	8002224 <HAL_Delay>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <EPD_2in13_V2_test>:
#include "stm32l4xx_hal_rtc.h"

extern RTC_HandleTypeDef hrtc;

int EPD_2in13_V2_test(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b09c      	sub	sp, #112	; 0x70
 80015a4:	af02      	add	r7, sp, #8
    printf("EPD_2IN13_V2_test Demo\r\n");
 80015a6:	48a6      	ldr	r0, [pc, #664]	; (8001840 <EPD_2in13_V2_test+0x2a0>)
 80015a8:	f004 fc5c 	bl	8005e64 <puts>
    DEV_Module_Init();
 80015ac:	f7ff fd7c 	bl	80010a8 <DEV_Module_Init>

    printf("e-Paper Init and Clear...\r\n");
 80015b0:	48a4      	ldr	r0, [pc, #656]	; (8001844 <EPD_2in13_V2_test+0x2a4>)
 80015b2:	f004 fc57 	bl	8005e64 <puts>
    EPD_2IN13_V2_Init(EPD_2IN13_V2_FULL);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f7ff fe38 	bl	800122c <EPD_2IN13_V2_Init>
    EPD_2IN13_V2_Clear();
 80015bc:	f7ff ff26 	bl	800140c <EPD_2IN13_V2_Clear>
    DEV_Delay_ms(500);
 80015c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c4:	f000 fe2e 	bl	8002224 <HAL_Delay>

    //Create a new image cache
    UBYTE *BlackImage;
    /* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
    UWORD Imagesize = ((EPD_2IN13_V2_WIDTH % 8 == 0)? (EPD_2IN13_V2_WIDTH / 8 ): (EPD_2IN13_V2_WIDTH / 8 + 1)) * EPD_2IN13_V2_HEIGHT;
 80015c8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80015cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 80015d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 fafd 	bl	8005bd4 <malloc>
 80015da:	4603      	mov	r3, r0
 80015dc:	663b      	str	r3, [r7, #96]	; 0x60
 80015de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <EPD_2in13_V2_test+0x50>
        printf("Failed to apply for black memory...\r\n");
 80015e4:	4898      	ldr	r0, [pc, #608]	; (8001848 <EPD_2in13_V2_test+0x2a8>)
 80015e6:	f004 fc3d 	bl	8005e64 <puts>
        return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e122      	b.n	8001836 <EPD_2in13_V2_test+0x296>
    }
    printf("Paint_NewImage\r\n");
 80015f0:	4896      	ldr	r0, [pc, #600]	; (800184c <EPD_2in13_V2_test+0x2ac>)
 80015f2:	f004 fc37 	bl	8005e64 <puts>
    Paint_NewImage(BlackImage, EPD_2IN13_V2_WIDTH, EPD_2IN13_V2_HEIGHT, 270, WHITE);
 80015f6:	23ff      	movs	r3, #255	; 0xff
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80015fe:	22fa      	movs	r2, #250	; 0xfa
 8001600:	217a      	movs	r1, #122	; 0x7a
 8001602:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001604:	f7ff f860 	bl	80006c8 <Paint_NewImage>
    Paint_SelectImage(BlackImage);
 8001608:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800160a:	f7ff f8b3 	bl	8000774 <Paint_SelectImage>
    //Paint_SetMirroring(MIRROR_HORIZONTAL); //
    Paint_SetMirroring(MIRROR_VERTICAL); //
 800160e:	2002      	movs	r0, #2
 8001610:	f7ff f8c0 	bl	8000794 <Paint_SetMirroring>
    Paint_Clear(WHITE);
 8001614:	20ff      	movs	r0, #255	; 0xff
 8001616:	f7ff fa47 	bl	8000aa8 <Paint_Clear>
    EPD_2IN13_V2_Display(BlackImage);
    DEV_Delay_ms(2000);
#endif

#if 1   //Partial refresh, example shows time
    printf("Partial refresh\r\n");
 800161a:	488d      	ldr	r0, [pc, #564]	; (8001850 <EPD_2in13_V2_test+0x2b0>)
 800161c:	f004 fc22 	bl	8005e64 <puts>
    EPD_2IN13_V2_Init(EPD_2IN13_V2_FULL);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fe03 	bl	800122c <EPD_2IN13_V2_Init>
    EPD_2IN13_V2_DisplayPartBaseImage(BlackImage);
 8001626:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001628:	f7ff ff17 	bl	800145a <EPD_2IN13_V2_DisplayPartBaseImage>

    EPD_2IN13_V2_Init(EPD_2IN13_V2_PART);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fdfd 	bl	800122c <EPD_2IN13_V2_Init>
    Paint_SelectImage(BlackImage);
 8001632:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001634:	f7ff f89e 	bl	8000774 <Paint_SelectImage>
    PAINT_TIME sPaint_time;
    sPaint_time.Hour = 12;
 8001638:	230c      	movs	r3, #12
 800163a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    sPaint_time.Min = 34;
 800163e:	2322      	movs	r3, #34	; 0x22
 8001640:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    sPaint_time.Sec = 56;
 8001644:	2338      	movs	r3, #56	; 0x38
 8001646:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    PAINT_TIME alarmtime;

    RTC_TimeTypeDef sTime;
    RTC_AlarmTypeDef sAlarm;

    uint16_t num = 65530;
 800164a:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800164e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    for (;;) {

    	sPaint_time.Sec = sPaint_time.Sec + 1;
 8001652:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001656:	3301      	adds	r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        if (sPaint_time.Sec == 60) {
 800165e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001662:	2b3c      	cmp	r3, #60	; 0x3c
 8001664:	d122      	bne.n	80016ac <EPD_2in13_V2_test+0x10c>
            sPaint_time.Min = sPaint_time.Min + 1;
 8001666:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800166a:	3301      	adds	r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            sPaint_time.Sec = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            if (sPaint_time.Min == 60) {
 8001678:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800167c:	2b3c      	cmp	r3, #60	; 0x3c
 800167e:	d115      	bne.n	80016ac <EPD_2in13_V2_test+0x10c>
                sPaint_time.Hour =  sPaint_time.Hour + 1;
 8001680:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001684:	3301      	adds	r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                sPaint_time.Min = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
                if (sPaint_time.Hour == 24) {
 8001692:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001696:	2b18      	cmp	r3, #24
 8001698:	d108      	bne.n	80016ac <EPD_2in13_V2_test+0x10c>
                    sPaint_time.Hour = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                    sPaint_time.Min = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
                    sPaint_time.Sec = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
                }
            }
        }
        Paint_ClearWindows(20, 80, 20 + Font24.Width * 7, 80 + Font24.Height, WHITE);
 80016ac:	4b69      	ldr	r3, [pc, #420]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 80016ae:	889b      	ldrh	r3, [r3, #4]
 80016b0:	461a      	mov	r2, r3
 80016b2:	00d2      	lsls	r2, r2, #3
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3314      	adds	r3, #20
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b65      	ldr	r3, [pc, #404]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 80016be:	88db      	ldrh	r3, [r3, #6]
 80016c0:	3350      	adds	r3, #80	; 0x50
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	21ff      	movs	r1, #255	; 0xff
 80016c6:	9100      	str	r1, [sp, #0]
 80016c8:	2150      	movs	r1, #80	; 0x50
 80016ca:	2014      	movs	r0, #20
 80016cc:	f7ff fa58 	bl	8000b80 <Paint_ClearWindows>
        Paint_DrawTime(20, 80, &sPaint_time, &Font24, WHITE, BLACK);
 80016d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80016d4:	2300      	movs	r3, #0
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	23ff      	movs	r3, #255	; 0xff
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 80016de:	2150      	movs	r1, #80	; 0x50
 80016e0:	2014      	movs	r0, #20
 80016e2:	f7ff fbcf 	bl	8000e84 <Paint_DrawTime>

        RTC_DateTypeDef sDate;
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	485a      	ldr	r0, [pc, #360]	; (8001858 <EPD_2in13_V2_test+0x2b8>)
 80016ee:	f002 fe0a 	bl	8004306 <HAL_RTC_GetDate>
    	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016f6:	2200      	movs	r2, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	4857      	ldr	r0, [pc, #348]	; (8001858 <EPD_2in13_V2_test+0x2b8>)
 80016fc:	f002 fd20 	bl	8004140 <HAL_RTC_GetTime>

    	rtctime.Hour = sTime.Hours;
 8001700:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001704:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    	rtctime.Min = sTime.Minutes;
 8001708:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800170c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    	rtctime.Sec = sTime.Seconds;
 8001710:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001714:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        Paint_ClearWindows(20, 20, 20 + Font24.Width * 7, 20 + Font24.Height, WHITE);
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 800171a:	889b      	ldrh	r3, [r3, #4]
 800171c:	461a      	mov	r2, r3
 800171e:	00d2      	lsls	r2, r2, #3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	3314      	adds	r3, #20
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 800172a:	88db      	ldrh	r3, [r3, #6]
 800172c:	3314      	adds	r3, #20
 800172e:	b29b      	uxth	r3, r3
 8001730:	21ff      	movs	r1, #255	; 0xff
 8001732:	9100      	str	r1, [sp, #0]
 8001734:	2114      	movs	r1, #20
 8001736:	2014      	movs	r0, #20
 8001738:	f7ff fa22 	bl	8000b80 <Paint_ClearWindows>
        Paint_DrawTime(20, 20, &rtctime, &Font24, WHITE, BLACK);
 800173c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001740:	2300      	movs	r3, #0
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	23ff      	movs	r3, #255	; 0xff
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 800174a:	2114      	movs	r1, #20
 800174c:	2014      	movs	r0, #20
 800174e:	f7ff fb99 	bl	8000e84 <Paint_DrawTime>

        HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	2300      	movs	r3, #0
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	483e      	ldr	r0, [pc, #248]	; (8001858 <EPD_2in13_V2_test+0x2b8>)
 800175e:	f002 ff5b 	bl	8004618 <HAL_RTC_GetAlarm>
        alarmtime.Hour = sAlarm.AlarmTime.Hours;
 8001762:	7a3b      	ldrb	r3, [r7, #8]
 8001764:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        alarmtime.Min = sAlarm.AlarmTime.Minutes;
 8001768:	7a7b      	ldrb	r3, [r7, #9]
 800176a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        alarmtime.Sec = sAlarm.AlarmTime.Seconds;
 800176e:	7abb      	ldrb	r3, [r7, #10]
 8001770:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        Paint_ClearWindows(20, 50, 20 + Font24.Width * 7, 50 + Font24.Height, WHITE);
 8001774:	4b37      	ldr	r3, [pc, #220]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 8001776:	889b      	ldrh	r3, [r3, #4]
 8001778:	461a      	mov	r2, r3
 800177a:	00d2      	lsls	r2, r2, #3
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	b29b      	uxth	r3, r3
 8001780:	3314      	adds	r3, #20
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 8001786:	88db      	ldrh	r3, [r3, #6]
 8001788:	3332      	adds	r3, #50	; 0x32
 800178a:	b29b      	uxth	r3, r3
 800178c:	21ff      	movs	r1, #255	; 0xff
 800178e:	9100      	str	r1, [sp, #0]
 8001790:	2132      	movs	r1, #50	; 0x32
 8001792:	2014      	movs	r0, #20
 8001794:	f7ff f9f4 	bl	8000b80 <Paint_ClearWindows>
        Paint_DrawTime(20, 50, &alarmtime, &Font24, WHITE, BLACK);
 8001798:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800179c:	2300      	movs	r3, #0
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	23ff      	movs	r3, #255	; 0xff
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <EPD_2in13_V2_test+0x2b4>)
 80017a6:	2132      	movs	r1, #50	; 0x32
 80017a8:	2014      	movs	r0, #20
 80017aa:	f7ff fb6b 	bl	8000e84 <Paint_DrawTime>

        Paint_DrawPoint(num%250, 120, BLACK, DOT_PIXEL_1X1, DOT_FILL_AROUND);
 80017ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017b2:	4a2a      	ldr	r2, [pc, #168]	; (800185c <EPD_2in13_V2_test+0x2bc>)
 80017b4:	fba2 1203 	umull	r1, r2, r2, r3
 80017b8:	0912      	lsrs	r2, r2, #4
 80017ba:	21fa      	movs	r1, #250	; 0xfa
 80017bc:	fb01 f202 	mul.w	r2, r1, r2
 80017c0:	1a9b      	subs	r3, r3, r2
 80017c2:	b298      	uxth	r0, r3
 80017c4:	2301      	movs	r3, #1
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	2200      	movs	r2, #0
 80017cc:	2178      	movs	r1, #120	; 0x78
 80017ce:	f7ff fa05 	bl	8000bdc <Paint_DrawPoint>

        num = num - 1;
 80017d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        if(num == 0) {
 80017dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d120      	bne.n	8001826 <EPD_2in13_V2_test+0x286>
        EPD_2IN13_V2_DisplayPart(BlackImage);
        DEV_Delay_ms(1000);//Analog clock 1s
    }

#endif
    printf("Clear...\r\n");
 80017e4:	481e      	ldr	r0, [pc, #120]	; (8001860 <EPD_2in13_V2_test+0x2c0>)
 80017e6:	f004 fb3d 	bl	8005e64 <puts>

    EPD_2IN13_V2_Init(EPD_2IN13_V2_FULL);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fd1e 	bl	800122c <EPD_2IN13_V2_Init>
    EPD_2IN13_V2_Clear();
 80017f0:	f7ff fe0c 	bl	800140c <EPD_2IN13_V2_Clear>
    DEV_Delay_ms(2000);//Analog clock 1s
 80017f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017f8:	f000 fd14 	bl	8002224 <HAL_Delay>

    printf("Goto Sleep...\r\n");
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <EPD_2in13_V2_test+0x2c4>)
 80017fe:	f004 fb31 	bl	8005e64 <puts>
    EPD_2IN13_V2_Sleep();
 8001802:	f7ff feb6 	bl	8001572 <EPD_2IN13_V2_Sleep>
    free(BlackImage);
 8001806:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001808:	f004 f9ec 	bl	8005be4 <free>
    BlackImage = NULL;
 800180c:	2300      	movs	r3, #0
 800180e:	663b      	str	r3, [r7, #96]	; 0x60
    DEV_Delay_ms(1000);//Analog clock 1s
 8001810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001814:	f000 fd06 	bl	8002224 <HAL_Delay>

    // close 5V
    printf("close 5V, Module enters 0 power consumption ...\r\n");
 8001818:	4813      	ldr	r0, [pc, #76]	; (8001868 <EPD_2in13_V2_test+0x2c8>)
 800181a:	f004 fb23 	bl	8005e64 <puts>
    DEV_Module_Exit();
 800181e:	f7ff fc5b 	bl	80010d8 <DEV_Module_Exit>
    
    return 0;
 8001822:	2300      	movs	r3, #0
 8001824:	e007      	b.n	8001836 <EPD_2in13_V2_test+0x296>
        EPD_2IN13_V2_DisplayPart(BlackImage);
 8001826:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001828:	f7ff fe71 	bl	800150e <EPD_2IN13_V2_DisplayPart>
        DEV_Delay_ms(1000);//Analog clock 1s
 800182c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001830:	f000 fcf8 	bl	8002224 <HAL_Delay>
    for (;;) {
 8001834:	e70d      	b.n	8001652 <EPD_2in13_V2_test+0xb2>
}
 8001836:	4618      	mov	r0, r3
 8001838:	3768      	adds	r7, #104	; 0x68
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	08006f80 	.word	0x08006f80
 8001844:	08006f98 	.word	0x08006f98
 8001848:	08006fb4 	.word	0x08006fb4
 800184c:	08006fdc 	.word	0x08006fdc
 8001850:	08006fec 	.word	0x08006fec
 8001854:	20000000 	.word	0x20000000
 8001858:	2000015c 	.word	0x2000015c
 800185c:	10624dd3 	.word	0x10624dd3
 8001860:	08007000 	.word	0x08007000
 8001864:	0800700c 	.word	0x0800700c
 8001868:	0800701c 	.word	0x0800701c

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001870:	f000 fc5c 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001874:	f000 f80d 	bl	8001892 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001878:	f000 f986 	bl	8001b88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800187c:	f000 f954 	bl	8001b28 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001880:	f000 f914 	bl	8001aac <MX_SPI2_Init>
  MX_RTC_Init();
 8001884:	f000 f882 	bl	800198c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  Time_Init();
 8001888:	f7fe fe6e 	bl	8000568 <Time_Init>
  EPD_2in13_V2_test();
 800188c:	f7ff fe88 	bl	80015a0 <EPD_2in13_V2_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001890:	e7fe      	b.n	8001890 <main+0x24>

08001892 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b0b8      	sub	sp, #224	; 0xe0
 8001896:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001898:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800189c:	2244      	movs	r2, #68	; 0x44
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 f9a7 	bl	8005bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	2288      	movs	r2, #136	; 0x88
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f004 f999 	bl	8005bf4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018c2:	230a      	movs	r3, #10
 80018c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d0:	2310      	movs	r3, #16
 80018d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018ee:	230a      	movs	r3, #10
 80018f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018f4:	2307      	movs	r3, #7
 80018f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001906:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800190a:	4618      	mov	r0, r3
 800190c:	f001 f858 	bl	80029c0 <HAL_RCC_OscConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001916:	f000 f9d3 	bl	8001cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191a:	230f      	movs	r3, #15
 800191c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001920:	2303      	movs	r3, #3
 8001922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001938:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800193c:	2104      	movs	r1, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fc24 	bl	800318c <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800194a:	f000 f9b9 	bl	8001cc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 800194e:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8001952:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001954:	2300      	movs	r3, #0
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4618      	mov	r0, r3
 8001964:	f001 fe18 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800196e:	f000 f9a7 	bl	8001cc0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001972:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001976:	f000 ffcd 	bl	8002914 <HAL_PWREx_ControlVoltageScaling>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001980:	f000 f99e 	bl	8001cc0 <Error_Handler>
  }
}
 8001984:	bf00      	nop
 8001986:	37e0      	adds	r7, #224	; 0xe0
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b092      	sub	sp, #72	; 0x48
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001992:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	222c      	movs	r2, #44	; 0x2c
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 f921 	bl	8005bf4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <MX_RTC_Init+0x11c>)
 80019b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019c0:	227f      	movs	r2, #127	; 0x7f
 80019c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019c4:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019c6:	22ff      	movs	r2, #255	; 0xff
 80019c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019ca:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019e2:	4830      	ldr	r0, [pc, #192]	; (8001aa4 <MX_RTC_Init+0x118>)
 80019e4:	f002 fa94 	bl	8003f10 <HAL_RTC_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80019ee:	f000 f967 	bl	8001cc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a10:	2200      	movs	r2, #0
 8001a12:	4619      	mov	r1, r3
 8001a14:	4823      	ldr	r0, [pc, #140]	; (8001aa4 <MX_RTC_Init+0x118>)
 8001a16:	f002 faf6 	bl	8004006 <HAL_RTC_SetTime>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001a20:	f000 f94e 	bl	8001cc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001a24:	2306      	movs	r3, #6
 8001a26:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_APRIL;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 3;
 8001a30:	2303      	movs	r3, #3
 8001a32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 21;
 8001a36:	2315      	movs	r3, #21
 8001a38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001a3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a40:	2200      	movs	r2, #0
 8001a42:	4619      	mov	r1, r3
 8001a44:	4817      	ldr	r0, [pc, #92]	; (8001aa4 <MX_RTC_Init+0x118>)
 8001a46:	f002 fbd7 	bl	80041f8 <HAL_RTC_SetDate>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001a50:	f000 f936 	bl	8001cc0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 7;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_RTC_Init+0x118>)
 8001a8c:	f002 fc88 	bl	80043a0 <HAL_RTC_SetAlarm_IT>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001a96:	f000 f913 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3748      	adds	r7, #72	; 0x48
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000015c 	.word	0x2000015c
 8001aa8:	40002800 	.word	0x40002800

08001aac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <MX_SPI2_Init+0x78>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001abc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ac6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001aca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ade:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001afa:	2207      	movs	r2, #7
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001b06:	2208      	movs	r2, #8
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001b0c:	f002 ff66 	bl	80049dc <HAL_SPI_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b16:	f000 f8d3 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200000f8 	.word	0x200000f8
 8001b24:	40003800 	.word	0x40003800

08001b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <MX_USART2_UART_Init+0x5c>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b6c:	f003 fbc8 	bl	8005300 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b76:	f000 f8a3 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000180 	.word	0x20000180
 8001b84:	40004400 	.word	0x40004400

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a43      	ldr	r2, [pc, #268]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a3d      	ldr	r2, [pc, #244]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a31      	ldr	r2, [pc, #196]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <MX_GPIO_Init+0x128>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EINK_DC_Pin|EINK_CS_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2103      	movs	r1, #3
 8001c02:	482c      	ldr	r0, [pc, #176]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001c04:	f000 fe46 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c10:	f000 fe40 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EINK_RST_GPIO_Port, EINK_RST_Pin, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2101      	movs	r1, #1
 8001c18:	4827      	ldr	r0, [pc, #156]	; (8001cb8 <MX_GPIO_Init+0x130>)
 8001c1a:	f000 fe3b 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <MX_GPIO_Init+0x134>)
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001c34:	f000 fc6c 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : EINK_DC_Pin EINK_CS_Pin */
  GPIO_InitStruct.Pin = EINK_DC_Pin|EINK_CS_Pin;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4819      	ldr	r0, [pc, #100]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001c50:	f000 fc5e 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : EINK_BSY_Pin */
  GPIO_InitStruct.Pin = EINK_BSY_Pin;
 8001c54:	2310      	movs	r3, #16
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EINK_BSY_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f000 fc51 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c88:	f000 fc42 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : EINK_RST_Pin */
  GPIO_InitStruct.Pin = EINK_RST_Pin;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EINK_RST_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_GPIO_Init+0x130>)
 8001ca4:	f000 fc34 	bl	8002510 <HAL_GPIO_Init>

}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000800 	.word	0x48000800
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	10210000 	.word	0x10210000

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_MspInit+0x44>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_MspInit+0x44>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_MspInit+0x44>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_MspInit+0x44>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <HAL_MspInit+0x44>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_MspInit+0x44>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <HAL_RTC_MspInit+0x3c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10f      	bne.n	8001d46 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RTC_MspInit+0x40>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RTC_MspInit+0x40>)
 8001d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2029      	movs	r0, #41	; 0x29
 8001d3c:	f000 fb71 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d40:	2029      	movs	r0, #41	; 0x29
 8001d42:	f000 fb8a 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40002800 	.word	0x40002800
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_SPI_MspInit+0xc4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d14c      	bne.n	8001e14 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_SPI_MspInit+0xc8>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4811      	ldr	r0, [pc, #68]	; (8001e24 <HAL_SPI_MspInit+0xcc>)
 8001dde:	f000 fb97 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df4:	2305      	movs	r3, #5
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480a      	ldr	r0, [pc, #40]	; (8001e28 <HAL_SPI_MspInit+0xd0>)
 8001e00:	f000 fb86 	bl	8002510 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2024      	movs	r0, #36	; 0x24
 8001e0a:	f000 fb0a 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e0e:	2024      	movs	r0, #36	; 0x24
 8001e10:	f000 fb23 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40003800 	.word	0x40003800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000800 	.word	0x48000800
 8001e28:	48000400 	.word	0x48000400

08001e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_UART_MspInit+0x7c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d128      	bne.n	8001ea0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_UART_MspInit+0x80>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e7e:	230c      	movs	r3, #12
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e8e:	2307      	movs	r3, #7
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f000 fb38 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40004400 	.word	0x40004400
 8001eac:	40021000 	.word	0x40021000

08001eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <NMI_Handler+0x4>

08001eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efc:	f000 f972 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <SPI2_IRQHandler+0x10>)
 8001f0a:	f002 ff79 	bl	8004e00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200000f8 	.word	0x200000f8

08001f18 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <RTC_Alarm_IRQHandler+0x10>)
 8001f1e:	f002 fc3b 	bl	8004798 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000015c 	.word	0x2000015c

08001f2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e00a      	b.n	8001f54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f3e:	f3af 8000 	nop.w
 8001f42:	4601      	mov	r1, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	b2ca      	uxtb	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf0      	blt.n	8001f3e <_read+0x12>
	}

return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e009      	b.n	8001f8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	60ba      	str	r2, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf1      	blt.n	8001f78 <_write+0x12>
	}
	return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_close>:

int _close(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_isatty>:

int _isatty(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
	return 1;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f003 fda2 	bl	8005b80 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20018000 	.word	0x20018000
 8002068:	00000400 	.word	0x00000400
 800206c:	20000094 	.word	0x20000094
 8002070:	20000218 	.word	0x20000218

08002074 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <SystemInit+0x5c>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <SystemInit+0x5c>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <SystemInit+0x60>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <SystemInit+0x60>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <SystemInit+0x60>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <SystemInit+0x60>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <SystemInit+0x60>)
 80020a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <SystemInit+0x60>)
 80020ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <SystemInit+0x60>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <SystemInit+0x60>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <SystemInit+0x60>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00
 80020d4:	40021000 	.word	0x40021000

080020d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020dc:	f7ff ffca 	bl	8002074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020e2:	e003      	b.n	80020ec <LoopCopyDataInit>

080020e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ea:	3104      	adds	r1, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020ec:	480a      	ldr	r0, [pc, #40]	; (8002118 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <LoopForever+0xe>)
	adds	r2, r0, r1
 80020f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020f4:	d3f6      	bcc.n	80020e4 <CopyDataInit>
	ldr	r2, =_sbss
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020f8:	e002      	b.n	8002100 <LoopFillZerobss>

080020fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020fc:	f842 3b04 	str.w	r3, [r2], #4

08002100 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <LoopForever+0x16>)
	cmp	r2, r3
 8002102:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002104:	d3f9      	bcc.n	80020fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002106:	f003 fd41 	bl	8005b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800210a:	f7ff fbaf 	bl	800186c <main>

0800210e <LoopForever>:

LoopForever:
    b LoopForever
 800210e:	e7fe      	b.n	800210e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002110:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002114:	08008c90 	.word	0x08008c90
	ldr	r0, =_sdata
 8002118:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800211c:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8002120:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8002124:	20000218 	.word	0x20000218

08002128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC1_2_IRQHandler>
	...

0800212c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_Init+0x3c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <HAL_Init+0x3c>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002142:	2003      	movs	r0, #3
 8002144:	f000 f962 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002148:	2000      	movs	r0, #0
 800214a:	f000 f80f 	bl	800216c <HAL_InitTick>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	e001      	b.n	800215e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800215a:	f7ff fdb7 	bl	8001ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800215e:	79fb      	ldrb	r3, [r7, #7]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40022000 	.word	0x40022000

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_InitTick+0x6c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d023      	beq.n	80021c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002180:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_InitTick+0x70>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_InitTick+0x6c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f96d 	bl	8002476 <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d809      	bhi.n	80021bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f937 	bl	8002422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_InitTick+0x74>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e007      	b.n	80021cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e004      	b.n	80021cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e001      	b.n	80021cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000010 	.word	0x20000010
 80021dc:	20000008 	.word	0x20000008
 80021e0:	2000000c 	.word	0x2000000c

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000010 	.word	0x20000010
 8002208:	20000204 	.word	0x20000204

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000204 	.word	0x20000204

08002224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff ffee 	bl	800220c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d005      	beq.n	800224a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_Delay+0x44>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800224a:	bf00      	nop
 800224c:	f7ff ffde 	bl	800220c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d8f7      	bhi.n	800224c <HAL_Delay+0x28>
  {
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000010 	.word	0x20000010

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d005      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2204      	movs	r2, #4
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e029      	b.n	8002506 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 020e 	bic.w	r2, r2, #14
 80024c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 021c 	and.w	r2, r3, #28
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	2101      	movs	r1, #1
 80024e0:	fa01 f202 	lsl.w	r2, r1, r2
 80024e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
    }
  }
  return status;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251e:	e17f      	b.n	8002820 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2101      	movs	r1, #1
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8171 	beq.w	800281a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d00b      	beq.n	8002558 <HAL_GPIO_Init+0x48>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d007      	beq.n	8002558 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254c:	2b11      	cmp	r3, #17
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b12      	cmp	r3, #18
 8002556:	d130      	bne.n	80025ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800258e:	2201      	movs	r2, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 0201 	and.w	r2, r3, #1
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d118      	bne.n	80025f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x128>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b12      	cmp	r3, #18
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	6939      	ldr	r1, [r7, #16]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80ac 	beq.w	800281a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_GPIO_Init+0x330>)
 80026c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c6:	4a5e      	ldr	r2, [pc, #376]	; (8002840 <HAL_GPIO_Init+0x330>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6613      	str	r3, [r2, #96]	; 0x60
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_GPIO_Init+0x330>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026da:	4a5a      	ldr	r2, [pc, #360]	; (8002844 <HAL_GPIO_Init+0x334>)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002704:	d025      	beq.n	8002752 <HAL_GPIO_Init+0x242>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4f      	ldr	r2, [pc, #316]	; (8002848 <HAL_GPIO_Init+0x338>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01f      	beq.n	800274e <HAL_GPIO_Init+0x23e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4e      	ldr	r2, [pc, #312]	; (800284c <HAL_GPIO_Init+0x33c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d019      	beq.n	800274a <HAL_GPIO_Init+0x23a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4d      	ldr	r2, [pc, #308]	; (8002850 <HAL_GPIO_Init+0x340>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0x236>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4c      	ldr	r2, [pc, #304]	; (8002854 <HAL_GPIO_Init+0x344>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00d      	beq.n	8002742 <HAL_GPIO_Init+0x232>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4b      	ldr	r2, [pc, #300]	; (8002858 <HAL_GPIO_Init+0x348>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <HAL_GPIO_Init+0x22e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4a      	ldr	r2, [pc, #296]	; (800285c <HAL_GPIO_Init+0x34c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d101      	bne.n	800273a <HAL_GPIO_Init+0x22a>
 8002736:	2306      	movs	r3, #6
 8002738:	e00c      	b.n	8002754 <HAL_GPIO_Init+0x244>
 800273a:	2307      	movs	r3, #7
 800273c:	e00a      	b.n	8002754 <HAL_GPIO_Init+0x244>
 800273e:	2305      	movs	r3, #5
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x244>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x244>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x244>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x244>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x244>
 8002752:	2300      	movs	r3, #0
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002764:	4937      	ldr	r1, [pc, #220]	; (8002844 <HAL_GPIO_Init+0x334>)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_GPIO_Init+0x350>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <HAL_GPIO_Init+0x350>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_GPIO_Init+0x350>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_GPIO_Init+0x350>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_GPIO_Init+0x350>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_GPIO_Init+0x350>)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_GPIO_Init+0x350>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <HAL_GPIO_Init+0x350>)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	f47f ae78 	bne.w	8002520 <HAL_GPIO_Init+0x10>
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	40010000 	.word	0x40010000
 8002848:	48000400 	.word	0x48000400
 800284c:	48000800 	.word	0x48000800
 8002850:	48000c00 	.word	0x48000c00
 8002854:	48001000 	.word	0x48001000
 8002858:	48001400 	.word	0x48001400
 800285c:	48001800 	.word	0x48001800
 8002860:	40010400 	.word	0x40010400

08002864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e001      	b.n	8002886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43d9      	mvns	r1, r3
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	400b      	ands	r3, r1
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_PWREx_GetVoltageRange+0x18>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40007000 	.word	0x40007000

08002914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002922:	d130      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d038      	beq.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2232      	movs	r2, #50	; 0x32
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	3301      	adds	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002958:	e002      	b.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3b01      	subs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d102      	bne.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x60>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f2      	bne.n	800295a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d110      	bne.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e00f      	b.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d007      	beq.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40007000 	.word	0x40007000
 80029b8:	20000008 	.word	0x20000008
 80029bc:	431bde83 	.word	0x431bde83

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e3d4      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d2:	4ba1      	ldr	r3, [pc, #644]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029dc:	4b9e      	ldr	r3, [pc, #632]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80e4 	beq.w	8002bbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_RCC_OscConfig+0x4a>
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	f040 808b 	bne.w	8002b18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	f040 8087 	bne.w	8002b18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a0a:	4b93      	ldr	r3, [pc, #588]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_RCC_OscConfig+0x62>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e3ac      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1a      	ldr	r2, [r3, #32]
 8002a26:	4b8c      	ldr	r3, [pc, #560]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_RCC_OscConfig+0x7c>
 8002a32:	4b89      	ldr	r3, [pc, #548]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3a:	e005      	b.n	8002a48 <HAL_RCC_OscConfig+0x88>
 8002a3c:	4b86      	ldr	r3, [pc, #536]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d223      	bcs.n	8002a94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fd41 	bl	80034d8 <RCC_SetFlashLatencyFromMSIRange>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e38d      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a60:	4b7d      	ldr	r3, [pc, #500]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a7c      	ldr	r2, [pc, #496]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a66:	f043 0308 	orr.w	r3, r3, #8
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b7a      	ldr	r3, [pc, #488]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4977      	ldr	r1, [pc, #476]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7e:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4972      	ldr	r1, [pc, #456]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
 8002a92:	e025      	b.n	8002ae0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a94:	4b70      	ldr	r3, [pc, #448]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6f      	ldr	r2, [pc, #444]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	496a      	ldr	r1, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab2:	4b69      	ldr	r3, [pc, #420]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	4965      	ldr	r1, [pc, #404]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fd01 	bl	80034d8 <RCC_SetFlashLatencyFromMSIRange>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e34d      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ae0:	f000 fc36 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	495a      	ldr	r1, [pc, #360]	; (8002c5c <HAL_RCC_OscConfig+0x29c>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_RCC_OscConfig+0x2a0>)
 8002afe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b00:	4b58      	ldr	r3, [pc, #352]	; (8002c64 <HAL_RCC_OscConfig+0x2a4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fb31 	bl	800216c <HAL_InitTick>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d052      	beq.n	8002bba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	e331      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d032      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b20:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fb6e 	bl	800220c <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b34:	f7ff fb6a 	bl	800220c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e31a      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b46:	4b44      	ldr	r3, [pc, #272]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a40      	ldr	r2, [pc, #256]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	493b      	ldr	r1, [pc, #236]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	4936      	ldr	r1, [pc, #216]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
 8002b84:	e01a      	b.n	8002bbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b92:	f7ff fb3b 	bl	800220c <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b9a:	f7ff fb37 	bl	800220c <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e2e7      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bac:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x1da>
 8002bb8:	e000      	b.n	8002bbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d074      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d005      	beq.n	8002bda <HAL_RCC_OscConfig+0x21a>
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d064      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d160      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e2c4      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x24a>
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e01d      	b.n	8002c46 <HAL_RCC_OscConfig+0x286>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCC_OscConfig+0x26e>
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0x286>
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7ff fadd 	bl	800220c <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c54:	e011      	b.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08008ba0 	.word	0x08008ba0
 8002c60:	20000008 	.word	0x20000008
 8002c64:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff fad0 	bl	800220c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e280      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7a:	4baf      	ldr	r3, [pc, #700]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2a8>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7ff fac0 	bl	800220c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff fabc 	bl	800220c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e26c      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca2:	4ba5      	ldr	r3, [pc, #660]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2d0>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d060      	beq.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x310>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d116      	bne.n	8002cfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd0:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x328>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e249      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b93      	ldr	r3, [pc, #588]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	4990      	ldr	r1, [pc, #576]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cfc:	e040      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d023      	beq.n	8002d4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a8b      	ldr	r2, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7ff fa7b 	bl	800220c <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7ff fa77 	bl	800220c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e227      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	497c      	ldr	r1, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e018      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b7a      	ldr	r3, [pc, #488]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a79      	ldr	r2, [pc, #484]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7ff fa57 	bl	800220c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d62:	f7ff fa53 	bl	800220c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e203      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d74:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d03c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01c      	beq.n	8002dce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9a:	4a67      	ldr	r2, [pc, #412]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7ff fa32 	bl	800220c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7ff fa2e 	bl	800220c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1de      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbe:	4b5e      	ldr	r3, [pc, #376]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ef      	beq.n	8002dac <HAL_RCC_OscConfig+0x3ec>
 8002dcc:	e01b      	b.n	8002e06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b5a      	ldr	r3, [pc, #360]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd4:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7ff fa15 	bl	800220c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de6:	f7ff fa11 	bl	800220c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e1c1      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ef      	bne.n	8002de6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a6 	beq.w	8002f60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e18:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a43      	ldr	r2, [pc, #268]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCC_OscConfig+0x57c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d118      	bne.n	8002e7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x57c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3a      	ldr	r2, [pc, #232]	; (8002f3c <HAL_RCC_OscConfig+0x57c>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e58:	f7ff f9d8 	bl	800220c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e60:	f7ff f9d4 	bl	800220c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e184      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <HAL_RCC_OscConfig+0x57c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d108      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4d8>
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e96:	e024      	b.n	8002ee2 <HAL_RCC_OscConfig+0x522>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d110      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x502>
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec0:	e00f      	b.n	8002ee2 <HAL_RCC_OscConfig+0x522>
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7ff f98f 	bl	800220c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7ff f98b 	bl	800220c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e139      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ed      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x532>
 8002f16:	e01a      	b.n	8002f4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7ff f978 	bl	800220c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f1e:	e00f      	b.n	8002f40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7ff f974 	bl	800220c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d906      	bls.n	8002f40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e122      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f40:	4b90      	ldr	r3, [pc, #576]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e8      	bne.n	8002f20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4b8b      	ldr	r3, [pc, #556]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4a8a      	ldr	r2, [pc, #552]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8108 	beq.w	800317a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	f040 80d0 	bne.w	8003114 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f74:	4b83      	ldr	r3, [pc, #524]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0203 	and.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d130      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	3b01      	subs	r3, #1
 8002f94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d127      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d11f      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fb4:	2a07      	cmp	r2, #7
 8002fb6:	bf14      	ite	ne
 8002fb8:	2201      	movne	r2, #1
 8002fba:	2200      	moveq	r2, #0
 8002fbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d113      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d06e      	beq.n	80030c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d069      	beq.n	80030c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b7      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800300c:	4b5d      	ldr	r3, [pc, #372]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5c      	ldr	r2, [pc, #368]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003016:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003018:	f7ff f8f8 	bl	800220c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7ff f8f4 	bl	800220c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0a4      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003032:	4b54      	ldr	r3, [pc, #336]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303e:	4b51      	ldr	r3, [pc, #324]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	4b51      	ldr	r3, [pc, #324]	; (8003188 <HAL_RCC_OscConfig+0x7c8>)
 8003044:	4013      	ands	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800304e:	3a01      	subs	r2, #1
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003058:	0212      	lsls	r2, r2, #8
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003060:	0852      	lsrs	r2, r2, #1
 8003062:	3a01      	subs	r2, #1
 8003064:	0552      	lsls	r2, r2, #21
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800306c:	0852      	lsrs	r2, r2, #1
 800306e:	3a01      	subs	r2, #1
 8003070:	0652      	lsls	r2, r2, #25
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003078:	0912      	lsrs	r2, r2, #4
 800307a:	0452      	lsls	r2, r2, #17
 800307c:	430a      	orrs	r2, r1
 800307e:	4941      	ldr	r1, [pc, #260]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003084:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a3e      	ldr	r2, [pc, #248]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003090:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800309c:	f7ff f8b6 	bl	800220c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7ff f8b2 	bl	800220c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e062      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c2:	e05a      	b.n	800317a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e059      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c8:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d152      	bne.n	800317a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030ec:	f7ff f88e 	bl	800220c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7ff f88a 	bl	800220c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e03a      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x734>
 8003112:	e032      	b.n	800317a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d02d      	beq.n	8003176 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a19      	ldr	r2, [pc, #100]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003124:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003138:	f023 0303 	bic.w	r3, r3, #3
 800313c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 8003144:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7ff f85d 	bl	800220c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7ff f859 	bl	800220c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e009      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_OscConfig+0x7c4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x796>
 8003174:	e001      	b.n	800317a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	f99d808c 	.word	0xf99d808c

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0c8      	b.n	8003332 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b66      	ldr	r3, [pc, #408]	; (800333c <HAL_RCC_ClockConfig+0x1b0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d910      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b63      	ldr	r3, [pc, #396]	; (800333c <HAL_RCC_ClockConfig+0x1b0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0207 	bic.w	r2, r3, #7
 80031b6:	4961      	ldr	r1, [pc, #388]	; (800333c <HAL_RCC_ClockConfig+0x1b0>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b5f      	ldr	r3, [pc, #380]	; (800333c <HAL_RCC_ClockConfig+0x1b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b0      	b.n	8003332 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d04c      	beq.n	8003276 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e4:	4b56      	ldr	r3, [pc, #344]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d121      	bne.n	8003234 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e09e      	b.n	8003332 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d107      	bne.n	800320c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fc:	4b50      	ldr	r3, [pc, #320]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d115      	bne.n	8003234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e092      	b.n	8003332 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003214:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e086      	b.n	8003332 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003224:	4b46      	ldr	r3, [pc, #280]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e07e      	b.n	8003332 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003234:	4b42      	ldr	r3, [pc, #264]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 0203 	bic.w	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	493f      	ldr	r1, [pc, #252]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003246:	f7fe ffe1 	bl	800220c <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324c:	e00a      	b.n	8003264 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324e:	f7fe ffdd 	bl	800220c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e066      	b.n	8003332 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 020c 	and.w	r2, r3, #12
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	429a      	cmp	r2, r3
 8003274:	d1eb      	bne.n	800324e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	492c      	ldr	r1, [pc, #176]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCC_ClockConfig+0x1b0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d210      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <HAL_RCC_ClockConfig+0x1b0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 0207 	bic.w	r2, r3, #7
 80032aa:	4924      	ldr	r1, [pc, #144]	; (800333c <HAL_RCC_ClockConfig+0x1b0>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <HAL_RCC_ClockConfig+0x1b0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e036      	b.n	8003332 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4918      	ldr	r1, [pc, #96]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4910      	ldr	r1, [pc, #64]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003302:	f000 f825 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_RCC_ClockConfig+0x1b4>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490c      	ldr	r1, [pc, #48]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe ff20 	bl	800216c <HAL_InitTick>
 800332c:	4603      	mov	r3, r0
 800332e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003330:	7afb      	ldrb	r3, [r7, #11]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40022000 	.word	0x40022000
 8003340:	40021000 	.word	0x40021000
 8003344:	08008ba0 	.word	0x08008ba0
 8003348:	20000008 	.word	0x20000008
 800334c:	2000000c 	.word	0x2000000c

08003350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335e:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003368:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x34>
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d121      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d11e      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e005      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033ac:	4a2b      	ldr	r2, [pc, #172]	; (800345c <HAL_RCC_GetSysClockFreq+0x10c>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d102      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCC_GetSysClockFreq+0x110>)
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	e004      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_RCC_GetSysClockFreq+0x114>)
 80033d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d134      	bne.n	8003448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d003      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0xac>
 80033f4:	e005      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_GetSysClockFreq+0x110>)
 80033f8:	617b      	str	r3, [r7, #20]
      break;
 80033fa:	e005      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCC_GetSysClockFreq+0x114>)
 80033fe:	617b      	str	r3, [r7, #20]
      break;
 8003400:	e002      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	617b      	str	r3, [r7, #20]
      break;
 8003406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	3301      	adds	r3, #1
 8003414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	fb02 f203 	mul.w	r2, r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_RCC_GetSysClockFreq+0x108>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	0e5b      	lsrs	r3, r3, #25
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	3301      	adds	r3, #1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003448:	69bb      	ldr	r3, [r7, #24]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	08008bb8 	.word	0x08008bb8
 8003460:	00f42400 	.word	0x00f42400
 8003464:	007a1200 	.word	0x007a1200

08003468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000008 	.word	0x20000008

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4904      	ldr	r1, [pc, #16]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	08008bb0 	.word	0x08008bb0

080034ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034b0:	f7ff ffda 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0adb      	lsrs	r3, r3, #11
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4904      	ldr	r1, [pc, #16]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08008bb0 	.word	0x08008bb0

080034d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034e4:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034f0:	f7ff fa02 	bl	80028f8 <HAL_PWREx_GetVoltageRange>
 80034f4:	6178      	str	r0, [r7, #20]
 80034f6:	e014      	b.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	4a24      	ldr	r2, [pc, #144]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003502:	6593      	str	r3, [r2, #88]	; 0x58
 8003504:	4b22      	ldr	r3, [pc, #136]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003510:	f7ff f9f2 	bl	80028f8 <HAL_PWREx_GetVoltageRange>
 8003514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003528:	d10b      	bne.n	8003542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d919      	bls.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2ba0      	cmp	r3, #160	; 0xa0
 8003534:	d902      	bls.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003536:	2302      	movs	r3, #2
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e013      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800353c:	2301      	movs	r3, #1
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	e010      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d902      	bls.n	800354e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003548:	2303      	movs	r3, #3
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	e00a      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d102      	bne.n	800355a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003554:	2302      	movs	r3, #2
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	e004      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b70      	cmp	r3, #112	; 0x70
 800355e:	d101      	bne.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003560:	2301      	movs	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 0207 	bic.w	r2, r3, #7
 800356c:	4909      	ldr	r1, [pc, #36]	; (8003594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	40022000 	.word	0x40022000

08003598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a0:	2300      	movs	r3, #0
 80035a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a4:	2300      	movs	r3, #0
 80035a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d041      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035bc:	d02a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035c2:	d824      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035c8:	d008      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ce:	d81e      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d8:	d010      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035da:	e018      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035dc:	4b86      	ldr	r3, [pc, #536]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a85      	ldr	r2, [pc, #532]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e8:	e015      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fabb 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035fa:	e00c      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3320      	adds	r3, #32
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fba6 	bl	8003d54 <RCCEx_PLLSAI2_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	74fb      	strb	r3, [r7, #19]
      break;
 8003612:	e000      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800361c:	4b76      	ldr	r3, [pc, #472]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362a:	4973      	ldr	r1, [pc, #460]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003632:	e001      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d041      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800364c:	d02a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800364e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003652:	d824      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003658:	d008      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800365a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800365e:	d81e      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003668:	d010      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800366a:	e018      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800366c:	4b62      	ldr	r3, [pc, #392]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a61      	ldr	r2, [pc, #388]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003678:	e015      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa73 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800368a:	e00c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3320      	adds	r3, #32
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fb5e 	bl	8003d54 <RCCEx_PLLSAI2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	74fb      	strb	r3, [r7, #19]
      break;
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ac:	4b52      	ldr	r3, [pc, #328]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ba:	494f      	ldr	r1, [pc, #316]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036c2:	e001      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a0 	beq.w	8003816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	4a40      	ldr	r2, [pc, #256]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fa:	6593      	str	r3, [r2, #88]	; 0x58
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003708:	2301      	movs	r3, #1
 800370a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3a      	ldr	r2, [pc, #232]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003718:	f7fe fd78 	bl	800220c <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800371e:	e009      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003720:	f7fe fd74 	bl	800220c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	74fb      	strb	r3, [r7, #19]
        break;
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d15c      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01f      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	d019      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fe fd33 	bl	800220c <HAL_GetTick>
 80037a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a8:	e00b      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe fd2f 	bl	800220c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	74fb      	strb	r3, [r7, #19]
            break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ec      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e6:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ee:	e009      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003804:	7c7b      	ldrb	r3, [r7, #17]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b9e      	ldr	r3, [pc, #632]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	4a9d      	ldr	r2, [pc, #628]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003822:	4b98      	ldr	r3, [pc, #608]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f023 0203 	bic.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	4994      	ldr	r1, [pc, #592]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003844:	4b8f      	ldr	r3, [pc, #572]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f023 020c 	bic.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	498c      	ldr	r1, [pc, #560]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003866:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	4983      	ldr	r1, [pc, #524]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	497b      	ldr	r1, [pc, #492]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	4972      	ldr	r1, [pc, #456]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038cc:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	496a      	ldr	r1, [pc, #424]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ee:	4b65      	ldr	r3, [pc, #404]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	4961      	ldr	r1, [pc, #388]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003910:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391e:	4959      	ldr	r1, [pc, #356]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003932:	4b54      	ldr	r3, [pc, #336]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	4950      	ldr	r1, [pc, #320]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003954:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	4948      	ldr	r1, [pc, #288]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	493f      	ldr	r1, [pc, #252]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d028      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003998:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a6:	4937      	ldr	r1, [pc, #220]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	e011      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ce:	d10c      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f8c8 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d028      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	491f      	ldr	r1, [pc, #124]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a14:	d106      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a20:	60d3      	str	r3, [r2, #12]
 8003a22:	e011      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f899 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02b      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a62:	4908      	ldr	r1, [pc, #32]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a72:	d109      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a02      	ldr	r2, [pc, #8]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7e:	60d3      	str	r3, [r2, #12]
 8003a80:	e014      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a90:	d10c      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f867 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac6:	4928      	ldr	r1, [pc, #160]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2102      	movs	r1, #2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f844 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d014      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	74bb      	strb	r3, [r7, #18]
 8003af2:	e011      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3320      	adds	r3, #32
 8003b02:	2102      	movs	r1, #2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f925 	bl	8003d54 <RCCEx_PLLSAI2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b32:	490d      	ldr	r1, [pc, #52]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021000 	.word	0x40021000

08003b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b7a:	4b75      	ldr	r3, [pc, #468]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d018      	beq.n	8003bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b86:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0203 	and.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d10d      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
       ||
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b9e:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
       ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d047      	beq.n	8003c42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
 8003bb6:	e044      	b.n	8003c42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d018      	beq.n	8003bf2 <RCCEx_PLLSAI1_Config+0x86>
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d825      	bhi.n	8003c10 <RCCEx_PLLSAI1_Config+0xa4>
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d002      	beq.n	8003bce <RCCEx_PLLSAI1_Config+0x62>
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d009      	beq.n	8003be0 <RCCEx_PLLSAI1_Config+0x74>
 8003bcc:	e020      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bce:	4b60      	ldr	r3, [pc, #384]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11d      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bde:	e01a      	b.n	8003c16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003be0:	4b5b      	ldr	r3, [pc, #364]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d116      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf0:	e013      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bf2:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10f      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bfe:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c0e:	e006      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      break;
 8003c14:	e004      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c16:	bf00      	nop
 8003c18:	e002      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e000      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	4944      	ldr	r1, [pc, #272]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d17d      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c48:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a40      	ldr	r2, [pc, #256]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fe fada 	bl	800220c <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c5a:	e009      	b.n	8003c70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c5c:	f7fe fad6 	bl	800220c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d902      	bls.n	8003c70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c6e:	e005      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c70:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ef      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d160      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d111      	bne.n	8003cac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c88:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6892      	ldr	r2, [r2, #8]
 8003c98:	0211      	lsls	r1, r2, #8
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	0912      	lsrs	r2, r2, #4
 8003ca0:	0452      	lsls	r2, r2, #17
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	492a      	ldr	r1, [pc, #168]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	610b      	str	r3, [r1, #16]
 8003caa:	e027      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d112      	bne.n	8003cd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb2:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6892      	ldr	r2, [r2, #8]
 8003cc2:	0211      	lsls	r1, r2, #8
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6912      	ldr	r2, [r2, #16]
 8003cc8:	0852      	lsrs	r2, r2, #1
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	0552      	lsls	r2, r2, #21
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	491f      	ldr	r1, [pc, #124]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	610b      	str	r3, [r1, #16]
 8003cd6:	e011      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6892      	ldr	r2, [r2, #8]
 8003ce8:	0211      	lsls	r1, r2, #8
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6952      	ldr	r2, [r2, #20]
 8003cee:	0852      	lsrs	r2, r2, #1
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	0652      	lsls	r2, r2, #25
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	4916      	ldr	r1, [pc, #88]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe fa80 	bl	800220c <HAL_GetTick>
 8003d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d0e:	e009      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d10:	f7fe fa7c 	bl	800220c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d902      	bls.n	8003d24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	73fb      	strb	r3, [r7, #15]
          break;
 8003d22:	e005      	b.n	8003d30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ef      	beq.n	8003d10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	4904      	ldr	r1, [pc, #16]	; (8003d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000

08003d54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d62:	4b6a      	ldr	r3, [pc, #424]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d018      	beq.n	8003da0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d6e:	4b67      	ldr	r3, [pc, #412]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d10d      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
       ||
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d86:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
       ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d047      	beq.n	8003e2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
 8003d9e:	e044      	b.n	8003e2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d018      	beq.n	8003dda <RCCEx_PLLSAI2_Config+0x86>
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d825      	bhi.n	8003df8 <RCCEx_PLLSAI2_Config+0xa4>
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d002      	beq.n	8003db6 <RCCEx_PLLSAI2_Config+0x62>
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d009      	beq.n	8003dc8 <RCCEx_PLLSAI2_Config+0x74>
 8003db4:	e020      	b.n	8003df8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003db6:	4b55      	ldr	r3, [pc, #340]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11d      	bne.n	8003dfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc6:	e01a      	b.n	8003dfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d116      	bne.n	8003e02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd8:	e013      	b.n	8003e02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dda:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003de6:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003df6:	e006      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	e004      	b.n	8003e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	430b      	orrs	r3, r1
 8003e24:	4939      	ldr	r1, [pc, #228]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d167      	bne.n	8003f00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a35      	ldr	r2, [pc, #212]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe f9e6 	bl	800220c <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e44:	f7fe f9e2 	bl	800220c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
        break;
 8003e56:	e005      	b.n	8003e64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e58:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ef      	bne.n	8003e44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d14a      	bne.n	8003f00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d111      	bne.n	8003e94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e70:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68d2      	ldr	r2, [r2, #12]
 8003e86:	0912      	lsrs	r2, r2, #4
 8003e88:	0452      	lsls	r2, r2, #17
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	491f      	ldr	r1, [pc, #124]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	614b      	str	r3, [r1, #20]
 8003e92:	e011      	b.n	8003eb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6892      	ldr	r2, [r2, #8]
 8003ea4:	0211      	lsls	r1, r2, #8
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6912      	ldr	r2, [r2, #16]
 8003eaa:	0852      	lsrs	r2, r2, #1
 8003eac:	3a01      	subs	r2, #1
 8003eae:	0652      	lsls	r2, r2, #25
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	4916      	ldr	r1, [pc, #88]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003eb8:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fe f9a2 	bl	800220c <HAL_GetTick>
 8003ec8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eca:	e009      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ecc:	f7fe f99e 	bl	800220c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d902      	bls.n	8003ee0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	73fb      	strb	r3, [r7, #15]
          break;
 8003ede:	e005      	b.n	8003eec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ef      	beq.n	8003ecc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4904      	ldr	r1, [pc, #16]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000

08003f10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d06c      	beq.n	8003ffc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd feec 	bl	8001d14 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	22ca      	movs	r2, #202	; 0xca
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2253      	movs	r2, #83	; 0x53
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fc8b 	bl	8004870 <RTC_EnterInitMode>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d14b      	bne.n	8003ffc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f76:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6899      	ldr	r1, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6919      	ldr	r1, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	041a      	lsls	r2, r3, #16
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fc8f 	bl	80048d8 <RTC_ExitInitMode>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d11b      	bne.n	8003ffc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0203 	bic.w	r2, r2, #3
 8003fd2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004006:	b590      	push	{r4, r7, lr}
 8004008:	b087      	sub	sp, #28
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_RTC_SetTime+0x1a>
 800401c:	2302      	movs	r3, #2
 800401e:	e08b      	b.n	8004138 <HAL_RTC_SetTime+0x132>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	22ca      	movs	r2, #202	; 0xca
 8004036:	625a      	str	r2, [r3, #36]	; 0x24
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2253      	movs	r2, #83	; 0x53
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fc15 	bl	8004870 <RTC_EnterInitMode>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d163      	bne.n	8004118 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d126      	bne.n	80040a4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2200      	movs	r2, #0
 8004068:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fc70 	bl	8004954 <RTC_ByteToBcd2>
 8004074:	4603      	mov	r3, r0
 8004076:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fc69 	bl	8004954 <RTC_ByteToBcd2>
 8004082:	4603      	mov	r3, r0
 8004084:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004086:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	789b      	ldrb	r3, [r3, #2]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fc61 	bl	8004954 <RTC_ByteToBcd2>
 8004092:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004094:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	78db      	ldrb	r3, [r3, #3]
 800409c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e018      	b.n	80040d6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	785b      	ldrb	r3, [r3, #1]
 80040c2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80040c4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040ca:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	78db      	ldrb	r3, [r3, #3]
 80040d0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80040e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6899      	ldr	r1, [r3, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fbe2 	bl	80048d8 <RTC_ExitInitMode>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	22ff      	movs	r2, #255	; 0xff
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004136:	7cfb      	ldrb	r3, [r7, #19]
}
 8004138:	4618      	mov	r0, r3
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	bd90      	pop	{r4, r7, pc}

08004140 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800416e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004172:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	0d9b      	lsrs	r3, r3, #22
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11a      	bne.n	80041ee <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fbe9 	bl	8004994 <RTC_Bcd2ToByte>
 80041c2:	4603      	mov	r3, r0
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fbe0 	bl	8004994 <RTC_Bcd2ToByte>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	789b      	ldrb	r3, [r3, #2]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fbd7 	bl	8004994 <RTC_Bcd2ToByte>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_RTC_SetDate+0x1a>
 800420e:	2302      	movs	r3, #2
 8004210:	e075      	b.n	80042fe <HAL_RTC_SetDate+0x106>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10e      	bne.n	8004246 <HAL_RTC_SetDate+0x4e>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	f023 0310 	bic.w	r3, r3, #16
 800423c:	b2db      	uxtb	r3, r3
 800423e:	330a      	adds	r3, #10
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d11c      	bne.n	8004286 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	78db      	ldrb	r3, [r3, #3]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fb7f 	bl	8004954 <RTC_ByteToBcd2>
 8004256:	4603      	mov	r3, r0
 8004258:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fb78 	bl	8004954 <RTC_ByteToBcd2>
 8004264:	4603      	mov	r3, r0
 8004266:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004268:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	789b      	ldrb	r3, [r3, #2]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fb70 	bl	8004954 <RTC_ByteToBcd2>
 8004274:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004276:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e00e      	b.n	80042a4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	78db      	ldrb	r3, [r3, #3]
 800428a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004292:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004298:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	22ca      	movs	r2, #202	; 0xca
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2253      	movs	r2, #83	; 0x53
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fadb 	bl	8004870 <RTC_EnterInitMode>
 80042ba:	4603      	mov	r3, r0
 80042bc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10c      	bne.n	80042de <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042d2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 faff 	bl	80048d8 <RTC_ExitInitMode>
 80042da:	4603      	mov	r3, r0
 80042dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	22ff      	movs	r2, #255	; 0xff
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}

08004306 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004320:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	b2da      	uxtb	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	0b5b      	lsrs	r3, r3, #13
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d11a      	bne.n	8004396 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	78db      	ldrb	r3, [r3, #3]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fb15 	bl	8004994 <RTC_Bcd2ToByte>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fb0c 	bl	8004994 <RTC_Bcd2ToByte>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	789b      	ldrb	r3, [r3, #2]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fb03 	bl	8004994 <RTC_Bcd2ToByte>
 800438e:	4603      	mov	r3, r0
 8004390:	461a      	mov	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_RTC_SetAlarm_IT+0x1a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e127      	b.n	800460a <HAL_RTC_SetAlarm_IT+0x26a>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d137      	bne.n	8004440 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fab3 	bl	8004954 <RTC_ByteToBcd2>
 80043ee:	4603      	mov	r3, r0
 80043f0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 faac 	bl	8004954 <RTC_ByteToBcd2>
 80043fc:	4603      	mov	r3, r0
 80043fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004400:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	789b      	ldrb	r3, [r3, #2]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 faa4 	bl	8004954 <RTC_ByteToBcd2>
 800440c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800440e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	78db      	ldrb	r3, [r3, #3]
 8004416:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004418:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fa96 	bl	8004954 <RTC_ByteToBcd2>
 8004428:	4603      	mov	r3, r0
 800442a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800442c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004434:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800443a:	4313      	orrs	r3, r2
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e023      	b.n	8004488 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004460:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004466:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	78db      	ldrb	r3, [r3, #3]
 800446c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800446e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004476:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004478:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800447e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004484:	4313      	orrs	r3, r2
 8004486:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4313      	orrs	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	22ca      	movs	r2, #202	; 0xca
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2253      	movs	r2, #83	; 0x53
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ac:	d14a      	bne.n	8004544 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044bc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80044ce:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80044d0:	f7fd fe9c 	bl	800220c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80044d6:	e015      	b.n	8004504 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044d8:	f7fd fe98 	bl	800220c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044e6:	d90d      	bls.n	8004504 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2203      	movs	r2, #3
 80044f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e082      	b.n	800460a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0e2      	beq.n	80044d8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004530:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	e049      	b.n	80045d8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004552:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004564:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004566:	f7fd fe51 	bl	800220c <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800456c:	e015      	b.n	800459a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800456e:	f7fd fe4d 	bl	800220c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800457c:	d90d      	bls.n	800459a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	22ff      	movs	r2, #255	; 0xff
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2203      	movs	r2, #3
 800458a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e037      	b.n	800460a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0e2      	beq.n	800456e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80045d8:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <HAL_RTC_SetAlarm_IT+0x274>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <HAL_RTC_SetAlarm_IT+0x274>)
 80045de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RTC_SetAlarm_IT+0x274>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <HAL_RTC_SetAlarm_IT+0x274>)
 80045ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ee:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	22ff      	movs	r2, #255	; 0xff
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd90      	pop	{r4, r7, pc}
 8004612:	bf00      	nop
 8004614:	40010400 	.word	0x40010400

08004618 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462c:	d143      	bne.n	80046b6 <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004634:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004648:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	0d9b      	lsrs	r3, r3, #22
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	0e1b      	lsrs	r3, r3, #24
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	615a      	str	r2, [r3, #20]
 80046b4:	e042      	b.n	800473c <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046d0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	0d9b      	lsrs	r3, r3, #22
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	b2da      	uxtb	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	0e1b      	lsrs	r3, r3, #24
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d125      	bne.n	800478e <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f924 	bl	8004994 <RTC_Bcd2ToByte>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f91b 	bl	8004994 <RTC_Bcd2ToByte>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	789b      	ldrb	r3, [r3, #2]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f912 	bl	8004994 <RTC_Bcd2ToByte>
 8004770:	4603      	mov	r3, r0
 8004772:	461a      	mov	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f908 	bl	8004994 <RTC_Bcd2ToByte>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80047a0:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <HAL_RTC_AlarmIRQHandler+0x88>)
 80047a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80047a6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80047d4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fb ff18 	bl	800060c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d012      	beq.n	8004810 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004808:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f8dc 	bl	80049c8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40010400 	.word	0x40010400

08004824 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800483a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800483c:	f7fd fce6 	bl	800220c <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004842:	e009      	b.n	8004858 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004844:	f7fd fce2 	bl	800220c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004852:	d901      	bls.n	8004858 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e007      	b.n	8004868 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ee      	beq.n	8004844 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d120      	bne.n	80048cc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f04f 32ff 	mov.w	r2, #4294967295
 8004892:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004894:	f7fd fcba 	bl	800220c <HAL_GetTick>
 8004898:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800489a:	e00d      	b.n	80048b8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800489c:	f7fd fcb6 	bl	800220c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048aa:	d905      	bls.n	80048b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2203      	movs	r2, #3
 80048b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <RTC_EnterInitMode+0x5c>
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d1e7      	bne.n	800489c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <RTC_ExitInitMode+0x78>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a19      	ldr	r2, [pc, #100]	; (8004950 <RTC_ExitInitMode+0x78>)
 80048ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80048f0:	4b17      	ldr	r3, [pc, #92]	; (8004950 <RTC_ExitInitMode+0x78>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10c      	bne.n	8004916 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff91 	bl	8004824 <HAL_RTC_WaitForSynchro>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01e      	beq.n	8004946 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2203      	movs	r2, #3
 800490c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	e017      	b.n	8004946 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004916:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <RTC_ExitInitMode+0x78>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	4a0d      	ldr	r2, [pc, #52]	; (8004950 <RTC_ExitInitMode+0x78>)
 800491c:	f023 0320 	bic.w	r3, r3, #32
 8004920:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff ff7e 	bl	8004824 <HAL_RTC_WaitForSynchro>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2203      	movs	r2, #3
 8004932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <RTC_ExitInitMode+0x78>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	4a04      	ldr	r2, [pc, #16]	; (8004950 <RTC_ExitInitMode+0x78>)
 8004940:	f043 0320 	orr.w	r3, r3, #32
 8004944:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40002800 	.word	0x40002800

08004954 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004966:	e005      	b.n	8004974 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800496e:	7afb      	ldrb	r3, [r7, #11]
 8004970:	3b0a      	subs	r3, #10
 8004972:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004974:	7afb      	ldrb	r3, [r7, #11]
 8004976:	2b09      	cmp	r3, #9
 8004978:	d8f6      	bhi.n	8004968 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	b2da      	uxtb	r2, r3
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	4313      	orrs	r3, r2
 8004986:	b2db      	uxtb	r3, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	0092      	lsls	r2, r2, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	4413      	add	r3, r2
 80049ba:	b2db      	uxtb	r3, r3
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e095      	b.n	8004b1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d108      	bne.n	8004a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fe:	d009      	beq.n	8004a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	61da      	str	r2, [r3, #28]
 8004a06:	e005      	b.n	8004a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fd f992 	bl	8001d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a54:	d902      	bls.n	8004a5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e002      	b.n	8004a62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a6a:	d007      	beq.n	8004a7c <HAL_SPI_Init+0xa0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	ea42 0103 	orr.w	r1, r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	f003 0204 	and.w	r2, r3, #4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004af8:	ea42 0103 	orr.w	r1, r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b088      	sub	sp, #32
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_SPI_Transmit+0x22>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e158      	b.n	8004df6 <HAL_SPI_Transmit+0x2d4>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b4c:	f7fd fb5e 	bl	800220c <HAL_GetTick>
 8004b50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
 8004b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b66:	e13d      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Transmit+0x52>
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b78:	e134      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc4:	d10f      	bne.n	8004be6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d007      	beq.n	8004c04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0c:	d94b      	bls.n	8004ca6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_Transmit+0xfa>
 8004c16:	8afb      	ldrh	r3, [r7, #22]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d13e      	bne.n	8004c9a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c40:	e02b      	b.n	8004c9a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d112      	bne.n	8004c76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	881a      	ldrh	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c74:	e011      	b.n	8004c9a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fd fac9 	bl	800220c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Transmit+0x16c>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Transmit+0x172>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c98:	e0a4      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ce      	bne.n	8004c42 <HAL_SPI_Transmit+0x120>
 8004ca4:	e07c      	b.n	8004da0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Transmit+0x192>
 8004cae:	8afb      	ldrh	r3, [r7, #22]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d170      	bne.n	8004d96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d912      	bls.n	8004ce4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b02      	subs	r3, #2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce2:	e058      	b.n	8004d96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	7812      	ldrb	r2, [r2, #0]
 8004cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d0a:	e044      	b.n	8004d96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d12b      	bne.n	8004d72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d912      	bls.n	8004d4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b02      	subs	r3, #2
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d48:	e025      	b.n	8004d96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	7812      	ldrb	r2, [r2, #0]
 8004d56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d70:	e011      	b.n	8004d96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d72:	f7fd fa4b 	bl	800220c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d803      	bhi.n	8004d8a <HAL_SPI_Transmit+0x268>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d102      	bne.n	8004d90 <HAL_SPI_Transmit+0x26e>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d94:	e026      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1b5      	bne.n	8004d0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fa65 	bl	8005274 <SPI_EndRxTxTransaction>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e000      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004de2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	099b      	lsrs	r3, r3, #6
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10f      	bne.n	8004e44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	099b      	lsrs	r3, r3, #6
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
    return;
 8004e42:	e0d7      	b.n	8004ff4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_SPI_IRQHandler+0x66>
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	09db      	lsrs	r3, r3, #7
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
    return;
 8004e64:	e0c6      	b.n	8004ff4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10c      	bne.n	8004e8c <HAL_SPI_IRQHandler+0x8c>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	099b      	lsrs	r3, r3, #6
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80b4 	beq.w	8004ff4 <HAL_SPI_IRQHandler+0x1f4>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80ad 	beq.w	8004ff4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	099b      	lsrs	r3, r3, #6
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d023      	beq.n	8004eee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d011      	beq.n	8004ed6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	e00b      	b.n	8004eee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	693b      	ldr	r3, [r7, #16]
        return;
 8004eec:	e082      	b.n	8004ff4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	f043 0201 	orr.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	0a1b      	lsrs	r3, r3, #8
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00c      	beq.n	8004f4a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	f043 0208 	orr.w	r2, r3, #8
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d04f      	beq.n	8004ff2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_SPI_IRQHandler+0x17e>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d034      	beq.n	8004fe8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0203 	bic.w	r2, r2, #3
 8004f8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d011      	beq.n	8004fba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_SPI_IRQHandler+0x1fc>)
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd fa73 	bl	800248e <HAL_DMA_Abort_IT>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d016      	beq.n	8004ff0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <HAL_SPI_IRQHandler+0x1fc>)
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd fa5d 	bl	800248e <HAL_DMA_Abort_IT>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004fe6:	e003      	b.n	8004ff0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f809 	bl	8005000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fee:	e000      	b.n	8004ff2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ff0:	bf00      	nop
    return;
 8004ff2:	bf00      	nop
  }
}
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	08005015 	.word	0x08005015

08005000 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff ffe5 	bl	8005000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005050:	f7fd f8dc 	bl	800220c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	4413      	add	r3, r2
 800505e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005060:	f7fd f8d4 	bl	800220c <HAL_GetTick>
 8005064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005066:	4b39      	ldr	r3, [pc, #228]	; (800514c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	015b      	lsls	r3, r3, #5
 800506c:	0d1b      	lsrs	r3, r3, #20
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005076:	e054      	b.n	8005122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d050      	beq.n	8005122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005080:	f7fd f8c4 	bl	800220c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	429a      	cmp	r2, r3
 800508e:	d902      	bls.n	8005096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d13d      	bne.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ae:	d111      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b8:	d004      	beq.n	80050c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	d107      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050dc:	d10f      	bne.n	80050fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e017      	b.n	8005142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3b01      	subs	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	429a      	cmp	r2, r3
 800513e:	d19b      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000008 	.word	0x20000008

08005150 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800515e:	f7fd f855 	bl	800220c <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	4413      	add	r3, r2
 800516c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800516e:	f7fd f84d 	bl	800220c <HAL_GetTick>
 8005172:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005174:	4b3e      	ldr	r3, [pc, #248]	; (8005270 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00da      	lsls	r2, r3, #3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	0d1b      	lsrs	r3, r3, #20
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800518c:	e062      	b.n	8005254 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005194:	d109      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80051a8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d050      	beq.n	8005254 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b2:	f7fd f82b 	bl	800220c <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d902      	bls.n	80051c8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d13d      	bne.n	8005244 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e0:	d111      	bne.n	8005206 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ea:	d004      	beq.n	80051f6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f4:	d107      	bne.n	8005206 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005204:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520e:	d10f      	bne.n	8005230 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e010      	b.n	8005266 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3b01      	subs	r3, #1
 8005252:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4013      	ands	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d194      	bne.n	800518e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000008 	.word	0x20000008

08005274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff ff5f 	bl	8005150 <SPI_WaitFifoStateUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e027      	b.n	80052f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2200      	movs	r2, #0
 80052b0:	2180      	movs	r1, #128	; 0x80
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7ff fec4 	bl	8005040 <SPI_WaitFlagStateUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c2:	f043 0220 	orr.w	r2, r3, #32
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e014      	b.n	80052f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f7ff ff38 	bl	8005150 <SPI_WaitFifoStateUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ea:	f043 0220 	orr.w	r2, r3, #32
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e000      	b.n	80052f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e040      	b.n	8005394 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc fd82 	bl	8001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2224      	movs	r2, #36	; 0x24
 800532c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f82c 	bl	800539c <UART_SetConfig>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e022      	b.n	8005394 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 faaa 	bl	80058b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fb31 	bl	80059f4 <UART_CheckIdleState>
 8005392:	4603      	mov	r3, r0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800539c:	b5b0      	push	{r4, r5, r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4bad      	ldr	r3, [pc, #692]	; (800567c <UART_SetConfig+0x2e0>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4aa2      	ldr	r2, [pc, #648]	; (8005680 <UART_SetConfig+0x2e4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	430a      	orrs	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a99      	ldr	r2, [pc, #612]	; (8005684 <UART_SetConfig+0x2e8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d121      	bne.n	8005466 <UART_SetConfig+0xca>
 8005422:	4b99      	ldr	r3, [pc, #612]	; (8005688 <UART_SetConfig+0x2ec>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	2b03      	cmp	r3, #3
 800542e:	d817      	bhi.n	8005460 <UART_SetConfig+0xc4>
 8005430:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <UART_SetConfig+0x9c>)
 8005432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005436:	bf00      	nop
 8005438:	08005449 	.word	0x08005449
 800543c:	08005455 	.word	0x08005455
 8005440:	0800544f 	.word	0x0800544f
 8005444:	0800545b 	.word	0x0800545b
 8005448:	2301      	movs	r3, #1
 800544a:	76fb      	strb	r3, [r7, #27]
 800544c:	e0e7      	b.n	800561e <UART_SetConfig+0x282>
 800544e:	2302      	movs	r3, #2
 8005450:	76fb      	strb	r3, [r7, #27]
 8005452:	e0e4      	b.n	800561e <UART_SetConfig+0x282>
 8005454:	2304      	movs	r3, #4
 8005456:	76fb      	strb	r3, [r7, #27]
 8005458:	e0e1      	b.n	800561e <UART_SetConfig+0x282>
 800545a:	2308      	movs	r3, #8
 800545c:	76fb      	strb	r3, [r7, #27]
 800545e:	e0de      	b.n	800561e <UART_SetConfig+0x282>
 8005460:	2310      	movs	r3, #16
 8005462:	76fb      	strb	r3, [r7, #27]
 8005464:	e0db      	b.n	800561e <UART_SetConfig+0x282>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a88      	ldr	r2, [pc, #544]	; (800568c <UART_SetConfig+0x2f0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d132      	bne.n	80054d6 <UART_SetConfig+0x13a>
 8005470:	4b85      	ldr	r3, [pc, #532]	; (8005688 <UART_SetConfig+0x2ec>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d828      	bhi.n	80054d0 <UART_SetConfig+0x134>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0xe8>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054b9 	.word	0x080054b9
 8005488:	080054d1 	.word	0x080054d1
 800548c:	080054d1 	.word	0x080054d1
 8005490:	080054d1 	.word	0x080054d1
 8005494:	080054c5 	.word	0x080054c5
 8005498:	080054d1 	.word	0x080054d1
 800549c:	080054d1 	.word	0x080054d1
 80054a0:	080054d1 	.word	0x080054d1
 80054a4:	080054bf 	.word	0x080054bf
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d1 	.word	0x080054d1
 80054b4:	080054cb 	.word	0x080054cb
 80054b8:	2300      	movs	r3, #0
 80054ba:	76fb      	strb	r3, [r7, #27]
 80054bc:	e0af      	b.n	800561e <UART_SetConfig+0x282>
 80054be:	2302      	movs	r3, #2
 80054c0:	76fb      	strb	r3, [r7, #27]
 80054c2:	e0ac      	b.n	800561e <UART_SetConfig+0x282>
 80054c4:	2304      	movs	r3, #4
 80054c6:	76fb      	strb	r3, [r7, #27]
 80054c8:	e0a9      	b.n	800561e <UART_SetConfig+0x282>
 80054ca:	2308      	movs	r3, #8
 80054cc:	76fb      	strb	r3, [r7, #27]
 80054ce:	e0a6      	b.n	800561e <UART_SetConfig+0x282>
 80054d0:	2310      	movs	r3, #16
 80054d2:	76fb      	strb	r3, [r7, #27]
 80054d4:	e0a3      	b.n	800561e <UART_SetConfig+0x282>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6d      	ldr	r2, [pc, #436]	; (8005690 <UART_SetConfig+0x2f4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d120      	bne.n	8005522 <UART_SetConfig+0x186>
 80054e0:	4b69      	ldr	r3, [pc, #420]	; (8005688 <UART_SetConfig+0x2ec>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054ea:	2b30      	cmp	r3, #48	; 0x30
 80054ec:	d013      	beq.n	8005516 <UART_SetConfig+0x17a>
 80054ee:	2b30      	cmp	r3, #48	; 0x30
 80054f0:	d814      	bhi.n	800551c <UART_SetConfig+0x180>
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d009      	beq.n	800550a <UART_SetConfig+0x16e>
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d810      	bhi.n	800551c <UART_SetConfig+0x180>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <UART_SetConfig+0x168>
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d006      	beq.n	8005510 <UART_SetConfig+0x174>
 8005502:	e00b      	b.n	800551c <UART_SetConfig+0x180>
 8005504:	2300      	movs	r3, #0
 8005506:	76fb      	strb	r3, [r7, #27]
 8005508:	e089      	b.n	800561e <UART_SetConfig+0x282>
 800550a:	2302      	movs	r3, #2
 800550c:	76fb      	strb	r3, [r7, #27]
 800550e:	e086      	b.n	800561e <UART_SetConfig+0x282>
 8005510:	2304      	movs	r3, #4
 8005512:	76fb      	strb	r3, [r7, #27]
 8005514:	e083      	b.n	800561e <UART_SetConfig+0x282>
 8005516:	2308      	movs	r3, #8
 8005518:	76fb      	strb	r3, [r7, #27]
 800551a:	e080      	b.n	800561e <UART_SetConfig+0x282>
 800551c:	2310      	movs	r3, #16
 800551e:	76fb      	strb	r3, [r7, #27]
 8005520:	e07d      	b.n	800561e <UART_SetConfig+0x282>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a5b      	ldr	r2, [pc, #364]	; (8005694 <UART_SetConfig+0x2f8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d120      	bne.n	800556e <UART_SetConfig+0x1d2>
 800552c:	4b56      	ldr	r3, [pc, #344]	; (8005688 <UART_SetConfig+0x2ec>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005536:	2bc0      	cmp	r3, #192	; 0xc0
 8005538:	d013      	beq.n	8005562 <UART_SetConfig+0x1c6>
 800553a:	2bc0      	cmp	r3, #192	; 0xc0
 800553c:	d814      	bhi.n	8005568 <UART_SetConfig+0x1cc>
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d009      	beq.n	8005556 <UART_SetConfig+0x1ba>
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d810      	bhi.n	8005568 <UART_SetConfig+0x1cc>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <UART_SetConfig+0x1b4>
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d006      	beq.n	800555c <UART_SetConfig+0x1c0>
 800554e:	e00b      	b.n	8005568 <UART_SetConfig+0x1cc>
 8005550:	2300      	movs	r3, #0
 8005552:	76fb      	strb	r3, [r7, #27]
 8005554:	e063      	b.n	800561e <UART_SetConfig+0x282>
 8005556:	2302      	movs	r3, #2
 8005558:	76fb      	strb	r3, [r7, #27]
 800555a:	e060      	b.n	800561e <UART_SetConfig+0x282>
 800555c:	2304      	movs	r3, #4
 800555e:	76fb      	strb	r3, [r7, #27]
 8005560:	e05d      	b.n	800561e <UART_SetConfig+0x282>
 8005562:	2308      	movs	r3, #8
 8005564:	76fb      	strb	r3, [r7, #27]
 8005566:	e05a      	b.n	800561e <UART_SetConfig+0x282>
 8005568:	2310      	movs	r3, #16
 800556a:	76fb      	strb	r3, [r7, #27]
 800556c:	e057      	b.n	800561e <UART_SetConfig+0x282>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a49      	ldr	r2, [pc, #292]	; (8005698 <UART_SetConfig+0x2fc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d125      	bne.n	80055c4 <UART_SetConfig+0x228>
 8005578:	4b43      	ldr	r3, [pc, #268]	; (8005688 <UART_SetConfig+0x2ec>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005586:	d017      	beq.n	80055b8 <UART_SetConfig+0x21c>
 8005588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558c:	d817      	bhi.n	80055be <UART_SetConfig+0x222>
 800558e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005592:	d00b      	beq.n	80055ac <UART_SetConfig+0x210>
 8005594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005598:	d811      	bhi.n	80055be <UART_SetConfig+0x222>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <UART_SetConfig+0x20a>
 800559e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a2:	d006      	beq.n	80055b2 <UART_SetConfig+0x216>
 80055a4:	e00b      	b.n	80055be <UART_SetConfig+0x222>
 80055a6:	2300      	movs	r3, #0
 80055a8:	76fb      	strb	r3, [r7, #27]
 80055aa:	e038      	b.n	800561e <UART_SetConfig+0x282>
 80055ac:	2302      	movs	r3, #2
 80055ae:	76fb      	strb	r3, [r7, #27]
 80055b0:	e035      	b.n	800561e <UART_SetConfig+0x282>
 80055b2:	2304      	movs	r3, #4
 80055b4:	76fb      	strb	r3, [r7, #27]
 80055b6:	e032      	b.n	800561e <UART_SetConfig+0x282>
 80055b8:	2308      	movs	r3, #8
 80055ba:	76fb      	strb	r3, [r7, #27]
 80055bc:	e02f      	b.n	800561e <UART_SetConfig+0x282>
 80055be:	2310      	movs	r3, #16
 80055c0:	76fb      	strb	r3, [r7, #27]
 80055c2:	e02c      	b.n	800561e <UART_SetConfig+0x282>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a2d      	ldr	r2, [pc, #180]	; (8005680 <UART_SetConfig+0x2e4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d125      	bne.n	800561a <UART_SetConfig+0x27e>
 80055ce:	4b2e      	ldr	r3, [pc, #184]	; (8005688 <UART_SetConfig+0x2ec>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055dc:	d017      	beq.n	800560e <UART_SetConfig+0x272>
 80055de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055e2:	d817      	bhi.n	8005614 <UART_SetConfig+0x278>
 80055e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e8:	d00b      	beq.n	8005602 <UART_SetConfig+0x266>
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ee:	d811      	bhi.n	8005614 <UART_SetConfig+0x278>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <UART_SetConfig+0x260>
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f8:	d006      	beq.n	8005608 <UART_SetConfig+0x26c>
 80055fa:	e00b      	b.n	8005614 <UART_SetConfig+0x278>
 80055fc:	2300      	movs	r3, #0
 80055fe:	76fb      	strb	r3, [r7, #27]
 8005600:	e00d      	b.n	800561e <UART_SetConfig+0x282>
 8005602:	2302      	movs	r3, #2
 8005604:	76fb      	strb	r3, [r7, #27]
 8005606:	e00a      	b.n	800561e <UART_SetConfig+0x282>
 8005608:	2304      	movs	r3, #4
 800560a:	76fb      	strb	r3, [r7, #27]
 800560c:	e007      	b.n	800561e <UART_SetConfig+0x282>
 800560e:	2308      	movs	r3, #8
 8005610:	76fb      	strb	r3, [r7, #27]
 8005612:	e004      	b.n	800561e <UART_SetConfig+0x282>
 8005614:	2310      	movs	r3, #16
 8005616:	76fb      	strb	r3, [r7, #27]
 8005618:	e001      	b.n	800561e <UART_SetConfig+0x282>
 800561a:	2310      	movs	r3, #16
 800561c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a17      	ldr	r2, [pc, #92]	; (8005680 <UART_SetConfig+0x2e4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	f040 8087 	bne.w	8005738 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800562a:	7efb      	ldrb	r3, [r7, #27]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d837      	bhi.n	80056a0 <UART_SetConfig+0x304>
 8005630:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <UART_SetConfig+0x29c>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800565d 	.word	0x0800565d
 800563c:	080056a1 	.word	0x080056a1
 8005640:	08005665 	.word	0x08005665
 8005644:	080056a1 	.word	0x080056a1
 8005648:	0800566b 	.word	0x0800566b
 800564c:	080056a1 	.word	0x080056a1
 8005650:	080056a1 	.word	0x080056a1
 8005654:	080056a1 	.word	0x080056a1
 8005658:	08005673 	.word	0x08005673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800565c:	f7fd ff10 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8005660:	6178      	str	r0, [r7, #20]
        break;
 8005662:	e022      	b.n	80056aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005664:	4b0d      	ldr	r3, [pc, #52]	; (800569c <UART_SetConfig+0x300>)
 8005666:	617b      	str	r3, [r7, #20]
        break;
 8005668:	e01f      	b.n	80056aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566a:	f7fd fe71 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800566e:	6178      	str	r0, [r7, #20]
        break;
 8005670:	e01b      	b.n	80056aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005676:	617b      	str	r3, [r7, #20]
        break;
 8005678:	e017      	b.n	80056aa <UART_SetConfig+0x30e>
 800567a:	bf00      	nop
 800567c:	efff69f3 	.word	0xefff69f3
 8005680:	40008000 	.word	0x40008000
 8005684:	40013800 	.word	0x40013800
 8005688:	40021000 	.word	0x40021000
 800568c:	40004400 	.word	0x40004400
 8005690:	40004800 	.word	0x40004800
 8005694:	40004c00 	.word	0x40004c00
 8005698:	40005000 	.word	0x40005000
 800569c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	76bb      	strb	r3, [r7, #26]
        break;
 80056a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80f1 	beq.w	8005894 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d305      	bcc.n	80056ce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d902      	bls.n	80056d4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	76bb      	strb	r3, [r7, #26]
 80056d2:	e0df      	b.n	8005894 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	020b      	lsls	r3, r1, #8
 80056e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056ea:	0202      	lsls	r2, r0, #8
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	6849      	ldr	r1, [r1, #4]
 80056f0:	0849      	lsrs	r1, r1, #1
 80056f2:	4608      	mov	r0, r1
 80056f4:	f04f 0100 	mov.w	r1, #0
 80056f8:	1814      	adds	r4, r2, r0
 80056fa:	eb43 0501 	adc.w	r5, r3, r1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	461a      	mov	r2, r3
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	4620      	mov	r0, r4
 800570a:	4629      	mov	r1, r5
 800570c:	f7fa fdb0 	bl	8000270 <__aeabi_uldivmod>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4613      	mov	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571e:	d308      	bcc.n	8005732 <UART_SetConfig+0x396>
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005726:	d204      	bcs.n	8005732 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	60da      	str	r2, [r3, #12]
 8005730:	e0b0      	b.n	8005894 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	76bb      	strb	r3, [r7, #26]
 8005736:	e0ad      	b.n	8005894 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005740:	d15c      	bne.n	80057fc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005742:	7efb      	ldrb	r3, [r7, #27]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d828      	bhi.n	800579a <UART_SetConfig+0x3fe>
 8005748:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <UART_SetConfig+0x3b4>)
 800574a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574e:	bf00      	nop
 8005750:	08005775 	.word	0x08005775
 8005754:	0800577d 	.word	0x0800577d
 8005758:	08005785 	.word	0x08005785
 800575c:	0800579b 	.word	0x0800579b
 8005760:	0800578b 	.word	0x0800578b
 8005764:	0800579b 	.word	0x0800579b
 8005768:	0800579b 	.word	0x0800579b
 800576c:	0800579b 	.word	0x0800579b
 8005770:	08005793 	.word	0x08005793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005774:	f7fd fe84 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8005778:	6178      	str	r0, [r7, #20]
        break;
 800577a:	e013      	b.n	80057a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800577c:	f7fd fe96 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 8005780:	6178      	str	r0, [r7, #20]
        break;
 8005782:	e00f      	b.n	80057a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005784:	4b49      	ldr	r3, [pc, #292]	; (80058ac <UART_SetConfig+0x510>)
 8005786:	617b      	str	r3, [r7, #20]
        break;
 8005788:	e00c      	b.n	80057a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578a:	f7fd fde1 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800578e:	6178      	str	r0, [r7, #20]
        break;
 8005790:	e008      	b.n	80057a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005796:	617b      	str	r3, [r7, #20]
        break;
 8005798:	e004      	b.n	80057a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	76bb      	strb	r3, [r7, #26]
        break;
 80057a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d074      	beq.n	8005894 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	005a      	lsls	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	441a      	add	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b0f      	cmp	r3, #15
 80057c6:	d916      	bls.n	80057f6 <UART_SetConfig+0x45a>
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ce:	d212      	bcs.n	80057f6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f023 030f 	bic.w	r3, r3, #15
 80057d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	89fb      	ldrh	r3, [r7, #14]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	89fa      	ldrh	r2, [r7, #14]
 80057f2:	60da      	str	r2, [r3, #12]
 80057f4:	e04e      	b.n	8005894 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	76bb      	strb	r3, [r7, #26]
 80057fa:	e04b      	b.n	8005894 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057fc:	7efb      	ldrb	r3, [r7, #27]
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d827      	bhi.n	8005852 <UART_SetConfig+0x4b6>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x46c>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	0800582d 	.word	0x0800582d
 800580c:	08005835 	.word	0x08005835
 8005810:	0800583d 	.word	0x0800583d
 8005814:	08005853 	.word	0x08005853
 8005818:	08005843 	.word	0x08005843
 800581c:	08005853 	.word	0x08005853
 8005820:	08005853 	.word	0x08005853
 8005824:	08005853 	.word	0x08005853
 8005828:	0800584b 	.word	0x0800584b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fd fe28 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8005830:	6178      	str	r0, [r7, #20]
        break;
 8005832:	e013      	b.n	800585c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005834:	f7fd fe3a 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 8005838:	6178      	str	r0, [r7, #20]
        break;
 800583a:	e00f      	b.n	800585c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <UART_SetConfig+0x510>)
 800583e:	617b      	str	r3, [r7, #20]
        break;
 8005840:	e00c      	b.n	800585c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005842:	f7fd fd85 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8005846:	6178      	str	r0, [r7, #20]
        break;
 8005848:	e008      	b.n	800585c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584e:	617b      	str	r3, [r7, #20]
        break;
 8005850:	e004      	b.n	800585c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	76bb      	strb	r3, [r7, #26]
        break;
 800585a:	bf00      	nop
    }

    if (pclk != 0U)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	085a      	lsrs	r2, r3, #1
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	441a      	add	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	b29b      	uxth	r3, r3
 8005876:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d908      	bls.n	8005890 <UART_SetConfig+0x4f4>
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d204      	bcs.n	8005890 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e001      	b.n	8005894 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bdb0      	pop	{r4, r5, r7, pc}
 80058aa:	bf00      	nop
 80058ac:	00f42400 	.word	0x00f42400

080058b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ae:	d10a      	bne.n	80059c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a04:	f7fc fc02 	bl	800220c <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d10e      	bne.n	8005a36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f82d 	bl	8005a86 <UART_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e023      	b.n	8005a7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d10e      	bne.n	8005a62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f817 	bl	8005a86 <UART_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e00d      	b.n	8005a7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a96:	e05e      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d05a      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa0:	f7fc fbb4 	bl	800220c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d302      	bcc.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d11b      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ac4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e043      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02c      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0a:	d124      	bne.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b14:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b24:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e00f      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	bf0c      	ite	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	2300      	movne	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d091      	beq.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <__errno>:
 8005b80:	4b01      	ldr	r3, [pc, #4]	; (8005b88 <__errno+0x8>)
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	20000014 	.word	0x20000014

08005b8c <__libc_init_array>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4d0d      	ldr	r5, [pc, #52]	; (8005bc4 <__libc_init_array+0x38>)
 8005b90:	4c0d      	ldr	r4, [pc, #52]	; (8005bc8 <__libc_init_array+0x3c>)
 8005b92:	1b64      	subs	r4, r4, r5
 8005b94:	10a4      	asrs	r4, r4, #2
 8005b96:	2600      	movs	r6, #0
 8005b98:	42a6      	cmp	r6, r4
 8005b9a:	d109      	bne.n	8005bb0 <__libc_init_array+0x24>
 8005b9c:	4d0b      	ldr	r5, [pc, #44]	; (8005bcc <__libc_init_array+0x40>)
 8005b9e:	4c0c      	ldr	r4, [pc, #48]	; (8005bd0 <__libc_init_array+0x44>)
 8005ba0:	f000 fffc 	bl	8006b9c <_init>
 8005ba4:	1b64      	subs	r4, r4, r5
 8005ba6:	10a4      	asrs	r4, r4, #2
 8005ba8:	2600      	movs	r6, #0
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	d105      	bne.n	8005bba <__libc_init_array+0x2e>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb4:	4798      	blx	r3
 8005bb6:	3601      	adds	r6, #1
 8005bb8:	e7ee      	b.n	8005b98 <__libc_init_array+0xc>
 8005bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bbe:	4798      	blx	r3
 8005bc0:	3601      	adds	r6, #1
 8005bc2:	e7f2      	b.n	8005baa <__libc_init_array+0x1e>
 8005bc4:	08008c88 	.word	0x08008c88
 8005bc8:	08008c88 	.word	0x08008c88
 8005bcc:	08008c88 	.word	0x08008c88
 8005bd0:	08008c8c 	.word	0x08008c8c

08005bd4 <malloc>:
 8005bd4:	4b02      	ldr	r3, [pc, #8]	; (8005be0 <malloc+0xc>)
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	f000 b863 	b.w	8005ca4 <_malloc_r>
 8005bde:	bf00      	nop
 8005be0:	20000014 	.word	0x20000014

08005be4 <free>:
 8005be4:	4b02      	ldr	r3, [pc, #8]	; (8005bf0 <free+0xc>)
 8005be6:	4601      	mov	r1, r0
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	f000 b80b 	b.w	8005c04 <_free_r>
 8005bee:	bf00      	nop
 8005bf0:	20000014 	.word	0x20000014

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <_free_r>:
 8005c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d048      	beq.n	8005c9c <_free_r+0x98>
 8005c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c0e:	9001      	str	r0, [sp, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f1a1 0404 	sub.w	r4, r1, #4
 8005c16:	bfb8      	it	lt
 8005c18:	18e4      	addlt	r4, r4, r3
 8005c1a:	f000 fc19 	bl	8006450 <__malloc_lock>
 8005c1e:	4a20      	ldr	r2, [pc, #128]	; (8005ca0 <_free_r+0x9c>)
 8005c20:	9801      	ldr	r0, [sp, #4]
 8005c22:	6813      	ldr	r3, [r2, #0]
 8005c24:	4615      	mov	r5, r2
 8005c26:	b933      	cbnz	r3, 8005c36 <_free_r+0x32>
 8005c28:	6063      	str	r3, [r4, #4]
 8005c2a:	6014      	str	r4, [r2, #0]
 8005c2c:	b003      	add	sp, #12
 8005c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c32:	f000 bc13 	b.w	800645c <__malloc_unlock>
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	d90b      	bls.n	8005c52 <_free_r+0x4e>
 8005c3a:	6821      	ldr	r1, [r4, #0]
 8005c3c:	1862      	adds	r2, r4, r1
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	bf04      	itt	eq
 8005c42:	681a      	ldreq	r2, [r3, #0]
 8005c44:	685b      	ldreq	r3, [r3, #4]
 8005c46:	6063      	str	r3, [r4, #4]
 8005c48:	bf04      	itt	eq
 8005c4a:	1852      	addeq	r2, r2, r1
 8005c4c:	6022      	streq	r2, [r4, #0]
 8005c4e:	602c      	str	r4, [r5, #0]
 8005c50:	e7ec      	b.n	8005c2c <_free_r+0x28>
 8005c52:	461a      	mov	r2, r3
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	b10b      	cbz	r3, 8005c5c <_free_r+0x58>
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	d9fa      	bls.n	8005c52 <_free_r+0x4e>
 8005c5c:	6811      	ldr	r1, [r2, #0]
 8005c5e:	1855      	adds	r5, r2, r1
 8005c60:	42a5      	cmp	r5, r4
 8005c62:	d10b      	bne.n	8005c7c <_free_r+0x78>
 8005c64:	6824      	ldr	r4, [r4, #0]
 8005c66:	4421      	add	r1, r4
 8005c68:	1854      	adds	r4, r2, r1
 8005c6a:	42a3      	cmp	r3, r4
 8005c6c:	6011      	str	r1, [r2, #0]
 8005c6e:	d1dd      	bne.n	8005c2c <_free_r+0x28>
 8005c70:	681c      	ldr	r4, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	6053      	str	r3, [r2, #4]
 8005c76:	4421      	add	r1, r4
 8005c78:	6011      	str	r1, [r2, #0]
 8005c7a:	e7d7      	b.n	8005c2c <_free_r+0x28>
 8005c7c:	d902      	bls.n	8005c84 <_free_r+0x80>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	6003      	str	r3, [r0, #0]
 8005c82:	e7d3      	b.n	8005c2c <_free_r+0x28>
 8005c84:	6825      	ldr	r5, [r4, #0]
 8005c86:	1961      	adds	r1, r4, r5
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	bf04      	itt	eq
 8005c8c:	6819      	ldreq	r1, [r3, #0]
 8005c8e:	685b      	ldreq	r3, [r3, #4]
 8005c90:	6063      	str	r3, [r4, #4]
 8005c92:	bf04      	itt	eq
 8005c94:	1949      	addeq	r1, r1, r5
 8005c96:	6021      	streq	r1, [r4, #0]
 8005c98:	6054      	str	r4, [r2, #4]
 8005c9a:	e7c7      	b.n	8005c2c <_free_r+0x28>
 8005c9c:	b003      	add	sp, #12
 8005c9e:	bd30      	pop	{r4, r5, pc}
 8005ca0:	20000098 	.word	0x20000098

08005ca4 <_malloc_r>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	1ccd      	adds	r5, r1, #3
 8005ca8:	f025 0503 	bic.w	r5, r5, #3
 8005cac:	3508      	adds	r5, #8
 8005cae:	2d0c      	cmp	r5, #12
 8005cb0:	bf38      	it	cc
 8005cb2:	250c      	movcc	r5, #12
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	db01      	blt.n	8005cbe <_malloc_r+0x1a>
 8005cba:	42a9      	cmp	r1, r5
 8005cbc:	d903      	bls.n	8005cc6 <_malloc_r+0x22>
 8005cbe:	230c      	movs	r3, #12
 8005cc0:	6033      	str	r3, [r6, #0]
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc6:	f000 fbc3 	bl	8006450 <__malloc_lock>
 8005cca:	4921      	ldr	r1, [pc, #132]	; (8005d50 <_malloc_r+0xac>)
 8005ccc:	680a      	ldr	r2, [r1, #0]
 8005cce:	4614      	mov	r4, r2
 8005cd0:	b99c      	cbnz	r4, 8005cfa <_malloc_r+0x56>
 8005cd2:	4f20      	ldr	r7, [pc, #128]	; (8005d54 <_malloc_r+0xb0>)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	b923      	cbnz	r3, 8005ce2 <_malloc_r+0x3e>
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f000 f8ca 	bl	8005e74 <_sbrk_r>
 8005ce0:	6038      	str	r0, [r7, #0]
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f000 f8c5 	bl	8005e74 <_sbrk_r>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	d123      	bne.n	8005d36 <_malloc_r+0x92>
 8005cee:	230c      	movs	r3, #12
 8005cf0:	6033      	str	r3, [r6, #0]
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f000 fbb2 	bl	800645c <__malloc_unlock>
 8005cf8:	e7e3      	b.n	8005cc2 <_malloc_r+0x1e>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	1b5b      	subs	r3, r3, r5
 8005cfe:	d417      	bmi.n	8005d30 <_malloc_r+0x8c>
 8005d00:	2b0b      	cmp	r3, #11
 8005d02:	d903      	bls.n	8005d0c <_malloc_r+0x68>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	441c      	add	r4, r3
 8005d08:	6025      	str	r5, [r4, #0]
 8005d0a:	e004      	b.n	8005d16 <_malloc_r+0x72>
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	42a2      	cmp	r2, r4
 8005d10:	bf0c      	ite	eq
 8005d12:	600b      	streq	r3, [r1, #0]
 8005d14:	6053      	strne	r3, [r2, #4]
 8005d16:	4630      	mov	r0, r6
 8005d18:	f000 fba0 	bl	800645c <__malloc_unlock>
 8005d1c:	f104 000b 	add.w	r0, r4, #11
 8005d20:	1d23      	adds	r3, r4, #4
 8005d22:	f020 0007 	bic.w	r0, r0, #7
 8005d26:	1ac2      	subs	r2, r0, r3
 8005d28:	d0cc      	beq.n	8005cc4 <_malloc_r+0x20>
 8005d2a:	1a1b      	subs	r3, r3, r0
 8005d2c:	50a3      	str	r3, [r4, r2]
 8005d2e:	e7c9      	b.n	8005cc4 <_malloc_r+0x20>
 8005d30:	4622      	mov	r2, r4
 8005d32:	6864      	ldr	r4, [r4, #4]
 8005d34:	e7cc      	b.n	8005cd0 <_malloc_r+0x2c>
 8005d36:	1cc4      	adds	r4, r0, #3
 8005d38:	f024 0403 	bic.w	r4, r4, #3
 8005d3c:	42a0      	cmp	r0, r4
 8005d3e:	d0e3      	beq.n	8005d08 <_malloc_r+0x64>
 8005d40:	1a21      	subs	r1, r4, r0
 8005d42:	4630      	mov	r0, r6
 8005d44:	f000 f896 	bl	8005e74 <_sbrk_r>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d1dd      	bne.n	8005d08 <_malloc_r+0x64>
 8005d4c:	e7cf      	b.n	8005cee <_malloc_r+0x4a>
 8005d4e:	bf00      	nop
 8005d50:	20000098 	.word	0x20000098
 8005d54:	2000009c 	.word	0x2000009c

08005d58 <iprintf>:
 8005d58:	b40f      	push	{r0, r1, r2, r3}
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <iprintf+0x2c>)
 8005d5c:	b513      	push	{r0, r1, r4, lr}
 8005d5e:	681c      	ldr	r4, [r3, #0]
 8005d60:	b124      	cbz	r4, 8005d6c <iprintf+0x14>
 8005d62:	69a3      	ldr	r3, [r4, #24]
 8005d64:	b913      	cbnz	r3, 8005d6c <iprintf+0x14>
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 fa6e 	bl	8006248 <__sinit>
 8005d6c:	ab05      	add	r3, sp, #20
 8005d6e:	9a04      	ldr	r2, [sp, #16]
 8005d70:	68a1      	ldr	r1, [r4, #8]
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 fba1 	bl	80064bc <_vfiprintf_r>
 8005d7a:	b002      	add	sp, #8
 8005d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d80:	b004      	add	sp, #16
 8005d82:	4770      	bx	lr
 8005d84:	20000014 	.word	0x20000014

08005d88 <_puts_r>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	460e      	mov	r6, r1
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	b118      	cbz	r0, 8005d98 <_puts_r+0x10>
 8005d90:	6983      	ldr	r3, [r0, #24]
 8005d92:	b90b      	cbnz	r3, 8005d98 <_puts_r+0x10>
 8005d94:	f000 fa58 	bl	8006248 <__sinit>
 8005d98:	69ab      	ldr	r3, [r5, #24]
 8005d9a:	68ac      	ldr	r4, [r5, #8]
 8005d9c:	b913      	cbnz	r3, 8005da4 <_puts_r+0x1c>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 fa52 	bl	8006248 <__sinit>
 8005da4:	4b2c      	ldr	r3, [pc, #176]	; (8005e58 <_puts_r+0xd0>)
 8005da6:	429c      	cmp	r4, r3
 8005da8:	d120      	bne.n	8005dec <_puts_r+0x64>
 8005daa:	686c      	ldr	r4, [r5, #4]
 8005dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dae:	07db      	lsls	r3, r3, #31
 8005db0:	d405      	bmi.n	8005dbe <_puts_r+0x36>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	0598      	lsls	r0, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_puts_r+0x36>
 8005db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dba:	f000 fae3 	bl	8006384 <__retarget_lock_acquire_recursive>
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	0719      	lsls	r1, r3, #28
 8005dc2:	d51d      	bpl.n	8005e00 <_puts_r+0x78>
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	b1db      	cbz	r3, 8005e00 <_puts_r+0x78>
 8005dc8:	3e01      	subs	r6, #1
 8005dca:	68a3      	ldr	r3, [r4, #8]
 8005dcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	60a3      	str	r3, [r4, #8]
 8005dd4:	bb39      	cbnz	r1, 8005e26 <_puts_r+0x9e>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da38      	bge.n	8005e4c <_puts_r+0xc4>
 8005dda:	4622      	mov	r2, r4
 8005ddc:	210a      	movs	r1, #10
 8005dde:	4628      	mov	r0, r5
 8005de0:	f000 f858 	bl	8005e94 <__swbuf_r>
 8005de4:	3001      	adds	r0, #1
 8005de6:	d011      	beq.n	8005e0c <_puts_r+0x84>
 8005de8:	250a      	movs	r5, #10
 8005dea:	e011      	b.n	8005e10 <_puts_r+0x88>
 8005dec:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <_puts_r+0xd4>)
 8005dee:	429c      	cmp	r4, r3
 8005df0:	d101      	bne.n	8005df6 <_puts_r+0x6e>
 8005df2:	68ac      	ldr	r4, [r5, #8]
 8005df4:	e7da      	b.n	8005dac <_puts_r+0x24>
 8005df6:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <_puts_r+0xd8>)
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	bf08      	it	eq
 8005dfc:	68ec      	ldreq	r4, [r5, #12]
 8005dfe:	e7d5      	b.n	8005dac <_puts_r+0x24>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f898 	bl	8005f38 <__swsetup_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d0dd      	beq.n	8005dc8 <_puts_r+0x40>
 8005e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8005e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e12:	07da      	lsls	r2, r3, #31
 8005e14:	d405      	bmi.n	8005e22 <_puts_r+0x9a>
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	059b      	lsls	r3, r3, #22
 8005e1a:	d402      	bmi.n	8005e22 <_puts_r+0x9a>
 8005e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e1e:	f000 fab2 	bl	8006386 <__retarget_lock_release_recursive>
 8005e22:	4628      	mov	r0, r5
 8005e24:	bd70      	pop	{r4, r5, r6, pc}
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da04      	bge.n	8005e34 <_puts_r+0xac>
 8005e2a:	69a2      	ldr	r2, [r4, #24]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	dc06      	bgt.n	8005e3e <_puts_r+0xb6>
 8005e30:	290a      	cmp	r1, #10
 8005e32:	d004      	beq.n	8005e3e <_puts_r+0xb6>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	6022      	str	r2, [r4, #0]
 8005e3a:	7019      	strb	r1, [r3, #0]
 8005e3c:	e7c5      	b.n	8005dca <_puts_r+0x42>
 8005e3e:	4622      	mov	r2, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 f827 	bl	8005e94 <__swbuf_r>
 8005e46:	3001      	adds	r0, #1
 8005e48:	d1bf      	bne.n	8005dca <_puts_r+0x42>
 8005e4a:	e7df      	b.n	8005e0c <_puts_r+0x84>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	250a      	movs	r5, #10
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	701d      	strb	r5, [r3, #0]
 8005e56:	e7db      	b.n	8005e10 <_puts_r+0x88>
 8005e58:	08008c0c 	.word	0x08008c0c
 8005e5c:	08008c2c 	.word	0x08008c2c
 8005e60:	08008bec 	.word	0x08008bec

08005e64 <puts>:
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <puts+0xc>)
 8005e66:	4601      	mov	r1, r0
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	f7ff bf8d 	b.w	8005d88 <_puts_r>
 8005e6e:	bf00      	nop
 8005e70:	20000014 	.word	0x20000014

08005e74 <_sbrk_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d06      	ldr	r5, [pc, #24]	; (8005e90 <_sbrk_r+0x1c>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	f7fc f8c2 	bl	8002008 <_sbrk>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_sbrk_r+0x1a>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_sbrk_r+0x1a>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	20000214 	.word	0x20000214

08005e94 <__swbuf_r>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	460e      	mov	r6, r1
 8005e98:	4614      	mov	r4, r2
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	b118      	cbz	r0, 8005ea6 <__swbuf_r+0x12>
 8005e9e:	6983      	ldr	r3, [r0, #24]
 8005ea0:	b90b      	cbnz	r3, 8005ea6 <__swbuf_r+0x12>
 8005ea2:	f000 f9d1 	bl	8006248 <__sinit>
 8005ea6:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <__swbuf_r+0x98>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	d12b      	bne.n	8005f04 <__swbuf_r+0x70>
 8005eac:	686c      	ldr	r4, [r5, #4]
 8005eae:	69a3      	ldr	r3, [r4, #24]
 8005eb0:	60a3      	str	r3, [r4, #8]
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	071a      	lsls	r2, r3, #28
 8005eb6:	d52f      	bpl.n	8005f18 <__swbuf_r+0x84>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	b36b      	cbz	r3, 8005f18 <__swbuf_r+0x84>
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	6820      	ldr	r0, [r4, #0]
 8005ec0:	1ac0      	subs	r0, r0, r3
 8005ec2:	6963      	ldr	r3, [r4, #20]
 8005ec4:	b2f6      	uxtb	r6, r6
 8005ec6:	4283      	cmp	r3, r0
 8005ec8:	4637      	mov	r7, r6
 8005eca:	dc04      	bgt.n	8005ed6 <__swbuf_r+0x42>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f926 	bl	8006120 <_fflush_r>
 8005ed4:	bb30      	cbnz	r0, 8005f24 <__swbuf_r+0x90>
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	60a3      	str	r3, [r4, #8]
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	6022      	str	r2, [r4, #0]
 8005ee2:	701e      	strb	r6, [r3, #0]
 8005ee4:	6963      	ldr	r3, [r4, #20]
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	4283      	cmp	r3, r0
 8005eea:	d004      	beq.n	8005ef6 <__swbuf_r+0x62>
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	07db      	lsls	r3, r3, #31
 8005ef0:	d506      	bpl.n	8005f00 <__swbuf_r+0x6c>
 8005ef2:	2e0a      	cmp	r6, #10
 8005ef4:	d104      	bne.n	8005f00 <__swbuf_r+0x6c>
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 f911 	bl	8006120 <_fflush_r>
 8005efe:	b988      	cbnz	r0, 8005f24 <__swbuf_r+0x90>
 8005f00:	4638      	mov	r0, r7
 8005f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <__swbuf_r+0x9c>)
 8005f06:	429c      	cmp	r4, r3
 8005f08:	d101      	bne.n	8005f0e <__swbuf_r+0x7a>
 8005f0a:	68ac      	ldr	r4, [r5, #8]
 8005f0c:	e7cf      	b.n	8005eae <__swbuf_r+0x1a>
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <__swbuf_r+0xa0>)
 8005f10:	429c      	cmp	r4, r3
 8005f12:	bf08      	it	eq
 8005f14:	68ec      	ldreq	r4, [r5, #12]
 8005f16:	e7ca      	b.n	8005eae <__swbuf_r+0x1a>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 f80c 	bl	8005f38 <__swsetup_r>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d0cb      	beq.n	8005ebc <__swbuf_r+0x28>
 8005f24:	f04f 37ff 	mov.w	r7, #4294967295
 8005f28:	e7ea      	b.n	8005f00 <__swbuf_r+0x6c>
 8005f2a:	bf00      	nop
 8005f2c:	08008c0c 	.word	0x08008c0c
 8005f30:	08008c2c 	.word	0x08008c2c
 8005f34:	08008bec 	.word	0x08008bec

08005f38 <__swsetup_r>:
 8005f38:	4b32      	ldr	r3, [pc, #200]	; (8006004 <__swsetup_r+0xcc>)
 8005f3a:	b570      	push	{r4, r5, r6, lr}
 8005f3c:	681d      	ldr	r5, [r3, #0]
 8005f3e:	4606      	mov	r6, r0
 8005f40:	460c      	mov	r4, r1
 8005f42:	b125      	cbz	r5, 8005f4e <__swsetup_r+0x16>
 8005f44:	69ab      	ldr	r3, [r5, #24]
 8005f46:	b913      	cbnz	r3, 8005f4e <__swsetup_r+0x16>
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 f97d 	bl	8006248 <__sinit>
 8005f4e:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <__swsetup_r+0xd0>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	d10f      	bne.n	8005f74 <__swsetup_r+0x3c>
 8005f54:	686c      	ldr	r4, [r5, #4]
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f5c:	0719      	lsls	r1, r3, #28
 8005f5e:	d42c      	bmi.n	8005fba <__swsetup_r+0x82>
 8005f60:	06dd      	lsls	r5, r3, #27
 8005f62:	d411      	bmi.n	8005f88 <__swsetup_r+0x50>
 8005f64:	2309      	movs	r3, #9
 8005f66:	6033      	str	r3, [r6, #0]
 8005f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	e03e      	b.n	8005ff2 <__swsetup_r+0xba>
 8005f74:	4b25      	ldr	r3, [pc, #148]	; (800600c <__swsetup_r+0xd4>)
 8005f76:	429c      	cmp	r4, r3
 8005f78:	d101      	bne.n	8005f7e <__swsetup_r+0x46>
 8005f7a:	68ac      	ldr	r4, [r5, #8]
 8005f7c:	e7eb      	b.n	8005f56 <__swsetup_r+0x1e>
 8005f7e:	4b24      	ldr	r3, [pc, #144]	; (8006010 <__swsetup_r+0xd8>)
 8005f80:	429c      	cmp	r4, r3
 8005f82:	bf08      	it	eq
 8005f84:	68ec      	ldreq	r4, [r5, #12]
 8005f86:	e7e6      	b.n	8005f56 <__swsetup_r+0x1e>
 8005f88:	0758      	lsls	r0, r3, #29
 8005f8a:	d512      	bpl.n	8005fb2 <__swsetup_r+0x7a>
 8005f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f8e:	b141      	cbz	r1, 8005fa2 <__swsetup_r+0x6a>
 8005f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f94:	4299      	cmp	r1, r3
 8005f96:	d002      	beq.n	8005f9e <__swsetup_r+0x66>
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f7ff fe33 	bl	8005c04 <_free_r>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fa8:	81a3      	strh	r3, [r4, #12]
 8005faa:	2300      	movs	r3, #0
 8005fac:	6063      	str	r3, [r4, #4]
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	f043 0308 	orr.w	r3, r3, #8
 8005fb8:	81a3      	strh	r3, [r4, #12]
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	b94b      	cbnz	r3, 8005fd2 <__swsetup_r+0x9a>
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc8:	d003      	beq.n	8005fd2 <__swsetup_r+0x9a>
 8005fca:	4621      	mov	r1, r4
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 f9ff 	bl	80063d0 <__smakebuf_r>
 8005fd2:	89a0      	ldrh	r0, [r4, #12]
 8005fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fd8:	f010 0301 	ands.w	r3, r0, #1
 8005fdc:	d00a      	beq.n	8005ff4 <__swsetup_r+0xbc>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60a3      	str	r3, [r4, #8]
 8005fe2:	6963      	ldr	r3, [r4, #20]
 8005fe4:	425b      	negs	r3, r3
 8005fe6:	61a3      	str	r3, [r4, #24]
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	b943      	cbnz	r3, 8005ffe <__swsetup_r+0xc6>
 8005fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ff0:	d1ba      	bne.n	8005f68 <__swsetup_r+0x30>
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	0781      	lsls	r1, r0, #30
 8005ff6:	bf58      	it	pl
 8005ff8:	6963      	ldrpl	r3, [r4, #20]
 8005ffa:	60a3      	str	r3, [r4, #8]
 8005ffc:	e7f4      	b.n	8005fe8 <__swsetup_r+0xb0>
 8005ffe:	2000      	movs	r0, #0
 8006000:	e7f7      	b.n	8005ff2 <__swsetup_r+0xba>
 8006002:	bf00      	nop
 8006004:	20000014 	.word	0x20000014
 8006008:	08008c0c 	.word	0x08008c0c
 800600c:	08008c2c 	.word	0x08008c2c
 8006010:	08008bec 	.word	0x08008bec

08006014 <__sflush_r>:
 8006014:	898a      	ldrh	r2, [r1, #12]
 8006016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601a:	4605      	mov	r5, r0
 800601c:	0710      	lsls	r0, r2, #28
 800601e:	460c      	mov	r4, r1
 8006020:	d458      	bmi.n	80060d4 <__sflush_r+0xc0>
 8006022:	684b      	ldr	r3, [r1, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	dc05      	bgt.n	8006034 <__sflush_r+0x20>
 8006028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	dc02      	bgt.n	8006034 <__sflush_r+0x20>
 800602e:	2000      	movs	r0, #0
 8006030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006036:	2e00      	cmp	r6, #0
 8006038:	d0f9      	beq.n	800602e <__sflush_r+0x1a>
 800603a:	2300      	movs	r3, #0
 800603c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006040:	682f      	ldr	r7, [r5, #0]
 8006042:	602b      	str	r3, [r5, #0]
 8006044:	d032      	beq.n	80060ac <__sflush_r+0x98>
 8006046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	075a      	lsls	r2, r3, #29
 800604c:	d505      	bpl.n	800605a <__sflush_r+0x46>
 800604e:	6863      	ldr	r3, [r4, #4]
 8006050:	1ac0      	subs	r0, r0, r3
 8006052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006054:	b10b      	cbz	r3, 800605a <__sflush_r+0x46>
 8006056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006058:	1ac0      	subs	r0, r0, r3
 800605a:	2300      	movs	r3, #0
 800605c:	4602      	mov	r2, r0
 800605e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006060:	6a21      	ldr	r1, [r4, #32]
 8006062:	4628      	mov	r0, r5
 8006064:	47b0      	blx	r6
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	d106      	bne.n	800607a <__sflush_r+0x66>
 800606c:	6829      	ldr	r1, [r5, #0]
 800606e:	291d      	cmp	r1, #29
 8006070:	d82c      	bhi.n	80060cc <__sflush_r+0xb8>
 8006072:	4a2a      	ldr	r2, [pc, #168]	; (800611c <__sflush_r+0x108>)
 8006074:	40ca      	lsrs	r2, r1
 8006076:	07d6      	lsls	r6, r2, #31
 8006078:	d528      	bpl.n	80060cc <__sflush_r+0xb8>
 800607a:	2200      	movs	r2, #0
 800607c:	6062      	str	r2, [r4, #4]
 800607e:	04d9      	lsls	r1, r3, #19
 8006080:	6922      	ldr	r2, [r4, #16]
 8006082:	6022      	str	r2, [r4, #0]
 8006084:	d504      	bpl.n	8006090 <__sflush_r+0x7c>
 8006086:	1c42      	adds	r2, r0, #1
 8006088:	d101      	bne.n	800608e <__sflush_r+0x7a>
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	b903      	cbnz	r3, 8006090 <__sflush_r+0x7c>
 800608e:	6560      	str	r0, [r4, #84]	; 0x54
 8006090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006092:	602f      	str	r7, [r5, #0]
 8006094:	2900      	cmp	r1, #0
 8006096:	d0ca      	beq.n	800602e <__sflush_r+0x1a>
 8006098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800609c:	4299      	cmp	r1, r3
 800609e:	d002      	beq.n	80060a6 <__sflush_r+0x92>
 80060a0:	4628      	mov	r0, r5
 80060a2:	f7ff fdaf 	bl	8005c04 <_free_r>
 80060a6:	2000      	movs	r0, #0
 80060a8:	6360      	str	r0, [r4, #52]	; 0x34
 80060aa:	e7c1      	b.n	8006030 <__sflush_r+0x1c>
 80060ac:	6a21      	ldr	r1, [r4, #32]
 80060ae:	2301      	movs	r3, #1
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b0      	blx	r6
 80060b4:	1c41      	adds	r1, r0, #1
 80060b6:	d1c7      	bne.n	8006048 <__sflush_r+0x34>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0c4      	beq.n	8006048 <__sflush_r+0x34>
 80060be:	2b1d      	cmp	r3, #29
 80060c0:	d001      	beq.n	80060c6 <__sflush_r+0xb2>
 80060c2:	2b16      	cmp	r3, #22
 80060c4:	d101      	bne.n	80060ca <__sflush_r+0xb6>
 80060c6:	602f      	str	r7, [r5, #0]
 80060c8:	e7b1      	b.n	800602e <__sflush_r+0x1a>
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	e7ad      	b.n	8006030 <__sflush_r+0x1c>
 80060d4:	690f      	ldr	r7, [r1, #16]
 80060d6:	2f00      	cmp	r7, #0
 80060d8:	d0a9      	beq.n	800602e <__sflush_r+0x1a>
 80060da:	0793      	lsls	r3, r2, #30
 80060dc:	680e      	ldr	r6, [r1, #0]
 80060de:	bf08      	it	eq
 80060e0:	694b      	ldreq	r3, [r1, #20]
 80060e2:	600f      	str	r7, [r1, #0]
 80060e4:	bf18      	it	ne
 80060e6:	2300      	movne	r3, #0
 80060e8:	eba6 0807 	sub.w	r8, r6, r7
 80060ec:	608b      	str	r3, [r1, #8]
 80060ee:	f1b8 0f00 	cmp.w	r8, #0
 80060f2:	dd9c      	ble.n	800602e <__sflush_r+0x1a>
 80060f4:	6a21      	ldr	r1, [r4, #32]
 80060f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060f8:	4643      	mov	r3, r8
 80060fa:	463a      	mov	r2, r7
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b0      	blx	r6
 8006100:	2800      	cmp	r0, #0
 8006102:	dc06      	bgt.n	8006112 <__sflush_r+0xfe>
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	e78e      	b.n	8006030 <__sflush_r+0x1c>
 8006112:	4407      	add	r7, r0
 8006114:	eba8 0800 	sub.w	r8, r8, r0
 8006118:	e7e9      	b.n	80060ee <__sflush_r+0xda>
 800611a:	bf00      	nop
 800611c:	20400001 	.word	0x20400001

08006120 <_fflush_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	690b      	ldr	r3, [r1, #16]
 8006124:	4605      	mov	r5, r0
 8006126:	460c      	mov	r4, r1
 8006128:	b913      	cbnz	r3, 8006130 <_fflush_r+0x10>
 800612a:	2500      	movs	r5, #0
 800612c:	4628      	mov	r0, r5
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	b118      	cbz	r0, 800613a <_fflush_r+0x1a>
 8006132:	6983      	ldr	r3, [r0, #24]
 8006134:	b90b      	cbnz	r3, 800613a <_fflush_r+0x1a>
 8006136:	f000 f887 	bl	8006248 <__sinit>
 800613a:	4b14      	ldr	r3, [pc, #80]	; (800618c <_fflush_r+0x6c>)
 800613c:	429c      	cmp	r4, r3
 800613e:	d11b      	bne.n	8006178 <_fflush_r+0x58>
 8006140:	686c      	ldr	r4, [r5, #4]
 8006142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0ef      	beq.n	800612a <_fflush_r+0xa>
 800614a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800614c:	07d0      	lsls	r0, r2, #31
 800614e:	d404      	bmi.n	800615a <_fflush_r+0x3a>
 8006150:	0599      	lsls	r1, r3, #22
 8006152:	d402      	bmi.n	800615a <_fflush_r+0x3a>
 8006154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006156:	f000 f915 	bl	8006384 <__retarget_lock_acquire_recursive>
 800615a:	4628      	mov	r0, r5
 800615c:	4621      	mov	r1, r4
 800615e:	f7ff ff59 	bl	8006014 <__sflush_r>
 8006162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006164:	07da      	lsls	r2, r3, #31
 8006166:	4605      	mov	r5, r0
 8006168:	d4e0      	bmi.n	800612c <_fflush_r+0xc>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	059b      	lsls	r3, r3, #22
 800616e:	d4dd      	bmi.n	800612c <_fflush_r+0xc>
 8006170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006172:	f000 f908 	bl	8006386 <__retarget_lock_release_recursive>
 8006176:	e7d9      	b.n	800612c <_fflush_r+0xc>
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <_fflush_r+0x70>)
 800617a:	429c      	cmp	r4, r3
 800617c:	d101      	bne.n	8006182 <_fflush_r+0x62>
 800617e:	68ac      	ldr	r4, [r5, #8]
 8006180:	e7df      	b.n	8006142 <_fflush_r+0x22>
 8006182:	4b04      	ldr	r3, [pc, #16]	; (8006194 <_fflush_r+0x74>)
 8006184:	429c      	cmp	r4, r3
 8006186:	bf08      	it	eq
 8006188:	68ec      	ldreq	r4, [r5, #12]
 800618a:	e7da      	b.n	8006142 <_fflush_r+0x22>
 800618c:	08008c0c 	.word	0x08008c0c
 8006190:	08008c2c 	.word	0x08008c2c
 8006194:	08008bec 	.word	0x08008bec

08006198 <std>:
 8006198:	2300      	movs	r3, #0
 800619a:	b510      	push	{r4, lr}
 800619c:	4604      	mov	r4, r0
 800619e:	e9c0 3300 	strd	r3, r3, [r0]
 80061a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061a6:	6083      	str	r3, [r0, #8]
 80061a8:	8181      	strh	r1, [r0, #12]
 80061aa:	6643      	str	r3, [r0, #100]	; 0x64
 80061ac:	81c2      	strh	r2, [r0, #14]
 80061ae:	6183      	str	r3, [r0, #24]
 80061b0:	4619      	mov	r1, r3
 80061b2:	2208      	movs	r2, #8
 80061b4:	305c      	adds	r0, #92	; 0x5c
 80061b6:	f7ff fd1d 	bl	8005bf4 <memset>
 80061ba:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <std+0x38>)
 80061bc:	6263      	str	r3, [r4, #36]	; 0x24
 80061be:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <std+0x3c>)
 80061c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061c2:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <std+0x40>)
 80061c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <std+0x44>)
 80061c8:	6224      	str	r4, [r4, #32]
 80061ca:	6323      	str	r3, [r4, #48]	; 0x30
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	bf00      	nop
 80061d0:	08006a45 	.word	0x08006a45
 80061d4:	08006a67 	.word	0x08006a67
 80061d8:	08006a9f 	.word	0x08006a9f
 80061dc:	08006ac3 	.word	0x08006ac3

080061e0 <_cleanup_r>:
 80061e0:	4901      	ldr	r1, [pc, #4]	; (80061e8 <_cleanup_r+0x8>)
 80061e2:	f000 b8af 	b.w	8006344 <_fwalk_reent>
 80061e6:	bf00      	nop
 80061e8:	08006121 	.word	0x08006121

080061ec <__sfmoreglue>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	1e4a      	subs	r2, r1, #1
 80061f0:	2568      	movs	r5, #104	; 0x68
 80061f2:	4355      	muls	r5, r2
 80061f4:	460e      	mov	r6, r1
 80061f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061fa:	f7ff fd53 	bl	8005ca4 <_malloc_r>
 80061fe:	4604      	mov	r4, r0
 8006200:	b140      	cbz	r0, 8006214 <__sfmoreglue+0x28>
 8006202:	2100      	movs	r1, #0
 8006204:	e9c0 1600 	strd	r1, r6, [r0]
 8006208:	300c      	adds	r0, #12
 800620a:	60a0      	str	r0, [r4, #8]
 800620c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006210:	f7ff fcf0 	bl	8005bf4 <memset>
 8006214:	4620      	mov	r0, r4
 8006216:	bd70      	pop	{r4, r5, r6, pc}

08006218 <__sfp_lock_acquire>:
 8006218:	4801      	ldr	r0, [pc, #4]	; (8006220 <__sfp_lock_acquire+0x8>)
 800621a:	f000 b8b3 	b.w	8006384 <__retarget_lock_acquire_recursive>
 800621e:	bf00      	nop
 8006220:	20000210 	.word	0x20000210

08006224 <__sfp_lock_release>:
 8006224:	4801      	ldr	r0, [pc, #4]	; (800622c <__sfp_lock_release+0x8>)
 8006226:	f000 b8ae 	b.w	8006386 <__retarget_lock_release_recursive>
 800622a:	bf00      	nop
 800622c:	20000210 	.word	0x20000210

08006230 <__sinit_lock_acquire>:
 8006230:	4801      	ldr	r0, [pc, #4]	; (8006238 <__sinit_lock_acquire+0x8>)
 8006232:	f000 b8a7 	b.w	8006384 <__retarget_lock_acquire_recursive>
 8006236:	bf00      	nop
 8006238:	2000020b 	.word	0x2000020b

0800623c <__sinit_lock_release>:
 800623c:	4801      	ldr	r0, [pc, #4]	; (8006244 <__sinit_lock_release+0x8>)
 800623e:	f000 b8a2 	b.w	8006386 <__retarget_lock_release_recursive>
 8006242:	bf00      	nop
 8006244:	2000020b 	.word	0x2000020b

08006248 <__sinit>:
 8006248:	b510      	push	{r4, lr}
 800624a:	4604      	mov	r4, r0
 800624c:	f7ff fff0 	bl	8006230 <__sinit_lock_acquire>
 8006250:	69a3      	ldr	r3, [r4, #24]
 8006252:	b11b      	cbz	r3, 800625c <__sinit+0x14>
 8006254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006258:	f7ff bff0 	b.w	800623c <__sinit_lock_release>
 800625c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006260:	6523      	str	r3, [r4, #80]	; 0x50
 8006262:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <__sinit+0x68>)
 8006264:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <__sinit+0x6c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	62a2      	str	r2, [r4, #40]	; 0x28
 800626a:	42a3      	cmp	r3, r4
 800626c:	bf04      	itt	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	61a3      	streq	r3, [r4, #24]
 8006272:	4620      	mov	r0, r4
 8006274:	f000 f820 	bl	80062b8 <__sfp>
 8006278:	6060      	str	r0, [r4, #4]
 800627a:	4620      	mov	r0, r4
 800627c:	f000 f81c 	bl	80062b8 <__sfp>
 8006280:	60a0      	str	r0, [r4, #8]
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f818 	bl	80062b8 <__sfp>
 8006288:	2200      	movs	r2, #0
 800628a:	60e0      	str	r0, [r4, #12]
 800628c:	2104      	movs	r1, #4
 800628e:	6860      	ldr	r0, [r4, #4]
 8006290:	f7ff ff82 	bl	8006198 <std>
 8006294:	68a0      	ldr	r0, [r4, #8]
 8006296:	2201      	movs	r2, #1
 8006298:	2109      	movs	r1, #9
 800629a:	f7ff ff7d 	bl	8006198 <std>
 800629e:	68e0      	ldr	r0, [r4, #12]
 80062a0:	2202      	movs	r2, #2
 80062a2:	2112      	movs	r1, #18
 80062a4:	f7ff ff78 	bl	8006198 <std>
 80062a8:	2301      	movs	r3, #1
 80062aa:	61a3      	str	r3, [r4, #24]
 80062ac:	e7d2      	b.n	8006254 <__sinit+0xc>
 80062ae:	bf00      	nop
 80062b0:	08008be8 	.word	0x08008be8
 80062b4:	080061e1 	.word	0x080061e1

080062b8 <__sfp>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	4607      	mov	r7, r0
 80062bc:	f7ff ffac 	bl	8006218 <__sfp_lock_acquire>
 80062c0:	4b1e      	ldr	r3, [pc, #120]	; (800633c <__sfp+0x84>)
 80062c2:	681e      	ldr	r6, [r3, #0]
 80062c4:	69b3      	ldr	r3, [r6, #24]
 80062c6:	b913      	cbnz	r3, 80062ce <__sfp+0x16>
 80062c8:	4630      	mov	r0, r6
 80062ca:	f7ff ffbd 	bl	8006248 <__sinit>
 80062ce:	3648      	adds	r6, #72	; 0x48
 80062d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	d503      	bpl.n	80062e0 <__sfp+0x28>
 80062d8:	6833      	ldr	r3, [r6, #0]
 80062da:	b30b      	cbz	r3, 8006320 <__sfp+0x68>
 80062dc:	6836      	ldr	r6, [r6, #0]
 80062de:	e7f7      	b.n	80062d0 <__sfp+0x18>
 80062e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062e4:	b9d5      	cbnz	r5, 800631c <__sfp+0x64>
 80062e6:	4b16      	ldr	r3, [pc, #88]	; (8006340 <__sfp+0x88>)
 80062e8:	60e3      	str	r3, [r4, #12]
 80062ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062ee:	6665      	str	r5, [r4, #100]	; 0x64
 80062f0:	f000 f847 	bl	8006382 <__retarget_lock_init_recursive>
 80062f4:	f7ff ff96 	bl	8006224 <__sfp_lock_release>
 80062f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006300:	6025      	str	r5, [r4, #0]
 8006302:	61a5      	str	r5, [r4, #24]
 8006304:	2208      	movs	r2, #8
 8006306:	4629      	mov	r1, r5
 8006308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800630c:	f7ff fc72 	bl	8005bf4 <memset>
 8006310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006318:	4620      	mov	r0, r4
 800631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800631c:	3468      	adds	r4, #104	; 0x68
 800631e:	e7d9      	b.n	80062d4 <__sfp+0x1c>
 8006320:	2104      	movs	r1, #4
 8006322:	4638      	mov	r0, r7
 8006324:	f7ff ff62 	bl	80061ec <__sfmoreglue>
 8006328:	4604      	mov	r4, r0
 800632a:	6030      	str	r0, [r6, #0]
 800632c:	2800      	cmp	r0, #0
 800632e:	d1d5      	bne.n	80062dc <__sfp+0x24>
 8006330:	f7ff ff78 	bl	8006224 <__sfp_lock_release>
 8006334:	230c      	movs	r3, #12
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	e7ee      	b.n	8006318 <__sfp+0x60>
 800633a:	bf00      	nop
 800633c:	08008be8 	.word	0x08008be8
 8006340:	ffff0001 	.word	0xffff0001

08006344 <_fwalk_reent>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	4606      	mov	r6, r0
 800634a:	4688      	mov	r8, r1
 800634c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006350:	2700      	movs	r7, #0
 8006352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006356:	f1b9 0901 	subs.w	r9, r9, #1
 800635a:	d505      	bpl.n	8006368 <_fwalk_reent+0x24>
 800635c:	6824      	ldr	r4, [r4, #0]
 800635e:	2c00      	cmp	r4, #0
 8006360:	d1f7      	bne.n	8006352 <_fwalk_reent+0xe>
 8006362:	4638      	mov	r0, r7
 8006364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006368:	89ab      	ldrh	r3, [r5, #12]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d907      	bls.n	800637e <_fwalk_reent+0x3a>
 800636e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006372:	3301      	adds	r3, #1
 8006374:	d003      	beq.n	800637e <_fwalk_reent+0x3a>
 8006376:	4629      	mov	r1, r5
 8006378:	4630      	mov	r0, r6
 800637a:	47c0      	blx	r8
 800637c:	4307      	orrs	r7, r0
 800637e:	3568      	adds	r5, #104	; 0x68
 8006380:	e7e9      	b.n	8006356 <_fwalk_reent+0x12>

08006382 <__retarget_lock_init_recursive>:
 8006382:	4770      	bx	lr

08006384 <__retarget_lock_acquire_recursive>:
 8006384:	4770      	bx	lr

08006386 <__retarget_lock_release_recursive>:
 8006386:	4770      	bx	lr

08006388 <__swhatbuf_r>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	460e      	mov	r6, r1
 800638c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006390:	2900      	cmp	r1, #0
 8006392:	b096      	sub	sp, #88	; 0x58
 8006394:	4614      	mov	r4, r2
 8006396:	461d      	mov	r5, r3
 8006398:	da07      	bge.n	80063aa <__swhatbuf_r+0x22>
 800639a:	2300      	movs	r3, #0
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	89b3      	ldrh	r3, [r6, #12]
 80063a0:	061a      	lsls	r2, r3, #24
 80063a2:	d410      	bmi.n	80063c6 <__swhatbuf_r+0x3e>
 80063a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063a8:	e00e      	b.n	80063c8 <__swhatbuf_r+0x40>
 80063aa:	466a      	mov	r2, sp
 80063ac:	f000 fbb0 	bl	8006b10 <_fstat_r>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	dbf2      	blt.n	800639a <__swhatbuf_r+0x12>
 80063b4:	9a01      	ldr	r2, [sp, #4]
 80063b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063be:	425a      	negs	r2, r3
 80063c0:	415a      	adcs	r2, r3
 80063c2:	602a      	str	r2, [r5, #0]
 80063c4:	e7ee      	b.n	80063a4 <__swhatbuf_r+0x1c>
 80063c6:	2340      	movs	r3, #64	; 0x40
 80063c8:	2000      	movs	r0, #0
 80063ca:	6023      	str	r3, [r4, #0]
 80063cc:	b016      	add	sp, #88	; 0x58
 80063ce:	bd70      	pop	{r4, r5, r6, pc}

080063d0 <__smakebuf_r>:
 80063d0:	898b      	ldrh	r3, [r1, #12]
 80063d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063d4:	079d      	lsls	r5, r3, #30
 80063d6:	4606      	mov	r6, r0
 80063d8:	460c      	mov	r4, r1
 80063da:	d507      	bpl.n	80063ec <__smakebuf_r+0x1c>
 80063dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	2301      	movs	r3, #1
 80063e6:	6163      	str	r3, [r4, #20]
 80063e8:	b002      	add	sp, #8
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	ab01      	add	r3, sp, #4
 80063ee:	466a      	mov	r2, sp
 80063f0:	f7ff ffca 	bl	8006388 <__swhatbuf_r>
 80063f4:	9900      	ldr	r1, [sp, #0]
 80063f6:	4605      	mov	r5, r0
 80063f8:	4630      	mov	r0, r6
 80063fa:	f7ff fc53 	bl	8005ca4 <_malloc_r>
 80063fe:	b948      	cbnz	r0, 8006414 <__smakebuf_r+0x44>
 8006400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006404:	059a      	lsls	r2, r3, #22
 8006406:	d4ef      	bmi.n	80063e8 <__smakebuf_r+0x18>
 8006408:	f023 0303 	bic.w	r3, r3, #3
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	e7e3      	b.n	80063dc <__smakebuf_r+0xc>
 8006414:	4b0d      	ldr	r3, [pc, #52]	; (800644c <__smakebuf_r+0x7c>)
 8006416:	62b3      	str	r3, [r6, #40]	; 0x28
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	6020      	str	r0, [r4, #0]
 800641c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	9b00      	ldr	r3, [sp, #0]
 8006424:	6163      	str	r3, [r4, #20]
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	6120      	str	r0, [r4, #16]
 800642a:	b15b      	cbz	r3, 8006444 <__smakebuf_r+0x74>
 800642c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006430:	4630      	mov	r0, r6
 8006432:	f000 fb7f 	bl	8006b34 <_isatty_r>
 8006436:	b128      	cbz	r0, 8006444 <__smakebuf_r+0x74>
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	f023 0303 	bic.w	r3, r3, #3
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	81a3      	strh	r3, [r4, #12]
 8006444:	89a0      	ldrh	r0, [r4, #12]
 8006446:	4305      	orrs	r5, r0
 8006448:	81a5      	strh	r5, [r4, #12]
 800644a:	e7cd      	b.n	80063e8 <__smakebuf_r+0x18>
 800644c:	080061e1 	.word	0x080061e1

08006450 <__malloc_lock>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__malloc_lock+0x8>)
 8006452:	f7ff bf97 	b.w	8006384 <__retarget_lock_acquire_recursive>
 8006456:	bf00      	nop
 8006458:	2000020c 	.word	0x2000020c

0800645c <__malloc_unlock>:
 800645c:	4801      	ldr	r0, [pc, #4]	; (8006464 <__malloc_unlock+0x8>)
 800645e:	f7ff bf92 	b.w	8006386 <__retarget_lock_release_recursive>
 8006462:	bf00      	nop
 8006464:	2000020c 	.word	0x2000020c

08006468 <__sfputc_r>:
 8006468:	6893      	ldr	r3, [r2, #8]
 800646a:	3b01      	subs	r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	b410      	push	{r4}
 8006470:	6093      	str	r3, [r2, #8]
 8006472:	da08      	bge.n	8006486 <__sfputc_r+0x1e>
 8006474:	6994      	ldr	r4, [r2, #24]
 8006476:	42a3      	cmp	r3, r4
 8006478:	db01      	blt.n	800647e <__sfputc_r+0x16>
 800647a:	290a      	cmp	r1, #10
 800647c:	d103      	bne.n	8006486 <__sfputc_r+0x1e>
 800647e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006482:	f7ff bd07 	b.w	8005e94 <__swbuf_r>
 8006486:	6813      	ldr	r3, [r2, #0]
 8006488:	1c58      	adds	r0, r3, #1
 800648a:	6010      	str	r0, [r2, #0]
 800648c:	7019      	strb	r1, [r3, #0]
 800648e:	4608      	mov	r0, r1
 8006490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006494:	4770      	bx	lr

08006496 <__sfputs_r>:
 8006496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006498:	4606      	mov	r6, r0
 800649a:	460f      	mov	r7, r1
 800649c:	4614      	mov	r4, r2
 800649e:	18d5      	adds	r5, r2, r3
 80064a0:	42ac      	cmp	r4, r5
 80064a2:	d101      	bne.n	80064a8 <__sfputs_r+0x12>
 80064a4:	2000      	movs	r0, #0
 80064a6:	e007      	b.n	80064b8 <__sfputs_r+0x22>
 80064a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ac:	463a      	mov	r2, r7
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7ff ffda 	bl	8006468 <__sfputc_r>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d1f3      	bne.n	80064a0 <__sfputs_r+0xa>
 80064b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064bc <_vfiprintf_r>:
 80064bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	460d      	mov	r5, r1
 80064c2:	b09d      	sub	sp, #116	; 0x74
 80064c4:	4614      	mov	r4, r2
 80064c6:	4698      	mov	r8, r3
 80064c8:	4606      	mov	r6, r0
 80064ca:	b118      	cbz	r0, 80064d4 <_vfiprintf_r+0x18>
 80064cc:	6983      	ldr	r3, [r0, #24]
 80064ce:	b90b      	cbnz	r3, 80064d4 <_vfiprintf_r+0x18>
 80064d0:	f7ff feba 	bl	8006248 <__sinit>
 80064d4:	4b89      	ldr	r3, [pc, #548]	; (80066fc <_vfiprintf_r+0x240>)
 80064d6:	429d      	cmp	r5, r3
 80064d8:	d11b      	bne.n	8006512 <_vfiprintf_r+0x56>
 80064da:	6875      	ldr	r5, [r6, #4]
 80064dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064de:	07d9      	lsls	r1, r3, #31
 80064e0:	d405      	bmi.n	80064ee <_vfiprintf_r+0x32>
 80064e2:	89ab      	ldrh	r3, [r5, #12]
 80064e4:	059a      	lsls	r2, r3, #22
 80064e6:	d402      	bmi.n	80064ee <_vfiprintf_r+0x32>
 80064e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ea:	f7ff ff4b 	bl	8006384 <__retarget_lock_acquire_recursive>
 80064ee:	89ab      	ldrh	r3, [r5, #12]
 80064f0:	071b      	lsls	r3, r3, #28
 80064f2:	d501      	bpl.n	80064f8 <_vfiprintf_r+0x3c>
 80064f4:	692b      	ldr	r3, [r5, #16]
 80064f6:	b9eb      	cbnz	r3, 8006534 <_vfiprintf_r+0x78>
 80064f8:	4629      	mov	r1, r5
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7ff fd1c 	bl	8005f38 <__swsetup_r>
 8006500:	b1c0      	cbz	r0, 8006534 <_vfiprintf_r+0x78>
 8006502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006504:	07dc      	lsls	r4, r3, #31
 8006506:	d50e      	bpl.n	8006526 <_vfiprintf_r+0x6a>
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	b01d      	add	sp, #116	; 0x74
 800650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006512:	4b7b      	ldr	r3, [pc, #492]	; (8006700 <_vfiprintf_r+0x244>)
 8006514:	429d      	cmp	r5, r3
 8006516:	d101      	bne.n	800651c <_vfiprintf_r+0x60>
 8006518:	68b5      	ldr	r5, [r6, #8]
 800651a:	e7df      	b.n	80064dc <_vfiprintf_r+0x20>
 800651c:	4b79      	ldr	r3, [pc, #484]	; (8006704 <_vfiprintf_r+0x248>)
 800651e:	429d      	cmp	r5, r3
 8006520:	bf08      	it	eq
 8006522:	68f5      	ldreq	r5, [r6, #12]
 8006524:	e7da      	b.n	80064dc <_vfiprintf_r+0x20>
 8006526:	89ab      	ldrh	r3, [r5, #12]
 8006528:	0598      	lsls	r0, r3, #22
 800652a:	d4ed      	bmi.n	8006508 <_vfiprintf_r+0x4c>
 800652c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800652e:	f7ff ff2a 	bl	8006386 <__retarget_lock_release_recursive>
 8006532:	e7e9      	b.n	8006508 <_vfiprintf_r+0x4c>
 8006534:	2300      	movs	r3, #0
 8006536:	9309      	str	r3, [sp, #36]	; 0x24
 8006538:	2320      	movs	r3, #32
 800653a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800653e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006542:	2330      	movs	r3, #48	; 0x30
 8006544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006708 <_vfiprintf_r+0x24c>
 8006548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800654c:	f04f 0901 	mov.w	r9, #1
 8006550:	4623      	mov	r3, r4
 8006552:	469a      	mov	sl, r3
 8006554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006558:	b10a      	cbz	r2, 800655e <_vfiprintf_r+0xa2>
 800655a:	2a25      	cmp	r2, #37	; 0x25
 800655c:	d1f9      	bne.n	8006552 <_vfiprintf_r+0x96>
 800655e:	ebba 0b04 	subs.w	fp, sl, r4
 8006562:	d00b      	beq.n	800657c <_vfiprintf_r+0xc0>
 8006564:	465b      	mov	r3, fp
 8006566:	4622      	mov	r2, r4
 8006568:	4629      	mov	r1, r5
 800656a:	4630      	mov	r0, r6
 800656c:	f7ff ff93 	bl	8006496 <__sfputs_r>
 8006570:	3001      	adds	r0, #1
 8006572:	f000 80aa 	beq.w	80066ca <_vfiprintf_r+0x20e>
 8006576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006578:	445a      	add	r2, fp
 800657a:	9209      	str	r2, [sp, #36]	; 0x24
 800657c:	f89a 3000 	ldrb.w	r3, [sl]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80a2 	beq.w	80066ca <_vfiprintf_r+0x20e>
 8006586:	2300      	movs	r3, #0
 8006588:	f04f 32ff 	mov.w	r2, #4294967295
 800658c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006590:	f10a 0a01 	add.w	sl, sl, #1
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800659c:	931a      	str	r3, [sp, #104]	; 0x68
 800659e:	4654      	mov	r4, sl
 80065a0:	2205      	movs	r2, #5
 80065a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a6:	4858      	ldr	r0, [pc, #352]	; (8006708 <_vfiprintf_r+0x24c>)
 80065a8:	f7f9 fe12 	bl	80001d0 <memchr>
 80065ac:	9a04      	ldr	r2, [sp, #16]
 80065ae:	b9d8      	cbnz	r0, 80065e8 <_vfiprintf_r+0x12c>
 80065b0:	06d1      	lsls	r1, r2, #27
 80065b2:	bf44      	itt	mi
 80065b4:	2320      	movmi	r3, #32
 80065b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ba:	0713      	lsls	r3, r2, #28
 80065bc:	bf44      	itt	mi
 80065be:	232b      	movmi	r3, #43	; 0x2b
 80065c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c4:	f89a 3000 	ldrb.w	r3, [sl]
 80065c8:	2b2a      	cmp	r3, #42	; 0x2a
 80065ca:	d015      	beq.n	80065f8 <_vfiprintf_r+0x13c>
 80065cc:	9a07      	ldr	r2, [sp, #28]
 80065ce:	4654      	mov	r4, sl
 80065d0:	2000      	movs	r0, #0
 80065d2:	f04f 0c0a 	mov.w	ip, #10
 80065d6:	4621      	mov	r1, r4
 80065d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065dc:	3b30      	subs	r3, #48	; 0x30
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d94e      	bls.n	8006680 <_vfiprintf_r+0x1c4>
 80065e2:	b1b0      	cbz	r0, 8006612 <_vfiprintf_r+0x156>
 80065e4:	9207      	str	r2, [sp, #28]
 80065e6:	e014      	b.n	8006612 <_vfiprintf_r+0x156>
 80065e8:	eba0 0308 	sub.w	r3, r0, r8
 80065ec:	fa09 f303 	lsl.w	r3, r9, r3
 80065f0:	4313      	orrs	r3, r2
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	46a2      	mov	sl, r4
 80065f6:	e7d2      	b.n	800659e <_vfiprintf_r+0xe2>
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	1d19      	adds	r1, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	9103      	str	r1, [sp, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	bfbb      	ittet	lt
 8006604:	425b      	neglt	r3, r3
 8006606:	f042 0202 	orrlt.w	r2, r2, #2
 800660a:	9307      	strge	r3, [sp, #28]
 800660c:	9307      	strlt	r3, [sp, #28]
 800660e:	bfb8      	it	lt
 8006610:	9204      	strlt	r2, [sp, #16]
 8006612:	7823      	ldrb	r3, [r4, #0]
 8006614:	2b2e      	cmp	r3, #46	; 0x2e
 8006616:	d10c      	bne.n	8006632 <_vfiprintf_r+0x176>
 8006618:	7863      	ldrb	r3, [r4, #1]
 800661a:	2b2a      	cmp	r3, #42	; 0x2a
 800661c:	d135      	bne.n	800668a <_vfiprintf_r+0x1ce>
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	9203      	str	r2, [sp, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	bfb8      	it	lt
 800662a:	f04f 33ff 	movlt.w	r3, #4294967295
 800662e:	3402      	adds	r4, #2
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006718 <_vfiprintf_r+0x25c>
 8006636:	7821      	ldrb	r1, [r4, #0]
 8006638:	2203      	movs	r2, #3
 800663a:	4650      	mov	r0, sl
 800663c:	f7f9 fdc8 	bl	80001d0 <memchr>
 8006640:	b140      	cbz	r0, 8006654 <_vfiprintf_r+0x198>
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	eba0 000a 	sub.w	r0, r0, sl
 8006648:	fa03 f000 	lsl.w	r0, r3, r0
 800664c:	9b04      	ldr	r3, [sp, #16]
 800664e:	4303      	orrs	r3, r0
 8006650:	3401      	adds	r4, #1
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006658:	482c      	ldr	r0, [pc, #176]	; (800670c <_vfiprintf_r+0x250>)
 800665a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800665e:	2206      	movs	r2, #6
 8006660:	f7f9 fdb6 	bl	80001d0 <memchr>
 8006664:	2800      	cmp	r0, #0
 8006666:	d03f      	beq.n	80066e8 <_vfiprintf_r+0x22c>
 8006668:	4b29      	ldr	r3, [pc, #164]	; (8006710 <_vfiprintf_r+0x254>)
 800666a:	bb1b      	cbnz	r3, 80066b4 <_vfiprintf_r+0x1f8>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	3307      	adds	r3, #7
 8006670:	f023 0307 	bic.w	r3, r3, #7
 8006674:	3308      	adds	r3, #8
 8006676:	9303      	str	r3, [sp, #12]
 8006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667a:	443b      	add	r3, r7
 800667c:	9309      	str	r3, [sp, #36]	; 0x24
 800667e:	e767      	b.n	8006550 <_vfiprintf_r+0x94>
 8006680:	fb0c 3202 	mla	r2, ip, r2, r3
 8006684:	460c      	mov	r4, r1
 8006686:	2001      	movs	r0, #1
 8006688:	e7a5      	b.n	80065d6 <_vfiprintf_r+0x11a>
 800668a:	2300      	movs	r3, #0
 800668c:	3401      	adds	r4, #1
 800668e:	9305      	str	r3, [sp, #20]
 8006690:	4619      	mov	r1, r3
 8006692:	f04f 0c0a 	mov.w	ip, #10
 8006696:	4620      	mov	r0, r4
 8006698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800669c:	3a30      	subs	r2, #48	; 0x30
 800669e:	2a09      	cmp	r2, #9
 80066a0:	d903      	bls.n	80066aa <_vfiprintf_r+0x1ee>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0c5      	beq.n	8006632 <_vfiprintf_r+0x176>
 80066a6:	9105      	str	r1, [sp, #20]
 80066a8:	e7c3      	b.n	8006632 <_vfiprintf_r+0x176>
 80066aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ae:	4604      	mov	r4, r0
 80066b0:	2301      	movs	r3, #1
 80066b2:	e7f0      	b.n	8006696 <_vfiprintf_r+0x1da>
 80066b4:	ab03      	add	r3, sp, #12
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	462a      	mov	r2, r5
 80066ba:	4b16      	ldr	r3, [pc, #88]	; (8006714 <_vfiprintf_r+0x258>)
 80066bc:	a904      	add	r1, sp, #16
 80066be:	4630      	mov	r0, r6
 80066c0:	f3af 8000 	nop.w
 80066c4:	4607      	mov	r7, r0
 80066c6:	1c78      	adds	r0, r7, #1
 80066c8:	d1d6      	bne.n	8006678 <_vfiprintf_r+0x1bc>
 80066ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066cc:	07d9      	lsls	r1, r3, #31
 80066ce:	d405      	bmi.n	80066dc <_vfiprintf_r+0x220>
 80066d0:	89ab      	ldrh	r3, [r5, #12]
 80066d2:	059a      	lsls	r2, r3, #22
 80066d4:	d402      	bmi.n	80066dc <_vfiprintf_r+0x220>
 80066d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066d8:	f7ff fe55 	bl	8006386 <__retarget_lock_release_recursive>
 80066dc:	89ab      	ldrh	r3, [r5, #12]
 80066de:	065b      	lsls	r3, r3, #25
 80066e0:	f53f af12 	bmi.w	8006508 <_vfiprintf_r+0x4c>
 80066e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e6:	e711      	b.n	800650c <_vfiprintf_r+0x50>
 80066e8:	ab03      	add	r3, sp, #12
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	462a      	mov	r2, r5
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <_vfiprintf_r+0x258>)
 80066f0:	a904      	add	r1, sp, #16
 80066f2:	4630      	mov	r0, r6
 80066f4:	f000 f880 	bl	80067f8 <_printf_i>
 80066f8:	e7e4      	b.n	80066c4 <_vfiprintf_r+0x208>
 80066fa:	bf00      	nop
 80066fc:	08008c0c 	.word	0x08008c0c
 8006700:	08008c2c 	.word	0x08008c2c
 8006704:	08008bec 	.word	0x08008bec
 8006708:	08008c4c 	.word	0x08008c4c
 800670c:	08008c56 	.word	0x08008c56
 8006710:	00000000 	.word	0x00000000
 8006714:	08006497 	.word	0x08006497
 8006718:	08008c52 	.word	0x08008c52

0800671c <_printf_common>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	4616      	mov	r6, r2
 8006722:	4699      	mov	r9, r3
 8006724:	688a      	ldr	r2, [r1, #8]
 8006726:	690b      	ldr	r3, [r1, #16]
 8006728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800672c:	4293      	cmp	r3, r2
 800672e:	bfb8      	it	lt
 8006730:	4613      	movlt	r3, r2
 8006732:	6033      	str	r3, [r6, #0]
 8006734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006738:	4607      	mov	r7, r0
 800673a:	460c      	mov	r4, r1
 800673c:	b10a      	cbz	r2, 8006742 <_printf_common+0x26>
 800673e:	3301      	adds	r3, #1
 8006740:	6033      	str	r3, [r6, #0]
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	0699      	lsls	r1, r3, #26
 8006746:	bf42      	ittt	mi
 8006748:	6833      	ldrmi	r3, [r6, #0]
 800674a:	3302      	addmi	r3, #2
 800674c:	6033      	strmi	r3, [r6, #0]
 800674e:	6825      	ldr	r5, [r4, #0]
 8006750:	f015 0506 	ands.w	r5, r5, #6
 8006754:	d106      	bne.n	8006764 <_printf_common+0x48>
 8006756:	f104 0a19 	add.w	sl, r4, #25
 800675a:	68e3      	ldr	r3, [r4, #12]
 800675c:	6832      	ldr	r2, [r6, #0]
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	42ab      	cmp	r3, r5
 8006762:	dc26      	bgt.n	80067b2 <_printf_common+0x96>
 8006764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006768:	1e13      	subs	r3, r2, #0
 800676a:	6822      	ldr	r2, [r4, #0]
 800676c:	bf18      	it	ne
 800676e:	2301      	movne	r3, #1
 8006770:	0692      	lsls	r2, r2, #26
 8006772:	d42b      	bmi.n	80067cc <_printf_common+0xb0>
 8006774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006778:	4649      	mov	r1, r9
 800677a:	4638      	mov	r0, r7
 800677c:	47c0      	blx	r8
 800677e:	3001      	adds	r0, #1
 8006780:	d01e      	beq.n	80067c0 <_printf_common+0xa4>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	68e5      	ldr	r5, [r4, #12]
 8006786:	6832      	ldr	r2, [r6, #0]
 8006788:	f003 0306 	and.w	r3, r3, #6
 800678c:	2b04      	cmp	r3, #4
 800678e:	bf08      	it	eq
 8006790:	1aad      	subeq	r5, r5, r2
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	6922      	ldr	r2, [r4, #16]
 8006796:	bf0c      	ite	eq
 8006798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800679c:	2500      	movne	r5, #0
 800679e:	4293      	cmp	r3, r2
 80067a0:	bfc4      	itt	gt
 80067a2:	1a9b      	subgt	r3, r3, r2
 80067a4:	18ed      	addgt	r5, r5, r3
 80067a6:	2600      	movs	r6, #0
 80067a8:	341a      	adds	r4, #26
 80067aa:	42b5      	cmp	r5, r6
 80067ac:	d11a      	bne.n	80067e4 <_printf_common+0xc8>
 80067ae:	2000      	movs	r0, #0
 80067b0:	e008      	b.n	80067c4 <_printf_common+0xa8>
 80067b2:	2301      	movs	r3, #1
 80067b4:	4652      	mov	r2, sl
 80067b6:	4649      	mov	r1, r9
 80067b8:	4638      	mov	r0, r7
 80067ba:	47c0      	blx	r8
 80067bc:	3001      	adds	r0, #1
 80067be:	d103      	bne.n	80067c8 <_printf_common+0xac>
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c8:	3501      	adds	r5, #1
 80067ca:	e7c6      	b.n	800675a <_printf_common+0x3e>
 80067cc:	18e1      	adds	r1, r4, r3
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	2030      	movs	r0, #48	; 0x30
 80067d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067d6:	4422      	add	r2, r4
 80067d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067e0:	3302      	adds	r3, #2
 80067e2:	e7c7      	b.n	8006774 <_printf_common+0x58>
 80067e4:	2301      	movs	r3, #1
 80067e6:	4622      	mov	r2, r4
 80067e8:	4649      	mov	r1, r9
 80067ea:	4638      	mov	r0, r7
 80067ec:	47c0      	blx	r8
 80067ee:	3001      	adds	r0, #1
 80067f0:	d0e6      	beq.n	80067c0 <_printf_common+0xa4>
 80067f2:	3601      	adds	r6, #1
 80067f4:	e7d9      	b.n	80067aa <_printf_common+0x8e>
	...

080067f8 <_printf_i>:
 80067f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	460c      	mov	r4, r1
 80067fe:	4691      	mov	r9, r2
 8006800:	7e27      	ldrb	r7, [r4, #24]
 8006802:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006804:	2f78      	cmp	r7, #120	; 0x78
 8006806:	4680      	mov	r8, r0
 8006808:	469a      	mov	sl, r3
 800680a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800680e:	d807      	bhi.n	8006820 <_printf_i+0x28>
 8006810:	2f62      	cmp	r7, #98	; 0x62
 8006812:	d80a      	bhi.n	800682a <_printf_i+0x32>
 8006814:	2f00      	cmp	r7, #0
 8006816:	f000 80d8 	beq.w	80069ca <_printf_i+0x1d2>
 800681a:	2f58      	cmp	r7, #88	; 0x58
 800681c:	f000 80a3 	beq.w	8006966 <_printf_i+0x16e>
 8006820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006828:	e03a      	b.n	80068a0 <_printf_i+0xa8>
 800682a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800682e:	2b15      	cmp	r3, #21
 8006830:	d8f6      	bhi.n	8006820 <_printf_i+0x28>
 8006832:	a001      	add	r0, pc, #4	; (adr r0, 8006838 <_printf_i+0x40>)
 8006834:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006838:	08006891 	.word	0x08006891
 800683c:	080068a5 	.word	0x080068a5
 8006840:	08006821 	.word	0x08006821
 8006844:	08006821 	.word	0x08006821
 8006848:	08006821 	.word	0x08006821
 800684c:	08006821 	.word	0x08006821
 8006850:	080068a5 	.word	0x080068a5
 8006854:	08006821 	.word	0x08006821
 8006858:	08006821 	.word	0x08006821
 800685c:	08006821 	.word	0x08006821
 8006860:	08006821 	.word	0x08006821
 8006864:	080069b1 	.word	0x080069b1
 8006868:	080068d5 	.word	0x080068d5
 800686c:	08006993 	.word	0x08006993
 8006870:	08006821 	.word	0x08006821
 8006874:	08006821 	.word	0x08006821
 8006878:	080069d3 	.word	0x080069d3
 800687c:	08006821 	.word	0x08006821
 8006880:	080068d5 	.word	0x080068d5
 8006884:	08006821 	.word	0x08006821
 8006888:	08006821 	.word	0x08006821
 800688c:	0800699b 	.word	0x0800699b
 8006890:	680b      	ldr	r3, [r1, #0]
 8006892:	1d1a      	adds	r2, r3, #4
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	600a      	str	r2, [r1, #0]
 8006898:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800689c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0a3      	b.n	80069ec <_printf_i+0x1f4>
 80068a4:	6825      	ldr	r5, [r4, #0]
 80068a6:	6808      	ldr	r0, [r1, #0]
 80068a8:	062e      	lsls	r6, r5, #24
 80068aa:	f100 0304 	add.w	r3, r0, #4
 80068ae:	d50a      	bpl.n	80068c6 <_printf_i+0xce>
 80068b0:	6805      	ldr	r5, [r0, #0]
 80068b2:	600b      	str	r3, [r1, #0]
 80068b4:	2d00      	cmp	r5, #0
 80068b6:	da03      	bge.n	80068c0 <_printf_i+0xc8>
 80068b8:	232d      	movs	r3, #45	; 0x2d
 80068ba:	426d      	negs	r5, r5
 80068bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c0:	485e      	ldr	r0, [pc, #376]	; (8006a3c <_printf_i+0x244>)
 80068c2:	230a      	movs	r3, #10
 80068c4:	e019      	b.n	80068fa <_printf_i+0x102>
 80068c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068ca:	6805      	ldr	r5, [r0, #0]
 80068cc:	600b      	str	r3, [r1, #0]
 80068ce:	bf18      	it	ne
 80068d0:	b22d      	sxthne	r5, r5
 80068d2:	e7ef      	b.n	80068b4 <_printf_i+0xbc>
 80068d4:	680b      	ldr	r3, [r1, #0]
 80068d6:	6825      	ldr	r5, [r4, #0]
 80068d8:	1d18      	adds	r0, r3, #4
 80068da:	6008      	str	r0, [r1, #0]
 80068dc:	0628      	lsls	r0, r5, #24
 80068de:	d501      	bpl.n	80068e4 <_printf_i+0xec>
 80068e0:	681d      	ldr	r5, [r3, #0]
 80068e2:	e002      	b.n	80068ea <_printf_i+0xf2>
 80068e4:	0669      	lsls	r1, r5, #25
 80068e6:	d5fb      	bpl.n	80068e0 <_printf_i+0xe8>
 80068e8:	881d      	ldrh	r5, [r3, #0]
 80068ea:	4854      	ldr	r0, [pc, #336]	; (8006a3c <_printf_i+0x244>)
 80068ec:	2f6f      	cmp	r7, #111	; 0x6f
 80068ee:	bf0c      	ite	eq
 80068f0:	2308      	moveq	r3, #8
 80068f2:	230a      	movne	r3, #10
 80068f4:	2100      	movs	r1, #0
 80068f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068fa:	6866      	ldr	r6, [r4, #4]
 80068fc:	60a6      	str	r6, [r4, #8]
 80068fe:	2e00      	cmp	r6, #0
 8006900:	bfa2      	ittt	ge
 8006902:	6821      	ldrge	r1, [r4, #0]
 8006904:	f021 0104 	bicge.w	r1, r1, #4
 8006908:	6021      	strge	r1, [r4, #0]
 800690a:	b90d      	cbnz	r5, 8006910 <_printf_i+0x118>
 800690c:	2e00      	cmp	r6, #0
 800690e:	d04d      	beq.n	80069ac <_printf_i+0x1b4>
 8006910:	4616      	mov	r6, r2
 8006912:	fbb5 f1f3 	udiv	r1, r5, r3
 8006916:	fb03 5711 	mls	r7, r3, r1, r5
 800691a:	5dc7      	ldrb	r7, [r0, r7]
 800691c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006920:	462f      	mov	r7, r5
 8006922:	42bb      	cmp	r3, r7
 8006924:	460d      	mov	r5, r1
 8006926:	d9f4      	bls.n	8006912 <_printf_i+0x11a>
 8006928:	2b08      	cmp	r3, #8
 800692a:	d10b      	bne.n	8006944 <_printf_i+0x14c>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	07df      	lsls	r7, r3, #31
 8006930:	d508      	bpl.n	8006944 <_printf_i+0x14c>
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	6861      	ldr	r1, [r4, #4]
 8006936:	4299      	cmp	r1, r3
 8006938:	bfde      	ittt	le
 800693a:	2330      	movle	r3, #48	; 0x30
 800693c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006940:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006944:	1b92      	subs	r2, r2, r6
 8006946:	6122      	str	r2, [r4, #16]
 8006948:	f8cd a000 	str.w	sl, [sp]
 800694c:	464b      	mov	r3, r9
 800694e:	aa03      	add	r2, sp, #12
 8006950:	4621      	mov	r1, r4
 8006952:	4640      	mov	r0, r8
 8006954:	f7ff fee2 	bl	800671c <_printf_common>
 8006958:	3001      	adds	r0, #1
 800695a:	d14c      	bne.n	80069f6 <_printf_i+0x1fe>
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	b004      	add	sp, #16
 8006962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006966:	4835      	ldr	r0, [pc, #212]	; (8006a3c <_printf_i+0x244>)
 8006968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	680e      	ldr	r6, [r1, #0]
 8006970:	061f      	lsls	r7, r3, #24
 8006972:	f856 5b04 	ldr.w	r5, [r6], #4
 8006976:	600e      	str	r6, [r1, #0]
 8006978:	d514      	bpl.n	80069a4 <_printf_i+0x1ac>
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	bf44      	itt	mi
 800697e:	f043 0320 	orrmi.w	r3, r3, #32
 8006982:	6023      	strmi	r3, [r4, #0]
 8006984:	b91d      	cbnz	r5, 800698e <_printf_i+0x196>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	f023 0320 	bic.w	r3, r3, #32
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	2310      	movs	r3, #16
 8006990:	e7b0      	b.n	80068f4 <_printf_i+0xfc>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	f043 0320 	orr.w	r3, r3, #32
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	2378      	movs	r3, #120	; 0x78
 800699c:	4828      	ldr	r0, [pc, #160]	; (8006a40 <_printf_i+0x248>)
 800699e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069a2:	e7e3      	b.n	800696c <_printf_i+0x174>
 80069a4:	065e      	lsls	r6, r3, #25
 80069a6:	bf48      	it	mi
 80069a8:	b2ad      	uxthmi	r5, r5
 80069aa:	e7e6      	b.n	800697a <_printf_i+0x182>
 80069ac:	4616      	mov	r6, r2
 80069ae:	e7bb      	b.n	8006928 <_printf_i+0x130>
 80069b0:	680b      	ldr	r3, [r1, #0]
 80069b2:	6826      	ldr	r6, [r4, #0]
 80069b4:	6960      	ldr	r0, [r4, #20]
 80069b6:	1d1d      	adds	r5, r3, #4
 80069b8:	600d      	str	r5, [r1, #0]
 80069ba:	0635      	lsls	r5, r6, #24
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	d501      	bpl.n	80069c4 <_printf_i+0x1cc>
 80069c0:	6018      	str	r0, [r3, #0]
 80069c2:	e002      	b.n	80069ca <_printf_i+0x1d2>
 80069c4:	0671      	lsls	r1, r6, #25
 80069c6:	d5fb      	bpl.n	80069c0 <_printf_i+0x1c8>
 80069c8:	8018      	strh	r0, [r3, #0]
 80069ca:	2300      	movs	r3, #0
 80069cc:	6123      	str	r3, [r4, #16]
 80069ce:	4616      	mov	r6, r2
 80069d0:	e7ba      	b.n	8006948 <_printf_i+0x150>
 80069d2:	680b      	ldr	r3, [r1, #0]
 80069d4:	1d1a      	adds	r2, r3, #4
 80069d6:	600a      	str	r2, [r1, #0]
 80069d8:	681e      	ldr	r6, [r3, #0]
 80069da:	6862      	ldr	r2, [r4, #4]
 80069dc:	2100      	movs	r1, #0
 80069de:	4630      	mov	r0, r6
 80069e0:	f7f9 fbf6 	bl	80001d0 <memchr>
 80069e4:	b108      	cbz	r0, 80069ea <_printf_i+0x1f2>
 80069e6:	1b80      	subs	r0, r0, r6
 80069e8:	6060      	str	r0, [r4, #4]
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	2300      	movs	r3, #0
 80069f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f4:	e7a8      	b.n	8006948 <_printf_i+0x150>
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	4632      	mov	r2, r6
 80069fa:	4649      	mov	r1, r9
 80069fc:	4640      	mov	r0, r8
 80069fe:	47d0      	blx	sl
 8006a00:	3001      	adds	r0, #1
 8006a02:	d0ab      	beq.n	800695c <_printf_i+0x164>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	079b      	lsls	r3, r3, #30
 8006a08:	d413      	bmi.n	8006a32 <_printf_i+0x23a>
 8006a0a:	68e0      	ldr	r0, [r4, #12]
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	4298      	cmp	r0, r3
 8006a10:	bfb8      	it	lt
 8006a12:	4618      	movlt	r0, r3
 8006a14:	e7a4      	b.n	8006960 <_printf_i+0x168>
 8006a16:	2301      	movs	r3, #1
 8006a18:	4632      	mov	r2, r6
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	47d0      	blx	sl
 8006a20:	3001      	adds	r0, #1
 8006a22:	d09b      	beq.n	800695c <_printf_i+0x164>
 8006a24:	3501      	adds	r5, #1
 8006a26:	68e3      	ldr	r3, [r4, #12]
 8006a28:	9903      	ldr	r1, [sp, #12]
 8006a2a:	1a5b      	subs	r3, r3, r1
 8006a2c:	42ab      	cmp	r3, r5
 8006a2e:	dcf2      	bgt.n	8006a16 <_printf_i+0x21e>
 8006a30:	e7eb      	b.n	8006a0a <_printf_i+0x212>
 8006a32:	2500      	movs	r5, #0
 8006a34:	f104 0619 	add.w	r6, r4, #25
 8006a38:	e7f5      	b.n	8006a26 <_printf_i+0x22e>
 8006a3a:	bf00      	nop
 8006a3c:	08008c5d 	.word	0x08008c5d
 8006a40:	08008c6e 	.word	0x08008c6e

08006a44 <__sread>:
 8006a44:	b510      	push	{r4, lr}
 8006a46:	460c      	mov	r4, r1
 8006a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4c:	f000 f894 	bl	8006b78 <_read_r>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	bfab      	itete	ge
 8006a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a56:	89a3      	ldrhlt	r3, [r4, #12]
 8006a58:	181b      	addge	r3, r3, r0
 8006a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a5e:	bfac      	ite	ge
 8006a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a62:	81a3      	strhlt	r3, [r4, #12]
 8006a64:	bd10      	pop	{r4, pc}

08006a66 <__swrite>:
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	461f      	mov	r7, r3
 8006a6c:	898b      	ldrh	r3, [r1, #12]
 8006a6e:	05db      	lsls	r3, r3, #23
 8006a70:	4605      	mov	r5, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	4616      	mov	r6, r2
 8006a76:	d505      	bpl.n	8006a84 <__swrite+0x1e>
 8006a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f000 f868 	bl	8006b54 <_lseek_r>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	4628      	mov	r0, r5
 8006a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9a:	f000 b817 	b.w	8006acc <_write_r>

08006a9e <__sseek>:
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa6:	f000 f855 	bl	8006b54 <_lseek_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	bf15      	itete	ne
 8006ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aba:	81a3      	strheq	r3, [r4, #12]
 8006abc:	bf18      	it	ne
 8006abe:	81a3      	strhne	r3, [r4, #12]
 8006ac0:	bd10      	pop	{r4, pc}

08006ac2 <__sclose>:
 8006ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac6:	f000 b813 	b.w	8006af0 <_close_r>
	...

08006acc <_write_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d07      	ldr	r5, [pc, #28]	; (8006aec <_write_r+0x20>)
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	602a      	str	r2, [r5, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f7fb fa43 	bl	8001f66 <_write>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_write_r+0x1e>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_write_r+0x1e>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	20000214 	.word	0x20000214

08006af0 <_close_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4d06      	ldr	r5, [pc, #24]	; (8006b0c <_close_r+0x1c>)
 8006af4:	2300      	movs	r3, #0
 8006af6:	4604      	mov	r4, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	602b      	str	r3, [r5, #0]
 8006afc:	f7fb fa4f 	bl	8001f9e <_close>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d102      	bne.n	8006b0a <_close_r+0x1a>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	b103      	cbz	r3, 8006b0a <_close_r+0x1a>
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	20000214 	.word	0x20000214

08006b10 <_fstat_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	; (8006b30 <_fstat_r+0x20>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f7fb fa4a 	bl	8001fb6 <_fstat>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <_fstat_r+0x1c>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	b103      	cbz	r3, 8006b2c <_fstat_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd38      	pop	{r3, r4, r5, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000214 	.word	0x20000214

08006b34 <_isatty_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	; (8006b50 <_isatty_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fb fa49 	bl	8001fd6 <_isatty>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_isatty_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_isatty_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	20000214 	.word	0x20000214

08006b54 <_lseek_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4d07      	ldr	r5, [pc, #28]	; (8006b74 <_lseek_r+0x20>)
 8006b58:	4604      	mov	r4, r0
 8006b5a:	4608      	mov	r0, r1
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	2200      	movs	r2, #0
 8006b60:	602a      	str	r2, [r5, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f7fb fa42 	bl	8001fec <_lseek>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d102      	bne.n	8006b72 <_lseek_r+0x1e>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	b103      	cbz	r3, 8006b72 <_lseek_r+0x1e>
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	20000214 	.word	0x20000214

08006b78 <_read_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4d07      	ldr	r5, [pc, #28]	; (8006b98 <_read_r+0x20>)
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	4608      	mov	r0, r1
 8006b80:	4611      	mov	r1, r2
 8006b82:	2200      	movs	r2, #0
 8006b84:	602a      	str	r2, [r5, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f7fb f9d0 	bl	8001f2c <_read>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_read_r+0x1e>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_read_r+0x1e>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	20000214 	.word	0x20000214

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
